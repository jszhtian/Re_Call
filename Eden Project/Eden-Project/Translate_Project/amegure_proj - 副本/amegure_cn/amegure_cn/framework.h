// header.h: 标准系统包含文件的包含文件，
// 或特定于项目的包含文件
//

#pragma once

#define WIN32_LEAN_AND_MEAN             // 从 Windows 头文件中排除极少使用的内容
// Windows 头文件
#include <windows.h>
#include <fstream>
#include <iostream>
#include <string>
#include <cstring>
#include <tchar.h>
#include <iomanip>
#include <mutex>
#include <stdio.h>
#include <map>
#include <string>
#include <shlwapi.h>
#include "detours.h"
#include <iostream>
#include <fstream>
#include <cstdio>
#include <memory>
#include <sstream>
#include <vector>
//#include "FileCopy.h"
#include "detours.h"
#include "zlib.h"
#pragma comment(lib, "detours.lib")
#pragma comment(lib, "zlib.lib")
static DWORD BaseAddr = (DWORD)GetModuleHandle(NULL);

#include "camellia.h"
#define CACHE_SIZE 1024*1024*10 //10M

static const unsigned char camelia_key[] = {
	0xC4, 0xF8, 0x36, 0x44, 0x7E, 0xA9, 0x3F, 0xDD, 0xE8, 0x99, 0x38, 0xAA, 0xD5, 0xB4, 0x5E, 0x1C,
	0x43, 0x84, 0x59, 0x6B, 0xF9, 0xD5, 0x50, 0xF2, 0x6F, 0xE5, 0x57, 0x85, 0xCC, 0x70, 0x33, 0x1B,
	0x5A, 0x40, 0x34, 0x6C, 0xE0, 0x11, 0x3D, 0xF5, 0x76, 0x21, 0x3A, 0x82, 0xE7, 0x3C, 0x85, 0x12,
	0x71, 0x0C, 0x82, 0x65, 0xCB, 0x5D, 0x8B, 0xFC, 0x5D, 0x6D, 0x8C, 0x8B, 0xFE, 0xF8, 0xE8, 0x15,
	0xF4, 0x51, 0x6B, 0x6B, 0x62, 0x61, 0x6C, 0x1C, 0xD8, 0x30, 0x65, 0x85, 0x4E, 0x00, 0x62, 0xF2,
	0xC6, 0xD9, 0xB0, 0x65, 0x50, 0xE9, 0xB7, 0x12, 0xEA, 0xB8, 0xBE, 0x8B, 0x7C, 0x88, 0xB9, 0xFC,
	0x58, 0x61, 0xB2, 0x4D, 0xCE, 0x51, 0xB5, 0x3A, 0x74, 0x00, 0xBC, 0xA3, 0xE2, 0x30, 0xBB, 0xD4,
	0x6A, 0xE9, 0x69, 0x43, 0xFC, 0xD9, 0x6E, 0x34, 0x46, 0x88, 0x67, 0xAD, 0xD0, 0xB8, 0x60, 0xDA,
	0x3C, 0x71, 0x05, 0x50, 0xAA, 0x41, 0x02, 0x27, 0x10, 0x10, 0x0B, 0xBE, 0x86, 0x20, 0x0C, 0xC9,
	0x0E, 0xF9, 0xDE, 0x5E, 0x98, 0xC9, 0xD9, 0x29, 0x22, 0x98, 0xD0, 0xB0, 0xB4, 0xA8, 0xD7, 0xC7,
	0x20, 0x83, 0xB8, 0xED, 0xB6, 0xB3, 0xBF, 0x9A, 0x0C, 0xE2, 0xB6, 0x03, 0x9A, 0xD2, 0xB1, 0x74,
	0x12, 0x0B, 0x63, 0xE3, 0x84, 0x3B, 0x64, 0x94, 0x3E, 0x6A, 0x6D, 0x0D, 0xA8, 0x5A, 0x6A, 0x7A,
	0x44, 0x93, 0x0F, 0xF0, 0xD2, 0xA3, 0x08, 0x87, 0x68, 0xF2, 0x01, 0x1E, 0xFE, 0xC2, 0x06, 0x69,
	0x76, 0x1B, 0xD4, 0xFE, 0xE0, 0x2B, 0xD3, 0x89, 0x5A, 0x7A, 0xDA, 0x10, 0xCC, 0x4A, 0xDD, 0x67,
	0xE8, 0xA3, 0xD6, 0xD6, 0x7E, 0x93, 0xD1, 0xA1, 0xC4, 0xC2, 0xD8, 0x38, 0x52, 0xF2, 0xDF, 0x4F,
	0xDA, 0x2B, 0x0D, 0xD8, 0x4C, 0x1B, 0x0A, 0xAF, 0xF6, 0x4A, 0x03, 0x36, 0x60, 0x7A, 0xB0, 0x60,
};
using namespace std;
static PVOID JMPHookPoint;
static PVOID JMPHookPointNext;
static PVOID JMPHookPoint2;
static PVOID JMPHookPointNext2;
static PVOID TmpJmp;
static DWORD BufferAddr;
static ofstream VFS("FileSystem.txt");
static std::mutex mtx;
static char* EdnFileBuffer;
static bool debug = true;

void EdenFileSystem_Main(char* FILENAME);

static void make_console()
{
	AllocConsole();
	freopen("CONOUT$", "w", stdout);
	freopen("CONIN$", "r", stdin);
	cout << "Console\n" << endl;
}

static bool JMPHelper(PVOID HookPoint, PVOID JMP_FUNC)
{
	DWORD oldProtect = 0;
	if (VirtualProtect(HookPoint, 5, PAGE_EXECUTE_READWRITE, &oldProtect))
		return false;
	DWORD offset = (DWORD)JMP_FUNC - (DWORD)HookPoint - 5;
	char JMPOp[] = { 0xE9 };
	memcpy(HookPoint, &JMPOp, 1);
	memcpy((char*)HookPoint + 1, &offset, sizeof(DWORD));
	if (VirtualProtect(HookPoint, 5, oldProtect, &oldProtect))
		return false;
	return true;
}

static void memcopy(void* dest, void* src, size_t size)
{
	DWORD oldProtect;
	VirtualProtect(dest, size, PAGE_EXECUTE_READWRITE, &oldProtect);
	memcpy(dest, src, size);
}

static bool ReplaceJump(PBYTE src, PBYTE dst)
{
	DWORD oldProtect;

	if (VirtualProtect((LPVOID)src, 10, PAGE_EXECUTE_READWRITE, &oldProtect)) {

		src[0] = 0xE9;
		*(DWORD*)& src[1] = (DWORD)(dst - src - 5);
		return true;
	}
	return false;
}

static void SetNopCode(int pnop, int size)
{
	BYTE Patch1[] = { 0xFE };
	for (int i = 0; i < size; i++) 
	{
		memcopy((void*)(pnop + i), Patch1, sizeof(Patch1));
	}
}

static void MEM_SetNopCode(BYTE* lpNop, SIZE_T dwSize)
{
	DWORD op;

	SIZE_T i;
	PBYTE adr;
	BYTE nix = 0x90;
	VirtualProtect(lpNop, dwSize, PAGE_EXECUTE_READWRITE, &op);

	for (i = 0; i < dwSize; i++)
	{
		adr = &lpNop[i];
		WriteProcessMemory(GetCurrentProcess(), adr, &nix, sizeof(BYTE), NULL);
	}
}

bool FileCopy();

/************************************************************************************************************/

/****************************************************************************************************************/