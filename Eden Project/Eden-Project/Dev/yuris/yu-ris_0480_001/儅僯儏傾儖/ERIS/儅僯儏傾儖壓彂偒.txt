
マニュアルに纏めている時間がもったいないので
下書きレベルのものを公開します。
とにかく早く情報を知りたい方向けです。(Webのほうにもアップ予定です)
どんどん追記していきます。
しばらくは適当に拾い読みしてください。



●文字影を無くす、縁取り文字をやめる方法

文字影を無くすには、文字定義で ￥TD.SHADE.XY(0,0) と設定します。
縁取り文字をやめるには、￥TD.OUTLINE.COLOR(-1) と設定します



●エンジン設定.exe のアイコン変更について

エンジン設定. exeは、もちろんそのままでお使い頂いてもOKですが、
yu-ris.exe同様にYSIconツールでアイコンを任意に変更することができます。



●update1.ypf 〜 update9.ypf

update(数値１桁).ypf というファイル名でパックファイルを作成すると、
そちらを優先してデータを読み込みにいくようになりました。
数値が大きいほうが読み込みの優先順位は上になります。

通常、複数のパックファイルで重複しているファイルが存在していると
起動時にエラーが表示されますが、このパックファイルに限り、ファイルの重複が許可されます。
これを利用して、パッチファイルとして利用できるようになりました。

例えば、
cg/ev/ev001.png
      ev002.png
      ev003.png
      ev004.png
      ev005.png

が格納されたパックファイル cg.ypf があるとします。
マスターアップ後、残念ながら ev002.png に塗りミスが見つかり、
仕方なくパッチで修正したいとします。
いままでですと、５ファイル全て再パックして、新しい cg.ypf を
作成し、それを以前の cg.ypf に上書きしてもらう形で対応するしか
ありませんでした。
それにより、場合によってはパッチのファイルサイズが無駄に膨れあがってしまう
恐れもありました。
今回からは、

cg/ev/ev002.png

だけをパックしたパックファイルを update1.ypf という名前で作成し、
他のパックフォルダと一緒に置いてもらえれば、
update1.ypf 内の ev002.png を優先して読みに行くので、
以前の ev002.png は読みに行かなくなります。

そして、無事パッチをリリースできたとします。
さらに今度は ev004.png に塗りミスが見つかり、
さらにパッチを作成したくなったとします。
その場合は同様に ev004.png だけをパックした update2.ypf を作成し、
他のパックファイルと一緒に置いてもらえばＯＫです。




●ボタン画像読込マクロについて

ボタン定義の画像読込マクロは

\BT.CGSYS( 【off】, 【over】, 【on】, 【onover】, 【na】 )
か
\BT.CGSYS( 【末尾省略ファイル名】 )
か
\BT.CGSYS( 【ボタン連結画像】 )
のどれかを使用します。

【off】 　…ボタンOFF時にマウス乗っていない時の画像
【over】　…ボタンOFF時にマウス乗った時の画像
【on】　　…ボタンONの時にマウス乗っていない時の画像
【onover】…ボタンONの時にマウス乗った時の画像
【na】　　…ボタンが無効状態の時の画像

【末尾省略ファイル名】…btn_save_off, btn_save_over, btn_save_on というファイルが存在していたとして、
                        「btn_save」と指定すると、自動で末尾に _off,_over,_on のついたファイル名を探していき、
                        見つかった場合、それを読み込みます。
                        なかった場合は、普通に btn_save というファイル名を読み込みます。

【ボタン連結画像】…ファイル名末尾が _bt3, _bt4 となっているファイルは、３連結、４連結画像として読み込みます。
                    いずれボタン連結・分割ツールを配布予定です。

となります。



●\TS 命令について

  β３までは \TS(M) や \TS(L) という５段階の文字サイズ指定でしたが、
  β４からは \TS( 文字サイズ ) という数値指定になりました。
  \TS( 文字サイズＸ, 文字サイズＹ ) という縦横違うサイズの指定もできます。
  ただしごめんなさい。既知の不具合で、サイズＹよりサイズＸを大きくすると、
  (つまり横長の文字を指定すると)、正しく表示されなくなってしまいます。

(※11/10/26追記)
  ver0.452/0.03から、サイズＹよりサイズＸを大きくしても
  正しく表示できるようになりました。



●カメラとスプライトとの距離とサイズの関係

  カメラとスプライトとの距離(Z軸)によって、
  スプライトサイズは下のようになります。

  距離000……サイズ400%で表示される
  距離100……サイズ200%で表示される
  距離200……サイズ100%で表示される
  距離300……サイズ 50%で表示される
  距離400……サイズ 25%で表示される
  距離500……サイズ 12.5%で表示される
  距離600……サイズ  6.25%で表示される
  ・
  ・
  ・

  距離0で400%ということは、400%以上の拡大は出来ないの？と思われるかもしれませんが、
  それ以上の拡大は、\SP.BXY 命令を使用して、元画像自体を大きくしてもらうことで、
  無理矢理拡大することが出来ます。



●ムービーや連番アニメの再生回数について (※5/28修正 ×\SP.LP → ○\SP.ANLP )

  ムービーや連番アニメの再生回数が指定できるようになりました。
  \SP.ANLP 命令を使用します。

    \SP.MV(aaa)
    \SP.ANLP(3) //3回再生
    \SP.GO(MV)

    という風に書いていただければ可能です。
    後日マニュアルに追記します。



●文字定義ファイルについて

  β４から新しく追加された定義で、簡単に説明しますと、

  ・「フォントサイズ２４」
  ・「文字色は白」
  ・「影の色は黒」
  ・「袋文字の色は黒」etc...
   という文字装飾を、
  「Ｍ」という名前で登録しておきます。

  で、メイン定義ファイルの中を見ていただくと、
  $T(36,18)="M"
  という記述が見つかると思います。ここで、
  「メインゲーム画面の文字は、あらかじめＭという名前で登録された
    文字装飾を使用しますよ」
  と宣言しているわけです。

  バックログやセーブロード、コンフィグのフォントリスト部分も
  同様の方法で定義されています。



●メイン定義内に テキスト表示範囲を設定する項目がなくなった事について

  →ボタンによる定義になりました。
    メイン設計ファイル内の「メッセージウィンドウ・テキスト部分」の
    ボタン定義がそれでして、完全透明の画像を「TIP.MESW.TX」というボタン名で
    読み込んでもらうと、そのレイヤにテキストが描画されるようになります。
    レイヤサイズもその画像の大きさによる指定となります。
    なので微調整が少し面倒になりましたので、
    ボタン命令に任意の大きさの完全透明画像を生成する機能を付けようと思っています。



●アイコンツール「YSIcon」について

  ・256x256サイズのアイコンまで指定できるようになりましたが、
    あれは WindowsVista や Windows7 用のアイコンになります。
    OSを使っている、または使ったことのある方なら見ているかと思いますが、
    大きく綺麗なアイコンが表示されます。
    ぜひ 256x256 用アイコンを用意して頂くことをおすすめします。
    アイコン作成のおすすめとしては、256x256 用のアイコンをひとつ作成
    していただき、それを縮小することで 48x48、32x32 サイズのアイコンも
    一緒に作っちゃう方法です。16x16 アイコンに関しては、そこまで縮小すると
    あまりに潰れてしまうので、余裕があれば、ドット打ちなどで別途見やすい
    アイコンを作成されることをおすすめします。



●マニュアルに「V座標」「W座標」という表記があったけど、あれはなに？

  →すみません。現時点では仕様として存在しません。
    ただ単に記述を消すのを忘れていました。あとで消しておきます。



●今回でなんでもできるようになった？

  →まだそうではありません。
    まだβ版と位置づけている所以です。
    じゃあ何が出来るようになって何がまだ出来ないのか、と言いますと、
    スクリプトの演出がとにかくいろいろ出来るようになりました、
    というのが今回のβ４です。
    で、いまだ出来ないのが凝ったＵＩ演出です。動的演出だったり、
    新しい画面を作ってそこでいろいろやらせたい、というのは、
    現時点でも難しいと思ってください。
    (ERISを直接改造すればもちろん不可能ではないですが、恐らく挫折します)
    次のＲＣ版で、動的ＵＩ演出機能を実装して、
    安定したらそこで YU-RIS ver1.000完成とする予定です。
    予定では UserScene というフォルダを追加し、
    その中で好きなシーン(画面)を作成していくことが可能になります。



