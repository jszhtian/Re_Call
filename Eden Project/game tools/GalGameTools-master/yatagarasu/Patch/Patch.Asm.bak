.486
.model flat,stdcall
option casemap:none

include windows.inc

include kernel32.inc
include user32.inc

includelib kernel32.lib
includelib user32.lib

include msvcrt.inc
includelib msvcrt.lib
includelib ntdll.lib

.data
szMemcpy db 'memcpy',0
szNtdll db 'ntdll',0
szDrawName db '@[DrawName',0
.data?
memcpy dd ?
text_buf db 0
.code

RecordText:
;edi = strings
pushad
push 10
push offset szDrawName
push edi
call crt_memcmp
add esp,12 
test al,al
je @F
mov text_buf,1
@@:
popad
jmp memcpy

CheckText1: ;check text proc

CheckText2:

DllEntry proc uses esi edi ebx,hInst:HINSTANCE, nReason:DWORD, lpReserved:DWORD
	cmp nReason,DLL_PROCESS_ATTACH
	jne @F
		push 0
		call GetModuleHandleA
		push eax ; [esp]=Module Handle
		xor al,al
		mov text_buf,al
		
		mov edi,00504B2Fh  ;CALL MEMCPY
		lea esi,RecordText
		sub esi,ecx
		sub esi,5
		;[esp] = 0
		;[esp+4] = Module Handle
		push 0		   
		lea eax,[esp]
		push eax
		push PAGE_EXECUTE_READWRITE
		push 5
		push edi
		call VirtualProtect
		add esp,4
		mov [edi+1],esi
		
		
		push offset szNtdll
		call GetModuleHandleA
		push offset szMemcpy
		push eax
		call GetProcAddress
		mov memcpy,eax
		
	@@:
	mov eax, TRUE
	ret
DllEntry Endp
End DllEntry
