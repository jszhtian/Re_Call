#py3.2
import struct
import zlib
import pdb
import bytefile


str_lens=[00, 0x01, 0x02, 0x48, 0x04, 0x05, 0x35, 0x07, 0x08, 0x0B, 0x0A, 0x09, 0x10, 0x13, 0x0E, 0x0F, 0x0C, 0x19, 0x12, 0x0D, 0x14, 0x1B, 0x16, 0x17, 0x18, 0x11, 0x1A, 0x15, 0x1E, 0x1D, 0x1C, 0x1F,
0x23, 0x21, 0x22, 0x20, 0x24, 0x25, 0x29, 0x27, 0x28, 0x26, 0x2A, 0x2B, 0x2F, 0x2D, 0x32, 0x2C, 0x30, 0x31, 0x2E, 0x33, 0x34, 0x06, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x03, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
]
str_lens=[0x03, 0x48, 0x06, 0x35,
0x0C, 0x10, 0x11, 0x19, 0x1C, 0x1E,
0x09, 0x0B, 0x0D, 0x13, 0x15, 0x1B, 0x20, 0x23, 0x26, 0x29, 0x2C, 0x2F, 0x2E, 0x32]

key=[0xd3, 0x6f, 0xac, 0x96]
key=[0xdb, 0xda, 0xfd, 0x6c]
def decodeYbn(ybn):
	if ybn.read(4)!=b'YSTB':
		return ybn[0:]
	ybn.seek(12)
	code_size, arg_size, res_size, offlist_size=\
                   struct.unpack('IIII4x',ybn.read(20))
	decode=[ybn[0:0x20]]
	for size in (code_size,arg_size,res_size,offlist_size):
		#print('%x'%size)
		for n in range(size):
			decode.append(bytes([ybn.readu8()^key[n&3]]))
	return b''.join(decode)

fs=open("ysbin.ypf",'rb')
stm=bytefile.ByteFile(fs.read())
stm.seek(8)
count, index_size=struct.unpack("II",stm.read(8))
stm.seek(0x20)
for n in range(count):
	stm.seek(4,1)
	len2,=struct.unpack('b',stm.read(1))
	name1=stm.read(str_lens[-len2-1])
	name=[]
	for i in range(len(name1)):
		name.append(chr(name1[i]^0xff^0x36))
	name=''.join(name)
	type1, is_compressed, uncomplen, complen, offset, datacrc=\
               struct.unpack('=BBIIII',stm.read(18))
	cur_off=stm.tell()
	stm.seek(offset)
	newfile=open(name,'wb')
	print(name)
	if is_compressed:
		newfile.write(decodeYbn(bytefile.ByteFile(zlib.decompress(stm.read(complen)))))
	else:
		newfile.write(decodeYbn(bytefile.ByteFile(stm.read(uncomplen))))
	newfile.close()
	stm.seek(cur_off)

