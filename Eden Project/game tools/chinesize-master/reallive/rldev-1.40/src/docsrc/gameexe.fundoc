%@ mkfundoc input for GAMEEXE.INI documentation.
%@
%@ Stuff not detailed in the `functions.fundoc' header:
%@   @ivar/varname/ -> index and anchor for #VARNAME
%@   @ivars/base/varname/ -> index and anchor for #BASE.nnn.VARNAME
%@   @ivar1/varname/paramname/ = @ivar/varname/@def/#varname = <paramname>/
%@   @ivar1s/varname/paramname/ = @ivar/varname/@def/#varname = "<paramname>"/
%@   @ivarsd/base/varname/params/ -> @ivars/base/varname/@def/#base.<index>.varname = params/
%@   @iref{varname} -> reference to #VARNAME
%@   @irefs{base}{varname} -> reference to #BASE.nnn.VARNAME
%------------------------------------------------------------------------------%

\lchapter{Gameexe.ini reference}

This incomplete chapter will eventually document the file \gameexe.  At the 
moment it only covers things I've noted down as I work, in no particular order.

Note that \gameexe\ is case-sensitive.


%------------------------------------------------------------------------------%

\lsection{Interpreter configuration}

\subsection{Main window settings}

@ivar1s/CAPTION/title/
@{
  Sets the caption of the window to <title>.
@}

@ivar1/SUBTITLE/flag/
@{
  Set to enable display of game titles defined with @ref{title} calls in the 
  title bar of the game window (after the string defined with @iref{CAPTION}).
@}

@ivar1/SCREENSIZE_MOD/flag/
@{
  Game resolution: 0 is $640\times480$, 1 is $800\times600$.
@}

@ivar1/INIT_SCREENMODE/flag/
@{
  The game defaults to windowed mode if <flag> is 1, full-screen mode
  otherwise.
@}

\subsection{Locations}

@ivar1s/REGNAME/key/
@{
  Game configuration data will be sought in the registry at the location
  \begin{lstlisting}
    HKEY_CURRENT_USER\Software\^<key>^
  \end{lstlisting}
  
  The data stored in the registry are those related to the particular
  installation of the game, such as the path of the installation disc,
  the parts of the data which have been installed, and the location in
  which saved games should be stored.
  
  \opus{xclannad} uses <key> to identify the game for various other
  purposes, such as in the construction of save filenames.
@}

\index[concept]{file types}
@ivar/FOLDNAME/
@def/#FOLDNAME.<ext> = "<folder>" = <archive> : "<arcname>"/
@{
  Configures the interpreter to look for data files with the extension
  <ext> in the named <folder>.  If <archive> is 1, the archive <arcname>
  will also be searched.
  
  Known extensions:
  
  \begin{tabular}{l@@{\hs}l}
  \file{ANM} & \file{PDT} animations                          \\
  \file{ARD} & Area definitions                               \\
  \file{BGM} & Music files (\file{*.nwa}, \file{*.ogg}, etc.) \\
  \file{DAT} & General data files                             \\
  \file{G00} & Graphics                                       \\
  \file{GAN} & \file{G00} animations                          \\
  \file{HIK} &                                                \\
  \file{KOE} & Voice data                                     \\
  \file{M00} &                                                \\
  \file{MOV} & Video files (\file{*.avi}, \file{*.mpg}, etc.) \\
  \file{PDT} & \file{PDT} graphics (used for cursors)         \\
  \file{TXT} & Bytecode                                       \\
  \file{WAV} & Sound effects
  \end{tabular}
  
  As a minimum, all projects appear to contain the line
  \begin{lstlisting}
    #FOLDNAME.TXT = "DAT" = 1 : "SEEN.TXT"
  \end{lstlisting}
@}

@ivar1s/CGTABLE_FILENAME/file/
@{
  Sets the name of the data file used to associate graphics and sections
  of text with special events, so the interpreter can keep track of which
  have been viewed.  This is normally \file{mode.cgm}.
@}

@ivar1s/KOESYNC_FILENAME/file/
@{
  Where <file> is set, it is normally \file{koeanm.dat}.  Its purpose is
  unclear, but from the name one assumes it has something to do with the
  synchronisation of voices and animations.
@}

@ivar1s/TONECURVE_FILENAME/file/
@{
  Where <file> is set, it is normally \file{tcdata.tcc}.  Its purpose is
  unclear.
@}

@ivar1s/BUSTSHOT_FILENAME/file/
@{
  Where <file> is set, it is normally \file{bustshot.bst}.  The mind
  boggles at its possible uses.
@}

@ivar1s/MANUAL_PATH/file/
@{
  Sets the path relative to \gameexe{} of a file, typically the game's manual,
  which is invoked (as though with the @ref{shell} function) when the player
  selects syscom 24 ``Open manual'' from the system command menu.
  
  This variable does not exist in \reallive{} builds prior to 1.2.6.
@}

\subsection{Bytecode entrypoints}

@ivar1/SEEN_START/index/
@{
  Defines the program entrypoint.  Execution will begin at \file{SEEN}<index>
  entrypoint 0 whenever the interpreter is started or reset.
@}

@ivar1/SEEN_MENU/index/
@{
  Defines the menu entrypoint.  Execution will pass to \file{SEEN}<index>
  entrypoint 0 whenever the interpreter is returned to the title menu, either
  by a call to the @ref{ReturnMenu} or @ref{MenuReturn} functions, or by 
  selecting syscom 28 ``Return to menu'' from the built-in system command menu.
@}

\index[concept]{menus!custom}
@ivar/CANCELCALL,CANCELCALL_MOD/
@def/#CANCELCALL = <scenario>, <entrypoint>/
@and/#CANCELCALL_MOD = <flag>/
@{
  It is possible, using these variables, to install a custom menu system in
  place of the built-in system command menu described in \ref{sec:syscom}.
  
  If @iref{CANCELCALL_MOD} is set to zero, the built-in menu is used.  If it
  is non-zero, the @iref{CANCELCALL} settings are used, and <scenario> will
  be called at the given <entrypoint> whenever the player invokes the menu;
  your custom menu routine should call @ref{rtlCancel} to return control to the
  point at which the menu was invoked.
@}

\subsection{Memory settings}

@ivar/A,B,C,D,E,F,G,Z,AB,BB,CB,DB,EB,FB,GB,ZB,A2B,B2B,C2B,D2B,E2B,F2B,G2B,Z2B,A4B,B4B,C4B,D4B,E4B,F4B,G4B,Z4B,A8B,B8B,C8B,D8B,E8B,F8B,G8B,Z8B,S,M/
@def/#<intvar>[<index>] = <value>/
@and/#<strvar>[<index>] = "<value>"/
@{
  Sets the initial value of <intvar>\texttt{[}<index>\texttt{]} or 
  <strvar>\texttt{[}<index>\texttt{]}.  Where the variable space is local, it 
  will be initialised to <value> each time the interpreter is started; where it 
  is global, it will be initialised to <value> the first time the interpreter is 
  started, but thereafter it will retain its value as normal.  (Refer to 
  \ref{sec:memory} for details of local and global memory spaces.)
  
  Valid values of <intvar> are all valid integer addresses in all addressing 
  modes, capitalised and without the \lstinline|int| prefix (e.g.\ \lstinline|#C[100]|,
  \lstinline|#G2B[4000]|).  Valid values of <strvar> are \lstinline|S| and 
  \lstinline|M|.
@}

@ivar/NAME,LOCALNAME/
@def/#NAME.<var> = "<value>"/
@and/#LOCALNAME.<var> = "<value>"/
@{
  Sets the initial value of the name variable <var> to <value>.  @iref{NAME} 
  selects the global name variable space, and @iref{LOCALNAME} the local space. 
  The situations in which these settings are used are identical to those 
  described above for regular variables.  (Refer to \ref{sec:namevars} for 
  details of name variables.)
  
  Valid values of <var> are all alphabetical name variable identifiers: that is,
  \lstinline|A| to \lstinline|Z| and \lstinline|AA| to \lstinline|ZZ|.
@}

@ivar1/NAME_MAXLEN/len/
@{
  Sets the maximum length of a name variable to $len \times 2$ bytes (i.e.\ $len$
  dual-byte characters).  The length is always between 12 and 20 bytes; values of
  $len$ less than 6 or greater than 10 are treated as 6 and 10 respectively.
@}


%------------------------------------------------------------------------------%

\lsection{Text output}

Message window configuraton is quite complicated, and not well understood.  The
incomplete documentation here contains some details; if in doubt, you'd be better
off examining what's done in actual games and copying details from there...

\subsection{General configuration}

@ivar1/WINDOW_MOVE_MODE/mode/
@{  
  If window movement is enabled, % TODO: figure out what controls this!
  controls what is rendered while a window is being dragged:
  
  \begin{tabular}{r@@{\hs}l}
  \textbf{0} & display only a box outline          \\
  \textbf{1} & render border only                  \\
  \textbf{2} & render border and background        \\
  \textbf{3} & render border, background, and text
  \end{tabular}
@}

@ivar/WINDOW_ATTR/
@def/#WINDOW_ATTR = <r>, <g>, <b>, <alpha>, <filter>/
@{
  Defines the default window attributes, as read by @ref{DefWindowAttr}. These 
  set the the RGB components of a window's background colour, the <alpha> value 
  with which it is composited with the image behind, and a value <filter> which 
  determines the composition mode: if it is 0, a subtractive filter is used, 
  while if it is 1, a straightforward alpha filter is used.

  These settings can be overridden for individual windows by using 
  @irefs{WINDOW}{ATTR_MOD} to enable the use of that window's 
  @irefs{WINDOW}{ATTR} instead.  
@}


\subsection{Global font settings}\label{sec:inifontsettings}

@ivar1/INIT_FONT_TYPE/type/
@{
  Selects a basic font style to use by default.  If <type> is 0, the game will 
  use MS Gothic; if it is 1, the game will use MS Mincho.  If the selected font 
  is not available on the player's system (or if the player is using a 
  non-Japanese codepage), they will be forced to select a custom font the first 
  time text is displayed.

  As an \package\ extension, if the \package\ Unicode mode has been enabled by
  loading the rlBabel DLL (see \ref{lib:rlBabel}), you can specify a different
  default font by setting <type> to 2 and using @iref{INIT_FONT_NAME}.  If
  rlBabel is not loaded, this will have no effect.
@}

@ivar1s/INIT_FONT_NAME/font/
@{
  \emph{This is an \package\ extension. It is only available when the rlBabel
  DLL is loaded (see \ref{lib:rlBabel}); otherwise it has no effect.}
  
  If @iref{INIT_FONT_TYPE} is 2, then <font> is used as the default font for
  the game.
@}

@ivar1/INIT_FONT_QUALITY/quality/
@{
  Sets the default font quality to use.  The values of <quality>, and their 
  meanings, are the same as for @ref{SetFontQuality}.
@}

@ivar1/INIT_FONT_WEIGHT/weight/
@{
  Sets the default font weight to use.  The values of <weight>, and their 
  meanings, are the same as for @ref{SetFontWeight}.
@}


\subsection{Defining a window}\label{sec:windowdefinition}

\maketarget{ivar}{WINDOW}
Up to 64 windows may be used.  Each is defined by a \inivar{WINDOW} block in 
\gameexe.  Each line of a \inivar{WINDOW} block is of the form 
\lstinline|#|\inivar{WINDOW}.<index>.<variable>\lstinline| = |\ldots, which 
defines the setting of <variable> for window <index>.  Possible <variable>s are 
described in this section.

\subsubsection{Appearance}

@ivarsd/WINDOW/ATTR_MOD/<mod>/
@avarsd/WINDOW/ATTR/<r>, <g>, <b>, <alpha>, <filter>/
@{
  If <mod> is 0, the window uses the default attributes defined
  by @iref{WINDOW_ATTR}; if <mod> is 1, the local settings defined by
  <r>, <g>, <b>, <alpha>, and <filter> are used instead for this window.
@}

@ivarsd/WINDOW/POS/<origin> : <x>, <y>/
@{
  Determines the initial position of the window.  <x> and <y> are the absolute 
  distance between an edge of the screen, determined by <origin>, and the nearest 
  edge of the window.  Values of <origin> are:
  
  \begin{tabular}{r@@{\hs}l}
     0 & Top and left
  \\ 1 & Top and right
  \\ 2 & Bottom and left
  \\ 3 & Bottom and right
  \end{tabular}
@}

@ivarsd/WINDOW/WAKU_SETNO/<waku>/
@{
  Define the window style.  <waku> is the number of a waku set as defined with
  a @iref{WAKU} block.
@}

@ivarsd/WINDOW/WAKU_MOD/<waku_mod>/
@avarsd/WINDOW/WAKU_NO/<pattern>/
@{
  If <waku_mod> is zero (the default), the window respects the global border
  pattern settings as defined with @ref{SetWakuAll}, and uses the corresponding
  pattern from its associated waku set.  If it is non-zero, then the window
  always uses <pattern>. %TODO: check, can it still be modified with SetWaku()?
@}

@ivarsd/WINDOW/KEYCUR_MOD/<type> : <x>, <y>/
@{
  Determines the position of the keycursor (the animated cursor that appears
  when the game is waiting for a click to move to the next page of text).
  
  If <type> is 0, the cursor appears at the bottom right corner of the text
  area; if it is 1, it appears directly after the final character printed;
  if it is 2, it appears at ($x$, $y$) relative to the top left of the text
  area.  (<x> and <y> are ignored when <type> is 0 or 1.)
@}

\subsubsection{Animations}\label{sec:iniwindowanims}

@ivarsd/WINDOW/OPEN_ANM_MOD/<mod>/
@avarsd/WINDOW/CLOSE_ANM_MOD/<mod>/
@{
  Define the animation type to use for opening or closing the window.
  Possible values of <mod> in each case are:
  
  \begin{tabular}{r@@{\hs}l}
      0 & Instantaneous
  \\  1 & Fade
  \\  2 & Scroll off/on via top of screen
  \\  3 & Scroll off/on via bottom of screen
  \\  4 & Scroll off/on via left of screen
  \\  5 & Scroll off/on via right of screen
  \\  6 & Scroll off/on vertically via nearest edge of screen
  \\  7 & Scroll off/on horizontally via nearest edge of screen
  \\  8 & Scroll off/on via nearest edge of screen (?) %TODO: figure out
  \\  9 & Expand horizontally and vertically
  \\ 10 & Expand horizontally, contract vertically
  \\ 11 & Expand horizontally
  \\ 12 & Contract horizontally, expand vertically
  \\ 13 & Contract horizontally and vertically
  \\ 14 & Contract horizontally
  \\ 15 & Expand vertically
  \\ 16 & Contract vertically
  \end{tabular}
  
  These values can be queried and modified at runtime with functions such
  as @ref{GetOpenAnmMod}.
@}

@ivarsd/WINDOW/OPEN_ANM_TIME/<ms>/
@avarsd/WINDOW/CLOSE_ANM_TIME/<ms>/
@{
  If the open or close animation mode is anything other than 0, the times
  given here determine how long the animations take to run, in milliseconds.
  These values can be queried and modified at runtime with functions such
  as @ref{GetOpenAnmTime}.
@}

\subsubsection{Text settings}

@ivarsd/WINDOW/MOJI_CNT/<horizontally>, <vertically>/
@{
  Sets the size of the text area within the window.  It will be set to hold
  exactly this number of characters at the default font size.
@}

@ivarsd/WINDOW/MOJI_POS/<top>, <bottom>, <left>, <right>/
@{
  Determines the amount of padding to insert at each edge of the text area, in 
  pixels.  The first character on each screen will be printed at (<top>, 
  <left>).  
@}

@ivarsd/WINDOW/MOJI_SIZE/<size>/
@{
  Sets the default size for text in the window, in pixels.  This is the height 
  of a character, and (since text is always fixed-width) the width of a zenkaku 
  character, or twice the width of a hankaku character.
@}

@ivarsd/WINDOW/MOJI_REP/<x>, [y]/
@{
  Adds or removes spacing between characters (<x>) and lines (<y>).  Values
  of 0 leave the spacing as that determined by @irefs{WINDOW}{MOJI_SIZE};
  positive values expand spacing, and negative values condense it.  These
  values are measured in pixels, and they are absolute: they do not scale
  with the text size.
@}

@ivarsd/WINDOW/LUBY_SIZE/<size>/
@{
  Sets the <size>, in pixels, of text displayed with the \ccref{ruby} control
  code.  If <size> is 0, ruby text is disabled for this window.
  
  Space is always left for ruby text, regardless of whether it is present or not:
  thus the height of each line in a window is defined as
  $MOJI\_SIZE + MOJI\_REP_{y} + LUBY\_SIZE$.
@}

@ivarsd/WINDOW/INDENT_USE/<flag>/
@{
  \minver{feature}{1.2}

  This flag affects what happens when reported speech is longer than one line. 
  If <flag> is 1, then all subsequent lines are aligned with the opening 
  quotation mark; if <flag> is 0, then no indentation is performed, and 
  subsequent lines begin at the left margin instead.
@}

@ivarsd/WINDOW/MOJI_SHADOW/<flag>/
@{
  Determines whether text within this window is rendered with a shadow or not.
@}

@ivarsd/WINDOW/KINSOKU_USE/<flag>/
@{
  Determines whether to use Japanese line-breaking rules or not.  If <flag> is
  set, \reallive\ will avoid breaking lines before certain punctuation marks.
@}

@ivarsd/WINDOW/R_COMMAND_MOD/<flag>/
@{
  Determines how the window will react to @ref{pause} calls.  If <flag> is 0, 
  then @ref{pause} behaves identically to @ref{page}, i.e.\ the active text 
  window is cleared when the game continues, and all other open text windows are 
  closed.  If <flag> is 1, @ref{pause} ends a paragraph rather than a page, 
  inserts a line break instead of clearing the window, and leaves other text 
  windows unmodified.
@}

\subsubsection{Select window settings}

The @ref{select_w} function makes use of regular text windows, but its treatment 
of them differs somewhat from that of the usual text display routines.  In 
particular, it resizes the text area dynamically based on the options it 
contains.  This section documents settings that take effect only when a window is 
used with @ref{select_w}.

@ivarsd/WINDOW/SELCOM_USE/<flag>/
@{
  If <flag> is 1, the window can be used by @ref{select_w}.  If it is 0,
  then calls to @ref{select_w} which reference the window will fail and
  return the error value $-2$.
@}

@ivarsd/WINDOW/MOJI_MIN/<width>, <height>/
@{
  Determine the size of the text area.  It will be dynamically sized to fit the
  number of options presented and the width of the widest option, but it will
  never be smaller than the size given here.
@}

@ivarsd/WINDOW/SELCOM_SETPOS/<horizontal>, <vertical>, <x>, <y>/
@{
  The values of <horizontal> and <vertical> control where the window is placed
  when used by a @ref{select_w} call:  
  
  \begin{tabular}{r@@{\hs}l}
     0 & use settings from @irefs{WINDOW}{POS}
  \\ 1 & centered
  \\ 2 & relative to left or top of screen
  \\ 3 & relative to right or bottom of screen
  \end{tabular}
  
  <x> and <y> are used only in the latter two cases, where they specify the
  spacing to use between the window and the relevant edge of the screen.
  
  For example, values $0, 0, n, n$ will cause the window to be located in 
  exactly the same place as it would be used for regular text display, while 
  values $1, 2, n, 100$ will cause it to be centered horizontally and positioned 
  100 pixels from the top of the screen.  ($n$ here stands for any number,
  since these values are not used.)
@}

@ivarsd/WINDOW/SELCOM_MOJIPOS/<flag>/
@{
  If <flag> is zero, items are left aligned; if it is nonzero, items are
  centered.
@}

@ivarsd/WINDOW/SELCOM_CURSORSELECT/<flag>/
@avarsd/WINDOW/SELCOM_CURSORNO/<cursor>/
@avarsd/WINDOW/SELCOM_MOJIDARK/<amount>/
@{
  If <flag> is 0 or $-1$, the selected item is highlighted by inverting its
  foreground and background colours, and <cursor> and <amount> are ignored.
  
  If <flag> is 1, the selected item has the cursor @iref{CURSOR}.<cursor>
  displayed beside it, and \emph{un}selected text is darkened by <amount>.
  <amount> is a value from 0 (no effect) to 255 (unselected text is black);
  a typical value is 64.
@}

@ivarsd/WINDOW/SELCOM_MOUSESET/<flag>/
@{
  If <flag> is non-zero, the mouse cursor will automatically be moved to
  the first option.
@}

\subsubsection{Name window settings}

\maketarget{ivar}{WINDOW.NAME} % fake target for discussing the block
@ivarsd/WINDOW/NAME_MOD/<name_mod>/
@{
  By default, character names (as identified with the \ccref{name} control code or 
  its abbreviation \lstinline|\{}|) are displayed inline in the text window.  This
  is not the only option.  Valid settings of <name_mod> are:
  
  \begin{tabular}{r@@{\hs}l}
     0 & Display names inline (default)
  \\ 1 & Display names in a separate window.
  \\ 2 & Do not display names.
  \\ 3 & Same as 2?
  \end{tabular}
 
  \noindent The other variables in this section are only used when <name_mod> is 
  $1$.  
@}

@ivarsd/WINDOW/NAME_POS/<x>, <y>/
@{
  By default, the name window is positioned above the text window and aligned
  with its left edge.  The values specified here for <x> and <y> can be used to
  adjust this position.
@}

@ivarsd/WINDOW/NAME_MOJI_SIZE/<size>/
@{
  Sets the size of text in the name window, in pixels.
@}

@ivarsd/WINDOW/NAME_MOJI_REP/<x>/
@{
  Adjusts the character spacing in the name window by <x> pixels.
@}

@ivarsd/WINDOW/NAME_MOJI_POS/<x>, <y>/
@{
  Sets the spacing around the name.  This is applied on all sides: for example, 
  if <y> is $50$, then the name will be centered vertically in a text area $100 
  + NAME\_MOJI\_SIZE$ pixels high.
@}

@ivarsd/WINDOW/NAME_MOJI_MIN/<width>/
@{
  The name window will expand and shrink to fit the name provided, but it will
  never be fewer than <width> zenkaku characters wide.
@}

@ivarsd/WINDOW/NAME_WAKU_DIR/<flag>/
@{
  Not fully understood.%TODO: understand!
  It appears that setting <flag> to a non-zero value causes the horizontal component
  of @irefs{WINDOW}{NAME_POS} to be interpreted relative to the left edge of the
  screen, rather than the left edge of the text area of the window.  Further
  investigation is needed.
@}

@ivarsd/WINDOW/NAME_WAKU_SETNO/<waku>/
@{
  Defines the window style to use for the name window.  <waku> is the number of a 
  waku set as defined with a @iref{WAKU} block.  It need not be the same style
  as used by the main window.
@}

@ivarsd/WINDOW/NAME_CENTERING/<flag>/
@{
  If <flag> is zero, the name will be aligned with the left of the name window;
  if <flag> is non-zero, it will be centered horizontally.
@}

\subsubsection{Local functionality toggles}

\maketarget[WINDOW.EXBTN:nnn:USE]{ivar}{WINDOW.EXBTN\_nnn\_USE} % fake target for @irefs{WINDOW}{EXBTN_nnn_USE}
@ivars/WINDOW/EXBTN_000_USE/@ivars/WINDOW/EXBTN_001_USE/@ivars/WINDOW/EXBTN_002_USE/@ivars/WINDOW/EXBTN_003_USE/
@ivars/WINDOW/EXBTN_004_USE/@ivars/WINDOW/EXBTN_005_USE/@ivars/WINDOW/EXBTN_006_USE/@ivars/WINDOW/EXBTN_007_USE/
@def/#WINDOW.<index>.EXBTN_$nnn$_USE = <flag>/
@{
  Enable or disable specific custom window buttons for the window. $nnn$ is a 
  value from 0 to 7.
  
  To use each custom button, in addition to enabling this flag you must also 
  enable @iref{WINDOW_EXBTN_USE}, define @iref{WBCALL}.$nnn$ and create the 
  procedure it calls, and define a @irefs{WAKU}{EXBTN_nnn_BOX} for the button
  in the window style(s) used by the window.  
@}

@ivarsd/WINDOW/MOVE_USE/<flag>/
@{
  If the global @iref{WINDOW_MOVE_USE} flag is set, this flag is used to
  decide on a window-by-window basis which windows it applies to.
@}

@ivarsd/WINDOW/CLEAR_USE/<flag>/
@{
  If the global @iref{WINDOW_CLEAR_USE} flag is set, this flag is used to
  decide on a window-by-window basis which windows it applies to.
@}

@ivarsd/WINDOW/READJUMP_USE/<flag>/
@{
  If the global @iref{WINDOW_READJUMP_USE} flag is set, this flag is used to
  decide on a window-by-window basis which windows it applies to.
@}

@ivarsd/WINDOW/AUTOMODE_USE/<flag>/
@{
  If the global @iref{WINDOW_AUTOMODE_USE} flag is set, this flag is used to
  decide on a window-by-window basis which windows it applies to.
@}

@ivarsd/WINDOW/MSGBK_USE/<flag>/
@{
  If the global @iref{WINDOW_MSGBK_USE} flag is set, this flag is used to
  decide on a window-by-window basis which windows it applies to.
@}

@ivarsd/WINDOW/MSGBKLEFT_USE/<flag>/
@{
  If the global @iref{WINDOW_MSGBKLEFT_USE} flag is set, this flag is used to
  decide on a window-by-window basis which windows it applies to.
@}

@ivarsd/WINDOW/MSGBKRIGHT_USE/<flag>/
@{
  If the global @iref{WINDOW_MSGBKRIGHT_USE} flag is set, this flag is used to
  decide on a window-by-window basis which windows it applies to.
@}

@ivarsd/WINDOW/KOEPLAY_USE/<flag>/
@{
  \minver{variable}{1.3.4}
  
  If the global @iref{WINDOW_KOEPLAY_USE} flag is set, this flag is used to
  decide on a window-by-window basis which windows it applies to.
@}

\subsubsection{Miscellaneous settings}

@ivars/WINDOW/MSGBK_BACKUP/<flag>/
@{
  If <flag> is 1, text displayed in the window will be stored in the message
  backlog; if it is 0, the window's contents will be ignored when reviewing
  previously-read text.
@}

@ivarsd/WINDOW/MESSAGE_MOD/<mod>/
@avarsd/WINDOW/NOVELBACK/<x1>, <y1>, <x2>, <y2>/
@{
  The purpose and use of these variables is not understood.  <mod> is usually
  0, and ($x_1$, $y_1$), ($x_2$, $y_2$) generally describe the visible area
  of the screen.
@}

@ivars/WINDOW/FACE/
@def/#WINDOW.<index>.FACE.<n> = <x>, <y>, <behind>, <?>, <?>/
@{
  Define a face slot for the window. These are settings used when displaying 
  character portraits with the @ref{FaceOpen} function.  Up to eight slots can 
  be defined for each window; one \inivar{FACE} line is used to define each, 
  with the first being \inivar{FACE.000}.

  <x> and <y> are the position at which character portrait <n> will be displayed,
  relative to the top left of the text area as defined by @irefs{WINDOW}{MOJI_POS}.
  <behind> determines whether the portrait will be layered in front of (0) or 
  behind (1) the window background. The meaning of the other two values is 
  unknown. %TODO: investigate.  
@}


%------------------------------------------------------------------------------%

\lsection{Audio}

@ivar/CDTRACK/
@def/#CDTRACK = <from> - <to> - <loop> = "<name>"/
@{
  Defines track <name> to be CD audio.  <from>, <to>, and <loop> define the
  start, end, and position to return to when looping respectively; each is of
  the form <track>:<m>:<s>:<ms>, where <track> is a track on the CD, and
  <m>:<s>.<ms> defines a position in minutes, seconds, and milliseconds.
  
  <name> is an arbitrary string, which is passed to music playback functions
  (described in \ref{sec:musicfunctions}) to operate on this track.
@}

@ivar/DSTRACK/
@def/#DSTRACK = <from> - <to> - <loop> = "<file>" = "<name>"/
@{
  Defines track <name> to be DirectSound audio, usually in the \vas{} \file{nwa}
  format.
  
  The track is taken from <file>; <from>, <to>, and <loop> define positions in 
  that file, as in @iref{CDTRACK}, but in this case each is a single integer. 
  (I'm not sure what the unit is.)
  
  <name> has the same semantics as in @iref{CDTRACK}; it need not be related to
  <file> in any way.  DirectSound music is played using the same functions as
  CD audio.
@}

@ivar/SE/
@def/#SE.<index> = "<file>" = <channel>/
@{
  Associates interface sound <index> with <file>\file{.wav}.  <index> is an
  integer; values of up to 20 are known to be valid.  <channel> is the interface
  sound channel to use for this sound effect, and can be from 0 to 15.  You must
  place sounds that will be played at the same time in different channels, but
  there seems to be no other limitation.
  
  The functions which operate on interface sounds are described in 
  \ref{sec:sefunctions}.
@}


%------------------------------------------------------------------------------%

\lsection{Debugging}\index[concept]{debugging}

@ivar1/MEMORY/flag/
@{
  Set to enter debug mode.  This unlocks all the various debug menus and data 
  readouts, and enables all the debugging functions described in 
  \ref{sec:debugfunctions}.
@}

@ivar1/DEBUG_MESSAGE_LOG/flag/
@{
  If set, all debug messages will be written to a log file.  (They can be viewed 
  regardless by opening the ``debug messages'' window.)
@}

%@ ---------- TO BE DOCUMENTED ------------------------------------------------
%@ (that is, variables already referenced elsewhere in the documentation)

@ivar/CTRL_USE/
@ivar/CURSOR/
@ivar/E_MOJI,E_MOJI_KINSOKU/
@ivar/MOUSE_CURSOR/
@ivar/DEFAULT_SEL_WINDOW/ % default window for select_w
@ivar/SELBTN/
@ivar/SEL,SELR/ % SELR : SEL :: rec* : grp*
@ivar/COLOR_TABLE/
@ivar/SHAKE/
@ivar/SYSCOM/
@ivar/SYSCOM_USE/
\maketarget{ivar}{WAKU} % fake target for discussing the block
\maketarget[WAKU.EXBTN:nnn:BOX]{ivar}{WAKU.EXBTN\_nnn\_BOX}
@ivar/WBCALL/%.<index> = <scenario>, <entrypoint>/
@ivar/WINDOW_MOVE_USE/%<flag>/
@ivar/WINDOW_CLEAR_USE/%<flag>/
@ivar/WINDOW_READJUMP_USE/%<flag>/
@ivar/WINDOW_AUTOMODE_USE/%<flag>/
@ivar/WINDOW_MSGBK_USE/%<flag>/
@ivar/WINDOW_MSGBKLEFT_USE/%<flag>/
@ivar/WINDOW_MSGBKRIGHT_USE/%<flag>/
@ivar/WINDOW_EXBTN_USE/%<flag>/
@ivar/WINDOW_KOEPLAY_USE/%<flag>/ % \minver{variable}{1.3.4}

@ivar/OBJECT/
% OBJECT.obj = Level, SpaceKey, ObjOnOff, TimeMod, DispSort, InitMod, WeatherOnOff
% later vars can be omitted (WeatherOnOff usually is)
% obj 999 sets all objects not mentioned in other #OBJECT directives

@def/Undocumented variables/
@{
  Some variables are not yet documented. If you followed a link here, you
  just found a reference to one in the documentation. Sorry.
@}

@ivar1/SYSCOM_MOD/flag/
@{
  If set, configuration options are placed in a submenu; otherwise the menu is flat.
@}
@ivar1/SYSCOM_MOD2/flag/     
@{
  If set, popup dialogs are used to confirm actions like exiting the game, instead of
  the default submenus.
@}
@ivar1/SAVELOADDLG_USE/flag/
@{
  If set, popup dialogs are used to select saved game slots, rather than the default
  submenus.
@}


\label{sec:inidlls}\index[concept]{DLLs}
@ivar/DLL/
@def/#DLL.<idx> = "<filename>"/
@{
  \minver{variable}{1.2.5}
  
  Loads <filename> into extension DLL slot <idx>.  The \file{.dll} extension can be
  omitted.  See \ref{sec:dlls} for details of the extension DLL system.
@}
