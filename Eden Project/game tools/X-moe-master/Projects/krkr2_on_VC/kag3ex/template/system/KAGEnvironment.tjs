/**
 * 環境オブジェクト
 */
class KAGEnvironment extends KAGEnvImage {

    /// KAG本体の参照
    var kag;
    var xmax;
    var ymax;

    // フェード指定のデフォルト値
    // envinit.tjs で定義するか、システムのデフォルトを使う
    property fadeValue {
        getter() {
            if (envinfo !== void && envinfo.fadeValue !== void) {
                return envinfo.fadeValue;
            } else {
                return 500;
            }
        }
    }
    
    /// 初期化情報
    var envinfo;

    var times;        //< 時間情報
    var stages;       //< 舞台情報
    var events;       //< イベント絵情報
    var positions;    //< 配置情報
    var actions;      //< アクション情報
    var transitions;  //< トランジション情報
    var defaultTime;  //< デフォルトの時間
    var yoffset;      //< キャラクタ配置のyoffset 値
    var defaultXpos;  //< キャラクタ配置の初期X位置
    var defaultYpos;  //< キャラクタ配置の初期Y位置
    var defaultLevel; //< キャラクタレベルのデフォルト値
    var levels;       //< キャラクタレベル別補正情報
    var faceLevelName;//< フェイスウインドウ用の表示名
    var emotions;
    
    /// 初期化時のレイヤカウント
    var initLayerCount;

    /// 現在のレイヤカウント
    var layerCount;
    
    /// キャラクタ名一覧
    var characterNames;
    /// キャラクタ初期化情報一覧
    var characterInits;
    /// キャラクタ情報
    var characters;
    /// レイヤ情報
    var layers;

    /// イベントレイヤ
    var event;

    // BGM 系
    var bgm;

    // SE 系
    var ses;
    
    //　現在時刻
    property currentTime {
        getter() {
            if (times !== void && time !== void) {
                return times[time];
            }
        }
    }

    // メッセージ窓処理対象になるデフォルトのオブジェクト
    // 名前表示のあと設定される
    // 環境系命令の後は解除される
    var currentNameTarget;
    // コマンド実行毎に表情処理を行うモード
    var showFaceMode;
    // 表情のフェード指定
    var faceFadeTime;

    // 表情表示を立ち絵同時可能に
    var bothFace;
    
    // 全カラー制御
    var colorall;

    // 画像補整指定

    property grayscale {
        getter() {
            return _grayscale;
        }
        setter(v) {
            _grayscale = v;
            if (colorall) {
                setColorAll(true);
            }
            redraw = true;
        }
    }

    property rgamma {
        getter() {
            return _rgamma;
        }
        setter(v) {
            _rgamma = v;
            if (colorall) {
                setColorAll(true);
            }
            redraw = true;
        }
    }

    property ggamma {
        getter() {
            return _ggamma;
        }
        setter(v) {
            _ggamma = v;
            if (colorall) {
                setColorAll(true);
            }
            redraw = true;
        }
    }
    
    property bgamma {
        getter() {
            return _bgamma;
        }
        setter(v) {
            _bgamma = v;
            if (colorall) {
                setColorAll(true);
            }
            redraw = true;
        }
    }

    function resetColor(param, elm) {
        _grayscale = void;
        _rgamma = void;
        _ggamma = void;
        _bgamma = void;
        if (colorall) {
            setColorAll(true);
        }
        redraw = true;
    }

    function setColorAll(param) {
        colorall = param;
        // すべて再描画処理
        event.setRedraw();
        foreach(characters, function(name, value, dict) {
            value.setRedraw();
        });
        foreach(layers, function(name, value, dict) {
            value.setRedraw();
        });
        redraw = true;
    }

    
    /**
     * コンストラクタ
     * @param kag KAG本体
     */
    function KAGEnvironment(kag) {

        super.KAGEnvImage(this);

		name = "env";
		
        this.kag = kag;
        xmax = kag.scWidth / 2;
        ymax = kag.scHeight / 2;

        characters = %[];
        characterInits = %[];
        layers = %[];
        event = new KAGEnvBaseLayer(env, "event");

        // BGM オブジェクト
        bgm = new KAGEnvBgm(env);
        // SE 保持用。配列
        ses = [];
        for (var i=0; i<kag.numSEBuffers; i++) {
            ses[i] = new KAGEnvSE(env, i);
        }
        
        // 最初の実行時にその時点で存在しているレイヤの番号までは対象からはずすようにする
        initLayerCount = kag.numCharacterLayers;

        // 初期化情報展開
        envinfo = loadEnvinfo();

        if (envinfo) {
            // デバッグ表示 
            times       = envinfo.times;       showKeys("times", times);
            stages      = envinfo.stages;      showKeys("stages", stages);
            events      = envinfo.events;      showKeys("events", events);
            positions   = envinfo.positions;   showKeys("positions", positions);
            actions     = envinfo.actions;     showKeys("actions", actions);
            emotions    = envinfo.emotions;    showKeys("emotions", emotions);
            transitions = envinfo.transitions; showKeys("transitions", transitions);
            defaultTime = envinfo.defaultTime;      dm("defaultTime:" + defaultTime);
            yoffset     = (int)envinfo.yoffset;     dm("yoffset:" + yoffset);
            defaultXpos = (int)envinfo.defaultXpos;
            defaultYpos = (int)envinfo.defaultYpos;
            defaultLevel = (int)envinfo.defaultLevel;
            levels       = envinfo.levels;
            faceLevelName = envinfo.faceLevelName;
            showFaceMode  = envinfo.showFaceMode;
            faceFadeTime  = envinfo.faceFadeTime;
            bothFace = envinfo.bothFace !== void ? envinfo.bothFace : true;
        
            // キャラクタ情報初期化処理
            if (envinfo.characters !== void) {
                
                //dm("キャラクタ情報初期化");
                
                var chinit = [];
                chinit.assign(envinfo.characters);
                
                //dm("キャラクタ情報個数" + chinit.count);
                
                for (var i=0; i<chinit.count; i+=2) {
                    var name = chinit[i];
                    var init = chinit[i+1];
                    characterInits[name] = init;
                }
                
            }
        } else {
            dm("環境情報がありません");
        }
        
        // KAG に自分をコマンドとして登録
        kag.tagHandlers["env"]        = this.tagfunc;
        kag.tagHandlers["allchar"]    = this.allchar;
        kag.tagHandlers["alllayer"]   = this.alllayer;
        kag.tagHandlers["allse"]      = this.allse;

        kag.tagHandlers["begintrans"] = this.beginTrans;
        kag.tagHandlers["endtrans"]   = this.endTrans;
        kag.tagHandlers["newlay"]     = this.newLayer;
        kag.tagHandlers["newlayer"]   = this.newLayer;
        kag.tagHandlers["dellay"]     = this.delLayer;
        kag.tagHandlers["dellayer"]   = this.delLayer;
        kag.tagHandlers["newchar"]    = this.newCharacter;
        kag.tagHandlers["delchar"]    = this.delCharacter;

        kag.tagHandlers["msgoff"]     = this.msgoff;
        kag.tagHandlers["msgon"]      = this.msgon;
        kag.tagHandlers["clear"]      = this.clear;
        
        kag.tagHandlers["dispname"]        = this.dispname;
        kag.tagHandlers["dispnameVoice"]   = this.dispnameVoice;
        kag.tagHandlers["quake"]           = this.quake;
        kag.tagHandlers["afterpage"]       = this.afterpage;
        kag.tagHandlers["afterline"]       = this.afterline;

        // レイヤトランジション処理中は transMode を有効にしておく
        kag.tagHandlers["ltbegin"] = function(elm) {
            transMode = 2;
            return kag.layerTransBegin(elm);
        } incontextof this;
        kag.tagHandlers["ltend"] = function(elm) {
            transMode = 0;
            return kag.layerTransEnd(elm);
        } incontextof this;
        
        // 特殊ハンドラ登録
        kag.unknownHandler         = this.unknown;
        kag.seStopHandler          = this.onSeStop;
        kag.stopActionHandler      = this.onStopAction;

        kag.updateVoice            = this.updateVoice;
        
        dm("環境初期化完了");
    }

    /**
     * 初期化情報のロード
     */
    function loadEnvinfo() {
        try {
            var yamlFile = 'envinit.yaml';
            if (Storages.isExistentStorage(yamlFile)) {
                return YAML.parse([].load(yamlFile));
            }

            return Scripts.evalStorage("envinit.tjs");
        } catch (e) {
            throw new Exception("初期化情報のパースに失敗しました(詳細はコンソール参照)");
        }
    }

    /**
     * セーブ処理
     */
    function onStore(f) {
        super.onStore(f);
        f.time = time;
        f.stage = stage;

        var chars = %[];
        foreach(characters, function(name, value, dict) {
            var fch = %[];
            value.onStore(fch);
            this[name] = fch;
        } incontextof chars);
        f.characters = chars;
        
        var lays = %[];
        foreach(layers, function(name, value, dict) {
            var fch = %[];
            value.onStore(fch);
            this[name] = fch;
        } incontextof lays);
        f.layers = lays;

        f.event = %[];
        event.onStore(f.event);

        f.ses = [];
        for (var i=0;i<ses.count;i++) {
            f.ses[i] = %[];
            f.ses[i].name  = ses[i].name;
            f.ses[i].id    = ses[i].id;
            f.ses[i].count = ses[i].count;
        }
        
        f.colorall = colorall;
    }

    /**
     * ロード処理
     */
    function onRestore(f) {
		initEnv();
        time = f.time;
        stage = f.stage;
        if (f.characters) {
            foreach(f.characters, function(name, value, dict) {
                var ch = getCharacter(value.name, value.initName, value.layerId);
                if (ch != null) {
                    ch.onRestore(value);
                }
            } incontextof this);
        }
        if (f.layers) {
            foreach(f.layers, function(name, value, dict) {
                var l = getEnvLayer(value.name, true, value.layerId);
                if (l !== void) {
                    l.onRestore(value);
                }
            } incontextof this);
        }
        if (f.event) {
            event.onRestore(f.event);
        }
        super.onRestore(f);

		if (f.ses) {
			seCount = 0;
			for (var i=0;i<ses.count;i++) {
				ses[i].name = f.ses[i].name;
				ses[i].id   = f.ses[i].id;
				ses[i].count = f.ses[i].count;
				if (ses[i].count > seCount) {
					seCount = ses[i].count + 1;
				}
            }
        }
        
        colorall = f.colorall;
        if (colorall) {
            setColorAll(colorall);
        }
		update(kag.fore);
    }
    
    /**
     * ファイナライザ
     */
    function finalize() {
		initEnv();
        dm("環境終了");
        if (kag.unknownHandler === this.unknown) {
            kag.tagHandlers = void;
        }
        if (kag.seStopHandler== this.onSeStop) {
            kag.seStopHandler          = void;
        }
        if (kag.stopActionHandler === this.onStopAction) {
            kag.stopActionHandler = void;
        }
        invalidate characters;
        invalidate layers;
        invalidate event;
        super.finalize();
    }

    // -----------------------------------------

    /// 時間
    var time;
    /// 舞台
    var stage;

    // -----------------------------------------

    /**
     * 環境情報の初期化
     */
    function initEnv() {

        //dm("初期化処理");
        time = void;
        stage = void;
        transMode = void;

        colorall = false;

        initImage();
        event.initImage();

        // キャラクタ情報の破棄
        foreach(characters, function(name,value,dict) {
            invalidate value;
            delete dict[name];
        });
        // 特殊レイヤ情報の破棄
        foreach(layers, function(name,value,dict) {
            invalidate value;
            delete dict[name];
        });
        layerCount = 0;
        kag.allocateCharacterLayers(initLayerCount + layerCount, false);

        // SE 初期化
        for (var i=0;i<ses.count;i++) {
            if (ses[i].name !== void) {
                ses[i].stop();
            }
            ses[i].name  = void;
            ses[i].count = 0;
        }
        seCount = 0;

        // カレントオブジェクト初期化
		currentNameTarget = void;
        redraw = true;
        
        voiceCharacters.clear();
    }

    /**
     * イベント絵の消去
     */
    function hideEvent(param, elm) {
		if (event.isShow()) {
			event.disp = CLEAR;
			redraw = true;
        }
    }

    /**
     * 背景とイベント絵の消去
     */
    function hideBase(param, elm) {
		if (event.isShow()) {
			event.disp = CLEAR;
			redraw = true;
		} else if (isShow()) {
			disp = CLEAR;
        }
    }
    
    /**
     * 全キャラクタ消去
     */
	function hideCharacters(param, elm) {
		// キャラクタレイヤの消去
		foreach(characters, function(name,value,dict,param) {
			if (value.isShow()) {
				value.disp = CLEAR;
				redraw = true;
            }
        } incontextof this, param);
    }

    /**
     * 全レイヤ消去
     */
    function hideLayers(param, elm) {
        // 特殊レイヤの消去
        foreach(layers, function(name,value,dict, param) {
			if (value.isShow()) {
				value.disp = CLEAR;
				redraw = true;
            }
        } incontextof this, param);
    }

    /**
     * 前景要素消去
     */
    function hideFore(param, elm) {
        hideCharacters(param, elm);
        hideLayers(param, elm);
    }

    /**
     * 全要素消去
     */
    function hideAll(param, elm) {
        hideBase(param, elm);
        hideCharacters(param, elm);
        hideLayers(param, elm);
    }

    /**
     * 舞台を設定する
     * @param stageName 舞台名
     * @param elm コマンドのほかの要素
     */
    function setStage(stageName, elm) {

		if (stageName != stage || isClear() || event.isShow()) {

			stage = stageName;

			disp = SHOW;
			redraw = true;
			reposition = true;
            
            // 背景指定時に座標指定がなければ場所情報を初期化する
            if (elm.xpos === void) {
                xpos = void;
            }
            if (elm.ypos === void) {
                ypos = void;
            }

            // ステージ変更時フック
            if (typeof global.setStageHook != "undefined") {
                global.setStageHook(stageName, elm);
            }

			// トランジション指定
			setAutoTrans([stages[stage].trans, env.envinfo.stageTrans, env.envinfo.envTrans]);
        }
		// イベント絵は消去
		if (event.isShow()) {
			event.disp = CLEAR;
		}
	}

    /**
     * 時間を設定する
     * @param timeName 時間名
     * @param elm コマンドのほかの要素
     */
    function setTime(timeName, elm) {

		if (timeName != time || isClear() || event.isShow()) {
			
			time = timeName;

			disp = SHOW;
			redraw = true;
			reposition = true;
			
            // 時間変更時フック
            if (typeof global.setTimeHook != "undefined") {
                global.setTimeHook(timeName, elm);
            }

            // 時間変更はキャラの立ち絵も再描画の必要がある
            foreach(characters, function(name, value, dict) {
                value.setRedraw();
            });

            // トランジション指定
			setAutoTrans([times[time].trans, env.envinfo.timeTrans, env.envinfo.stageTrans, env.envinfo.envTrans]);
        }
        // イベント絵は消去
		if (event.isShow()) {
			event.disp = CLEAR;
        }
    }

    // トランジションモード
    var transMode;

    /**
     * 全体トランジション開始
     */
    function beginTrans(elm) {
        kag.fore.base.stopTransition();
        kag.backupLayer(EMPTY, true);
        transMode = true;
        return 0;
    }

    /**
     * トランジション指定をコマンドから探す処理
     */
    function checkTrans(cmd, param, elm) {
		if (cmd == "tagname") {
            // ignore
        } else if (cmd == "trans") {
			setTrans(param, elm);
        } else if (cmd == "fade") {
			var time = +param;
			trans = %[ "method" => "crossfade",
					   "children" => true,
					   "time" => time > 1 ? time : fadeValue];
		} else {
			setTrans(cmd, elm);
        }
    }

    /**
     * 全体トランジション終了
     */
    function endTrans(elm) {
		// まず解除（トランジション処理中で true だと処理が登録されないので)
		transMode = false;
		ret = void;
		trans = void;
		foreach(elm, checkTrans);
		beginTransition(trans);
		hideMessage(trans);
        return ret;
    }

    /**
     * 新規レイヤ生成
     */
    function newLayer(elm) {
        // 既存データは廃棄
        delLayer(elm);
        // 新規生成
        var lay = getEnvLayer(elm.name, true);
        if (lay != null) {
            delete elm.tagname;
            delete elm.name;
            return lay.tagfunc(elm);
        }
        return 0;
    }

    /**
     * 新規レイヤ生成
     */
    function delLayer(elm) {
        if (layers[elm.name] !== void) {
            invalidate layers[elm.name];
            delete layers[elm.name];
        }
        return 0;
    }
    
    /**
     * 新規キャラクタ生成
     */
    function newCharacter(elm) {
        // 既存データは廃棄
        delCharacter(elm);
        // 新規生成
        var ch = getCharacter(elm.name, elm.initname);
        if (ch != null) {
            delete elm.tagname;
            delete elm.name;
            delete elm.initname;
            return ch.tagfunc(elm);
        }
        return 0;
    }        

	/**
     * キャラクタ操作
     */
    function delCharacter(elm) {
        if (characters[elm.name] !== void) {
            invalidate characters[elm.name];
            delete characters[elm.name];
        }
        return 0;
    }

    
    /**
     * メッセージ窓のトランジション処理をくみこんだ ON/OFF
     */
    function msgonoff(elm, v) {
        ret = void;
		trans = void;
        if (!transMode && !isSkip() && elm.nofade === void) {
            foreach(elm, checkTrans);
            if (trans !== void && trans.method !== void && !isSkip()) {
				kag.updateBeforeCh = 1;
				kag.fore.base.stopTransition();
                kag.backupLayer(EMPTY, true);
				kag.setCurrentMessageLayerVisibleFast(1, v);
				beginTransition(trans);
				return ret;
			} else {
				return kag.setCurrentMessageLayerVisible(v) ? -2 : 0;
			}
		}
		kag.setCurrentMessageLayerVisibleFast(transMode ? 1: 0, v);
		return ret;
    }

    function msgon(elm) { return msgonoff(elm, true); }
    function msgoff(elm) { return msgonoff(elm, false); }

    /**
     * 画面の表示要素の全消去
     */
    function clear(elm) {
        ret = void;
		trans = void;
        hideAll();
        if (!transMode && !isSkip()) {
            foreach(elm, checkTrans);
            if (trans !== void && trans.method !== void && !isSkip()) {
				kag.updateBeforeCh = 1;
				kag.fore.base.stopTransition();
				kag.backupLayer(EMPTY, true);
                kag.setCurrentMessageLayerVisibleFast(1, false);
				update(kag.back);
                beginTransition(trans);
				return ret;
            }
        }
        kag.setCurrentMessageLayerVisibleFast(transMode ? 1: 0, false);
		update(kag.fore);
        return ret;
    }

    var envCommands = %[
    /**
     * 全体の初期化処理
     */
    init : this.initEnv incontextof this,
    stage : this.setStage incontextof this,
    stime : this.setTime incontextof this,
    hidebase : this.hideBase incontextof this,
    hideevent : this.hideEvent incontextof this,
    hidecharacters : this.hideCharacters incontextof this,
    hidelayers : this.hideLayers incontextof this,
    hidefore : this.hideFore incontextof this,
    hideall : this.hideAll incontextof this,
    stopallvoice : this.stopAllVoice incontextof this,
    colorall : this.setColorAll incontextof this,
        ];
    
    /**
     * コマンドの実行
     * @param cmd コマンド
     * @param param パラメータ
     * @param elm 他のコマンドも含む全パラメータ
     * @return 実行が行われた場合 true
     */
    function doCommand(cmd, param, elm) {

        //dm("環境コマンド実行:" + cmd);
        
        if (super.doCommand(cmd, param, elm)) {
            return true;
        }
        
        var func;
        if ((func = envCommands[cmd]) !== void) {
            //dm("登録コマンドが存在:" + cmd);
            if (func != null) {
                func(param, elm);
            }                
            return true;
        }

        var find = false;

        // 時間と舞台
        var info;
        if (times !== void && (info = times[cmd]) !== void) {
            setTime(cmd, elm);
            find = true;
        } else if (stages !== void && (info = stages[cmd]) !== void) {
            setStage(cmd, elm);
            find = true;
        }

        // アクション
        if (!find) {
            find = setAction(cmd, elm);
        }

        // 更新
        if (!find) {
			find = setTrans(cmd, elm);
        }

        return find;
    }

    /**
     * 舞台画像の描画
     * @param layer 描画先レイヤ
     */
	function drawLayer(layer) {
		var image;
		if (isShowBU() && stage !== void) {
            image = stages[stage].image;
            // 時間情報で上書き
            time = defaultTime if time === void;
            if (time !== void) {
                image = image.replace(/TIME/, times[time].prefix);

                // 画像のロードと座標補正処理
                try {
                    layer.loadImages(%[ "storage" => image ]);
                    
                    if (reposition) {
                        if (xpos === void) {
                            xpos = (int)stages[stage].xoff;
                        }
                        if (ypos === void) {
                            ypos = (int)stages[stage].yoff;
                        }
                    }

                } catch(e) {
                    // 画像がロードできなかった場合は補正で対応
                    image = stages[stage].image;
                    image = image.replace(/TIME/, times[defaultTime].prefix);

                    try {
                        layer.loadImages(%[ "storage" => image ]);
                        
                        // 色補正処理
                        var timeInfo;
                        if ((timeInfo = currentTime) !== void) {
                            // レイヤ合成
                            if (timeInfo.lightColor !== void) {
                                layer.holdAlpha = true;
                                layer.fillOperateRect(0,0,
                                                      layer.width,layer.height,
                                                      timeInfo.lightColor,
                                                      timeInfo.lightType);
                            }
                            // 明度補正
                            if (timeInfo.brightness !== void) {
                                layer.light(timeInfo.brightness,
                                            timeInfo.contrast);
                            }
                        }

                        if (reposition) {
                            if (xpos === void) {
                                xpos = (int)stages[stage].xoff;
                            }
                            if (ypos === void) {
                                ypos = (int)stages[stage].yoff;
                            }
                        }
                        
                    } catch (e) {
                        kag.errorImage(image + ":背景画像がロードできません stage:" + stage + " time:" + time);
                    }
                }
			}
		}
	}

    /**
     * レイヤを作成する
     * @param base
     */
    function getLayer(base) {
        if (base === void) {
            base = env.transMode == 1 ? kag.back : kag.fore;
        }
        return base.stage;
    }

    /**
     * レイヤ配置処理(背景用)：中央原点
     * @param layer 処理対象レイヤ
     */
    function calcPosition(layer) {
		//dm("位置指定2");
		var l = env.xmax + (int)xpos - layer.imageWidth / 2;
		var t = env.ymax + (int)ypos - layer.imageHeight / 2;
		if (moveTime !== void && moveTime > 0) {
			if (xposFrom !== void || yposFrom !== void) {
				var fl = xposFrom !== void ? env.xmax + (int)xposFrom - layer.imageWidth / 2 : l;
				var ft = yposFrom !== void ? env.ymax + (int)yposFrom - layer.imageHeight / 2 : t;
				layer.setPos(fl, ft);
			}
			layer.setMove(l, t, moveTime, moveAccel);
		} else {
			layer.setMove(l, t);
		}
		xposFrom = void;
		yposFrom = void;
		moveTime = void;
    }

	function update(base) {

		//dm("環境更新処理:" + trans);
		
		// 子要素の再描画
		foreach(characters, function(name, value, dict, base) {
			value.update(base);
        }, base);
        foreach(layers, function(name, value, dict, base) {
            value.update(base);
        }, base);
		event.update(base);

		// メッセージ窓初期化
		if (currentNameTarget == void) {
			drawNamePage(base);
			if (faceLevelName !== void) {
				clearFacePage(base);
			}
        }

		// 自分の更新
		return super.update(base);
    }

    /**
     * 全キャラにコマンド実行
     * @param elm 引数
     */
    function allchar(elm) {
        ret = void;
        var names = [];
        names.assign(characters);
        for (var i=0; i<names.count; i+= 2) {
            ret = names[i+1].tagfunc(elm);
        }
        return ret;
    }

    /**
     * 全レイヤにコマンド実行
     * @param elm 引数
     */
    function alllayer(elm) {
        ret = void;
        var names = [];
        names.assign(layers);
        for (var i=0; i<names.count; i+= 2) {
            ret = names[i+1].tagfunc(elm);
        }
        return ret;
    }

    /**
     * 全SEにコマンド実行
     * @param elm 引数
     */
    function allse(elm) {
        ret = void;
        for (var i=0;i<ses.count;i++) {
            if (ses[i].name !== void) {
                ret = ses[i].tagfunc(elm);
            }
        }
        return ret;
    }

    /**
     * 新規にレイヤID を取得する
     * @param layerId 指定されたレイヤID
     */
    function getLayerId(layerId) {
        if (layerId !== void) {
            if (layerId >= layerCount) {
                layerCount = layerId + 1;
            }
        } else {
            layerId = layerCount++;
        }
        kag.allocateCharacterLayers(env.initLayerCount + layerCount, false);
        return layerId;
    }
    
    /**
     * 指定された名前のキャラクタを返す
     * @param name 名前
     * @param initName 初期化名
     * @param layerId レイヤID
     */
    function getCharacter(name, initName, layerId) {
        var ch = characters[name];
        if (ch === void) {
            if (initName === void) {
                initName = name;
            }
            var init;
            if ((init = characterInits[initName]) !== void) {
                layerId = getLayerId(layerId);
                ch = new KAGEnvCharacter(this, layerId, name, initName, init);
                characters[name] = ch;
            }
        }
        return ch;
    }

    /**
     * 指定された名前のレイヤを返す
     * @param name 名前
     * @param create 生成モード
     */
    function getEnvLayer(name, create=false, layerId) {
        var lay = layers[name];
        if (lay === void && create) {
            layerId = getLayerId(layerId);
            lay = new KAGEnvSimpleLayer(this, layerId, name);
            layers[name] = lay;
        }
        return lay;
    }

    /**
     * 全キャラのボイスを停止する
     */
    function stopAllVoice() {
        foreach(characters, function(name, value, dict) {
            value.stopVoice();
        });
    }

    /**
     * 全キャラのボイスを停止する
     */
    function resetAllVoiceVolume() {
        foreach(characters, function(name, value, dict) {
            value.resetVoiceVolume();
        });
    }
    
    /*
     * 指定したキャラで指定したボイスファイルを再生
     */
    function playVoice(name, voicename) {
        var ch = getCharacter(name);
        if (ch !== void && voicename !== void) {
            return ch.playVoice(voicename);
        }
    }

    function quake(elm) {
        // 揺れをのっとる
        if (!isSkip()) {
            kag.doQuake(elm);
        }
        return 0;
    }
    
    function getMessageLayer(base) {
        if (base === void) {
            base = transMode ? kag.back : kag.fore;
        }
        return base.messages[kag.currentNum];
    }

    function getFaceLayer(base) {
        return getMessageLayer(base).faceLayer;
    }
    
    /**
     * 表情表示処理下請け
     */
    function loadFacePage(base, name) {
        var faceLayer = getFaceLayer(base);
        if (faceLayer !== void) {
            try {
                faceLayer.loadImages(name);
            } catch (e) {
                kag.errorImage(name + ":表情画像がロードできません");
            }
            faceLayer.visible = true;
        }
    }

    /**
     * 表情消去処理下請け
     */
    function clearFacePage(base) {
        if (envinfo.clearFace !== void) {
            loadFacePage(base, envinfo.clearFace);
        } else {
            var faceLayer = getFaceLayer(base);
			if (faceLayer !== void) {
	            faceLayer.visible = false;
			}
        }
    }
    
    /**
     * 表情消去処理
     */
    function clearFace() {
        if (!transMode) {
            clearFacePage(kag.fore);
        }
        clearFacePage(kag.back);
    }

    // 指定されたキャラクタの表情が表示可能なら表示する
    function drawFacePage(base, ch) {
        if (faceLevelName !== void) {
            if (ch !== void) {
                var layer = getFaceLayer(base);
				if (layer !== void) {
	                if (ch.isShowFace()) {
    	                ch.drawFace(layer, faceLevelName);
        	        } else {
            	        layer.visible = false;
                	}
				}
            } else {
                clearFacePage(base);
            }
        }
    }

    /**
     * 名前の表示（ページ指定あり)
     */
    function drawNamePage(base, name="") {
        var msg = getMessageLayer(base);
        msg.processName(name);
    }

    /**
     * 名前の表示
     */
    function drawName(name = "", nextVoice= "") {

        // ボイス状態の更新
        kag.currentVoiceScript = nextVoice;

        //dm("名前描画:" + name);
        if (!transMode) {
            drawNamePage(kag.fore, name);
        }
        drawNamePage(kag.back, name);

        // ヒストリ用
        if (kag.historyWriteEnabled) {
            if (typeof kag.historyLayer.storeName !== 'undefined') {
                kag.historyLayer.storeName(name);
            } else {
                if (name != "") {
                    kag.historyLayer.store(name + " ");
                }
            }
        }
    }

    var voiceCharacters = [];

    function getVoicePlayingScript(ch) {
        var voice;
        if (ch !== void && (voice = ch.getCurrentVoice(true)) !== void) {
            return "global.world_object.env.playVoice(\"" + ch.name + "\",\"" + voice + "\");";
        } else {
            return "";
        }
    }
    
    /**
     * 次回同時に鳴らすボイスの追加
     */
    function entryNextVoice(ch) {
        voiceCharacters.add(ch);
    }
    
    function getNextVoiceScript() {
        var ret = "";
        for (var i=voiceCharacters.count-1;i>=0;i--) {
            ret += getVoicePlayingScript(voiceCharacters[i]);
        }
        return ret;
    }

    /**
     * ならすボイスがあるか
     */
    function checkNextVoice() {
        for (var i=voiceCharacters.count-1;i>=0;i--) {
            var voice = voiceCharacters[i].getCurrentVoice();
            if (voice !== void) {
                return true;
            }
        }
        return false;
    }

    /**
     * 複数ボイスを鳴らす
     */
    function playNextVoice() {
        var ret = void;
        for (var i=voiceCharacters.count-1;i>=0;i--) {
            var ch = voiceCharacters[i]; 
            var voice = ch.getCurrentVoice();
            if (voice !== void) {
                var r = ch.playVoice();
                if (ret === void || (r !== void && r > ret)) {
                    ret = r;
                }
            }
        }
        voiceCharacters.clear();
        return ret;
    }
    
    /**
     * 名前表示処理ハンドラ
     */
    function dispname(elm) {

		// 表示処理
		if (kag.setCurrentMessageLayerVisible(true)) {
			return -3;
		}
		
        ret = void;
        
        if (kag.voicecut && !kag.voicecutpage) {
            stopAllVoice();
        }

        // 表情表示部
        
        //dm("名前表示ハンドラ");
        if (elm === void || elm.name === void || elm.name == "") {
            
            // キャラ指定が無い場合
            drawName();
            
            // 表情処理
            if (faceLevelName !== void && currentNameTarget !== void && currentNameTarget.isShowFace() && !transMode && !isSkip() && faceFadeTime > 0) {
                // フェースをフェードで消去する場合
                kag.backupLayer(EMPTY, true);
                clearFacePage(kag.back);
                beginTransition(%[ method: "crossfade", time: faceFadeTime]);
                
            } else {
                if (faceLevelName !== void) {
                    clearFace();
                }
            }

			currentNameTarget = void;
            dispnameVoice(elm);
            
        } else {

            var name = elm.name;
			var disp = elm.disp;
            var voice = elm.voice;

			var ch = getCharacter(name);

			// ボイス登録指定
			if (ch !== void && voice !== void) {
				ch.setVoice(voice);
            }
			
            // 名前表示処理
            var dispName;
			if (disp !== void && disp != "") {
                dispName = disp;
            } else {
                if (ch !== void && ch.init.nameAlias !== void) {
                    dispName = Scripts.eval(ch.init.nameAlias);
                    if (dispName === void) {
                        dispName = name;
                    }
                } else {
                    dispName = name;
                }
            }
            elm.dispName = dispName;
            
            // 表情変更処理
            if (faceLevelName !== void && currentNameTarget != ch &&
                ((currentNameTarget !== void && currentNameTarget.isShowFace()) || (ch !== void && ch.isShowFace())) &&
                !transMode && !isSkip() && faceFadeTime > 0) {
                
                // フェードで表示する場合

                // XXX 名前消去
                drawName();
                
                currentNameTarget = ch;
                
                kag.backupLayer(EMPTY, true);
                if (ch !== void && ch.isShowFace()) {
                    drawFacePage(kag.back, ch);
                } else {
                    var img;
                    if (envinfo.nameFaces !== void && (img = envinfo.nameFaces[envinfo.dispNameFace ? dispName : name]) !== void) {
                        loadFacePage(kag.back, img);
                    } else {
                        clearFacePage(kag.back);
                    }
                }

                // ボイス再生処理の先送り
                kag.insertTag("dispNameVoice", elm);

                // 表情変更用トランジション導入
                beginTransition(%[ method: "crossfade", time: faceFadeTime]);

            } else {

                // 瞬間表示する場合
                // たぶんここのロジック必要ない？
                
                currentNameTarget = ch;
                
                if (ch !== void && ch.isShowFace()) {
                    if (!transMode) {
                        drawFacePage(kag.fore, ch);
                    }
                    drawFacePage(kag.back, ch);
                } else {
                    var img;
                    if (envinfo.nameFaces !== void && (img = envinfo.nameFaces[envinfo.dispNameFace ? dispName : name]) !== void) {
                        if (!transMode) {
                            loadFacePage(kag.fore, img);
                        }
                        loadFacePage(kag.back, img);
                    } else {
                        clearFace();
                    }
                }
				dispnameVoice(elm);
            }
        }
        return ret;
    }

    /**
     * 名前表示＋ボイス再生部分
     * ボイスの状態に応じた待ち時間補正も行う
     */
    function dispnameVoice(elm) {

        // -------  名前表示（瞬間）

        if (elm === void || elm.name === void || elm.name == "") {

            // すでに名前表示済み
            
        } else {
            var name     = elm.name;
            var dispName = elm.dispName;
            if (dispName === void) {
                dispName = name;
            }

            var ch = getCharacter(name);

            // ボイスの登録
            var nextVoice;
            if (kag.historyWriteEnabled && (nextVoice = getNextVoiceScript() + getVoicePlayingScript(ch)) != "") {
                nextVoice = "global.world_object.env.stopAllVoice();" + nextVoice;
                kag.historyLayer.setNewAction(nextVoice);
            }

            // 名前加工処理
            if (typeof global.dispNameFilter !== 'undefined') {
                dispName = global.dispNameFilter(dispName);
            }
            drawName(dispName, nextVoice);
        }

        // -------  ボイス再生
        
        // ボイス再生
        var ret;
        if (currentNameTarget !== void) {
            // ボイス再生がある場合
            if (currentNameTarget.getCurrentVoice() !== void || checkNextVoice()) {
                // ほかのボイスを消去する
                env.stopAllVoice();
                // 同時再生ボイスの再生
                ret = currentNameTarget.playVoice();
                var r = playNextVoice();
                if (ret === void || (r !== void && r > ret)) {
                    ret = r;
                }
            }
        } else {
            // ボイス再生がある場合
            if (checkNextVoice()) {
                // ほかのボイスを消去する
                env.stopAllVoice();
                // 同時再生ボイスの再生
                ret = playNextVoice();
            }
        }
        kag.addAutoWait(ret);
        return 0;
    }

    /**
     * 行待ち終了後に呼び出される処理
     */
    function afterline(elm) {
		if (kag.historyWriteEnabled) {
			kag.historyLayer.clearAction();
        }
		return 0;
    }

    /**
     * ページ処理後に呼び出される処理
     */
    function afterpage(elm) {
		if (kag.voicecut && kag.voicecutpage) {
			stopAllVoice();
		}
		if (kag.historyWriteEnabled) {
			kag.historyLayer.clearAction();
			kag.historyLayer.reline();
        }
		currentNameTarget = void;
        return 0;
    }
    
    var seCount = 0;
    /**
     * SE 処理用オブジェクトの取得
     * @param id SE番号指定
     * 一番古いSEがわかるようにカウント処理をしている
     */
    function getSe(id) {
        ses[id].count = seCount++;
        return ses[id];
    }

    /**
     * SE 停止時の処理
     * 停止中状態にする
     */
    function onSeStop(id) {
        if (id < ses.count) {
            ses[id].name = void;
        }
    }

    /**
     * SE の ID を決定する
     * @param buf バッファIDを指定
     */
    function getSeId(buf) {
		// 直接バッファが指定されている場合はそれを返す
        if (buf !== void && +buf < ses.count) {
            return +buf;
        }
        // 使われてないものをさがす
        var max = seCount;
        var old = void;
        for (var i=0; i<ses.count; i++) {
            if (ses[i].name == void) {
				return i;
            }
			if (ses[i].count < max) {
				max = ses[i].count;
                old = i;
            }
        }
        // 一番古いものを返す
		return old;
    }

    /**
     * SE の ID を決定する
     * @param name SE の名前
     */
    function getSeIdFromName(name) {
        for (var i=0; i<ses.count; i++) {
            if (ses[i].name == name) {
                return i;
            }
        }
        // みつからないのであいている番号を返す
        return getSeId();
    }
    
    /**
     * KAG 不明処理ハンドラ
     */
    function unknown(tagName, elm) {

		//dm("不明コマンドハンドラ:" + tagName);

		// 自分
		if (tagName == "stage") {
			return tagfunc(elm);
		}
		
		// イベント用処理
		if (tagName == "event" || tagName == "ev") {
			return event.tagfunc(elm);
		} else if (tagName.substring(0,2) == "ev" ||
				   (events !== void && events[tagName] !== void)) {
			elm[tagName] = true;
			return event.tagfunc(elm);
        }

        // BGM 処理用
        if (tagName == "bgm") {
            return bgm.tagfunc(elm);
        } else if (tagName.substring(0,3) == "bgm") {
            return bgm.tagfunc(elm);
        }

        // SE 処理用
        if (tagName == "se") {
			if (elm.name !== void) {
				return getSe(getSeIdFromName(elm.name)).tagfunc(elm);
            } else {
				return getSe(getSeId(elm.buf)).tagfunc(elm);
            }
        } else if (tagName.substring(0,2) == "se") {
            var se = getSe(getSeIdFromName(tagName));
            return se.tagfunc(elm);
        }
        
        // キャラクタ
        if (tagName == "char") {
            var ch = getCharacter(elm.name);
            if (ch !== void) {
                return ch.tagfunc(elm);
            }
		} else {
			var ch = getCharacter(tagName);
			if (ch !== void) {
				return ch.tagfunc(elm);
			}
		}

        if (tagName == "layer") {
            var lay = getEnvLayer(elm.name);
            if (lay !== void) {
                return lay.tagfunc(elm);
            }
		} else { 
			var lay = getEnvLayer(tagName);
			if (lay !== void) {
				return lay.tagfunc(elm);
			}
		}

		// カレントのコマンドとして実行する
        if (currentNameTarget !== void) {
			elm[tagName] = true;
            return currentNameTarget.tagfunc(elm);
		}

		// 環境のコマンドとして実行
		elm.tagname = "env";
		elm[tagName] = true;
		return tagfunc(elm);
    }

    /**
     * アクション停止
     */
    function onStopAction() {
        stopAction();
        event.stopAction();
        foreach(characters, function(name, value, dict) {
            value.stopAction();
        });
        foreach(layers, function(name, value, dict) {
            value.stopAction();
		});
		dm("アクション停止");
		update(kag.fore);
    }

    /**
     * ボイス更新
     */
    function updateVoice() {
        foreach(characters, function(name, value, dict) {
            value.updateVoice();
        });
    }
    
};

KAGEnvironment.XPOSITION    = 1;
KAGEnvironment.LEVEL        = 2;
KAGEnvironment.DISPPOSITION = 3;
KAGEnvironment.YPOSITION    = 4;

KAGEnvImage.BOTH      = 1;
KAGEnvImage.BU        = 2;
KAGEnvImage.FACE      = 3;
KAGEnvImage.SHOW      = 4;
KAGEnvImage.CLEAR     = 5;
KAGEnvImage.INVISIBLE = 6;
