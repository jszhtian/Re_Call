//
// UI ロード処理用専用クラス
//

// csv パーサプラグインの読み込み
if (global.CSVParser === void) {
    Plugins.link("csvParser.dll");
}

var buttonStateNames = %[ normal:true, over:true, on:true, off:true ];

/**
 * UI定義ファイル読み出し用パーサ
 */
class UIListParser extends CSVParser {

    // パース結果格納用
    var result;
    var names;
    var check;

    /**
     * 行毎に呼び出される
     * @param columns カラムデータ(Array)
     * @param lineNo 論理行番号(1〜)
     */
    function doLine(_columns, lineNo) {
        if (_columns[0].charAt(0) != '#') {
			var columns = [];
			for (var i = 0; i < _columns.count; i++) columns[i] = _columns[i].trim();

            var type = columns[0];
            var name = columns[1];
            var info = result[name];
            if (info === void) {
                info = %[];
                info.name = name;
				info.uiname = name;
                info.uistates = %[];
                names.add(name);
                result[name] = info;
            }
			var knownType = true;
			switch (type) {
			case "type": doType(info, columns); break;
			case "file": doFile(info, columns); break;
			case "func": doFunc(info, columns); break;
			case "part": doPart(info, columns); break;
			default: knownType = false; break;
			}
			check = true if (knownType);
        }
    }

	// 種類指定
	function doType(info, columns) {
		info.class  = columns[2];
		info.x      = +columns[3];
		info.y      = +columns[4];
		info.width  = +columns[5];
		info.height = +columns[6];
	}

	// ファイル指定
	function doFile(info, columns) {
		switch (info.class) {
		case "copy":
			info.copy   = columns[7];
			info.subref = columns[8];
			break;
		case "base":
			info.storage =columns[2];
			break;
		case "layer":
			info.storage =columns[2];
			/* not break */
		default:
			var stateName = columns[7];
			for (var i=8;i<columns.count;i++) {
				var state = columns[i];
				if (buttonStateNames[state] !== void) {
					stateName += "_";
					stateName += state;
				} else {
					if (info.class == "radio") {
						if (state != "") {
							info.groupName = state;
						}
					}
				}
			}
			if (stateName != "") {
				var state = info.uistates[stateName];
				if (state === void) {
					state = %[];
					info.uistates[stateName] = state;
				}
				state.storage = columns[2];
				state.ox = +columns[3];
				state.oy = +columns[4];
				state.w  = +columns[5];
				state.h  = +columns[6];
			}
			break;
		}
	}

	// func (elm) 指定
	function doFunc(info, columns) {
		for (var i=2; i<columns.count; i+=2) {
			var tag = columns[i];
			var val = columns[i+1];
			val = true if (val === void);
			if (tag !==void && tag.length > 0) {
				try {
					info[tag] = val;
				} catch(e) {
					dm("指定された処理は評価できません:" + val);
				}
			}
		}
	}

	// パート指定
	function doPart(info, columns) {
		if (     info.class === void)   info.class = "part";
		else if (info.class !== "part") kag.error("part名に実体が存在します:" + info.name);
		info.part = [] if (info.part === void);
		var part = info.part;
		for (var i=2; i<columns.count; i++) part.add(columns[i]);
	}

	function parseStorage(filename,utf8=false) {
		check = false;
		super.parseStorage(...);
		if (check) return result;

//		dm("reload: " + filename);
		// １行も読まれなかったらとりあえずエンコードを変えて読み直し
		super.parseStorage(filename, !utf8);
		if (check) return result;

//		dm("arrayload: " + filename);
		// それでもダメだったらArrayで読み直す
		var temp = [];
		var sep = (Storages.extractStorageExt(filename).toLowerCase() == ".txt") ? "\t" : ",";
		temp.load(filename);
		for (var i = 0; i < temp.count; i++) {
			var line = [];
			line.split(sep, temp[i]);
			doLine(line, i+1) if (line.count > 0);
		}
		return result;
	}

    function UIListParser() {
        super.CSVParser(...);
        clear();
    }

    function clear() {
        result = %[];
        names = [];
    }
};

function uiloadParse(elm)
{
    var separator = #',';
    var baseName = elm.storage;
    
    if (!Storages.isExistentStorage(baseName)) {
        if (Storages.isExistentStorage(baseName + ".csv")) {
            baseName += ".csv";
        } else if (Storages.isExistentStorage(baseName + ".txt")) {
            baseName += ".txt";
            separator = #'\t';
        } else {
            kag.errorImage("UI定義ファイルが見つかりません:" + baseName);
            return;
        }
    }
    var parser = new UIListParser(null, separator);

    parser.parseStorage(baseName);
    var funcName = (elm.func !== void) ? elm.func : Storages.chopStorageExt(baseName) + ".func";
    if (!Storages.isExistentStorage(funcName)) {
        if (Storages.isExistentStorage(funcName + ".func")) {
            funcName += ".func";
        }
    }
    if (Storages.isExistentStorage(funcName)) {
        parser.parseStorage(funcName);
    }

	return %[names: parser.names, result:parser.result];
}

function uiloadEntry(layer, names, dic, elm, table)
{
	// part除外処理
	var pr = (typeof elm.partremove === "String");
	var pe = (typeof elm.partexcept === "String");
	if (pr || pe) {
		var temp = [];
		temp.assign(names);

		// 指定part削除動作
		var parts = [];
		parts.split(",",elm.partremove,,true) if pr;
		for (var i = 0; i < parts.count; i++) {
			var part = dic[parts[i].trim()];
			if (part === void) dm("partが見つかりません:" + parts[i]);
			else if (part.class == "part") {
				part = part.part;
				for (var j = 0; j < part.count; j++) temp.remove(part[j], true);
			} else                                   temp.remove(part.name, true);
		}

		// 指定part以外削除動作
		parts.clear();
		parts.split(",",elm.partexcept,,true) if pe;
		for (var i = 0; i < parts.count; i++) {
			var part = dic[parts[i].trim()];
			if (part === void) dm("partが見つかりません:" + parts[i]);
			else if (part.class == "part") {
				part = part.part;
				for (var j = 0; j < temp.count; j++) if (part.find(temp[j]) < 0) temp[j] = void;
				temp.remove(void, true);
			} else {
				var hasPart = (temp.find(part.name) >= 0);
				temp.clear();
				temp.add(part.name) if hasPart;
			}
		}

		// 結果差し替え
		names = temp;
	}

	var basex = 0, basey = 0;
	var links = layer.numLinks;

    // 背景だけ特殊処理
    for (var i=0; i<names.count; i++) {
        var value = dic[names[i]];
        if (value !== void && value.class == "base") {
            table[value.class](layer, names[i], value, elm);
			basex = value.x;
			basey = value.y;
            break;
        }
    }

	for (var i=0; i<names.count; i++) {
		var name  = names[i];
		var value = dic[name];
		if (value !== void) {
			switch (value.class) {
			case void:
				kag.error("クラスが指定されていません:" + name);
				break;
			case "base":
			case "part":
				break;
			case "copy":
				var target;
				try { target = dic[value.copy]; } catch {}
				if (target === void) {
					kag.error("コピー対象がありません:" + name);
					break;
				}
				var temp = %[];
				(global.Dictionary.assign incontextof temp)(target, true);
				(global.Dictionary.assign incontextof temp)(value,  false); 
				temp.class = target.class;
				temp.groupName = value.subref if (temp.class == "radio" && value.subref !== void);
				temp.uistates = target.uistates;
				value = temp;
				/* not break */
			default:
				var func = table[value.class];
				if (func !== void) {
					value.x -= basex;
					value.y -= basey;
					func(layer, name, value, elm);
				}
				break;
			}
		}
	}

	// 優先順位逆転
	var max = layer.numLinks;
	for (var i = links; i < max; i++) {
		layer.links[i].object.order = max - i;
	}

}

function uiloadWithFuncTable(layer, elm, funcTable) {
	var parse = uiloadParse(elm);
	uiloadEntry(layer, parse.names, parse.result, elm, funcTable);
	return parse.result;
}



function uiEntryBase(layer, name, value, elm) {
    var e = %[];
    (global.Dictionary.assign incontextof e)(elm,false); 
    e.left   = value.x;
    e.top    = value.y;
    e.width  = value.width;
    e.height = value.height;
    e.frame  = value.storage;
    e.margint = 0 if e.margint === void;
    e.marginl = 0 if e.marginl === void;
    e.marginr = 0 if e.marginr === void;
    e.marginb = 0 if e.marginb === void;
    e.transparent = false if e.transparent === void;
    e.visible = true if e.visible === void;
    layer.setPosition(e);
}
function uiEntryButton(layer, name, value) {
	layer.locate(value.x, value.y);
	layer.addButton(value);
}
function uiEntrySlider(layer, name, value) {
    layer.locate(value.x, value.y);
    layer.addSlider(value);
}
function uiEntryLayer(layer, name, value) {
	layer.locate(value.x, value.y);
	value.normal = value.storage;
	value.uistates = void;
	layer.addButton(value);
	layer.names[value.name].enabled = false;
}


var uiEntryFuncs = %[
base:   uiEntryBase,
button: uiEntryButton,
toggle: uiEntryButton,
radio:  uiEntryButton,
slider: uiEntrySlider,
layer:  uiEntryLayer,
];

/**
 * UIのロード処理
 * @param layer レイヤ名
 * @param ロードする定義ファイル
 */
function uiload(layer, elm)
{
	return uiloadWithFuncTable(layer, elm, uiEntryFuncs);
}

function uiEntrySystemButton(layer, name, value) {
	layer.addSystemButton(value);
}
var uiEntrySystemFuncs = %[
base:   uiEntryBase,
button: uiEntrySystemButton,
toggle: uiEntrySystemButton,
radio:  uiEntrySystemButton,
];
/**
 * UIのロード処理
 * @param layer レイヤ名
 * @param ロードする定義ファイル
 */
function uiloadSystem(layer, elm)
{
	return uiloadWithFuncTable(layer, elm, uiEntrySystemFuncs);
}
