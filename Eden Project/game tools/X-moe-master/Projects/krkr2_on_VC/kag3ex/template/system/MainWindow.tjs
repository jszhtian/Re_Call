//;# MainWindow.tjs - KAG メインウィンドウ
//;# Copyright (C)2001-2007, W.Dee and contributors  改変・配布は自由です
//;<<'END_OF_TJS_SCRIPT';

// このスクリプトは有効な perl5 スクリプトでもある

class KAGWindow extends Window
{
	// KAG のウィンドウ クラス
	// KAG の動作のメインな部分はここに記述してある

	// 以下のうち、/*C*/ のつく変数は、末端の perl スクリプトによって
	// 自動的に栞にコピーされるコードが生成される変数

	var scWidth = 640; // 画面横幅
	var scHeight = 480; // 画面縦幅

	var aboutWidth = 320; // 「このソフトについて」ウィンドウの横幅
	var aboutHeight = 200; // 同縦幅

    var defaultName   = "名前"; // 標準名    ワールド拡張がボイス切り替えに利用
    var defaultFamily = "苗字"; // 標準苗字  ワールド拡張がボイス切り替えに利用
    
	var isFirstProcess = true; // 一番最初の process の呼び出しかどうか

	var freeSaveDataMode = false; // 栞をメニューバーなどで管理せずに、個別のファイルとして管理する
	var saveThumbnail = false; // サムネイルを保存するかどうか
	var thumbnailWidth = 133; // サムネイルの横幅
	var thumbnailDepth = 8; // サムネイルのBMPモード。8か24
		// サムネイルの フルカラー化およびサイズフリー化のパッチは
		// ゆん氏からいただきました。
		// この場を借りてお礼申し上げます。

	var snapshotLayer = void; // 画像のスナップショットを一時的に保存するレイヤ
	var snapshotLockCount = 0; // ロックカウント

	var lastSaveDataNameGlobal = ""; // 最後に保存したフリーセーブモードでのファイル名
	/*C*/var lastSaveDataName = ""; // 最後に保存したフリーセーブモードでのファイル名

	var saveDataLocation = "savedata"; // セーブデータ保存場所

	var saveDataID = "00000000-0000-0000-0000-000000000000"; // セーブデータの ID

	var readOnlyMode = false; // 読み込み専用モード(データをディスクに書かない)
	var dataName = "data"; // セーブデータ名
	var saveDataMode = ""; // データ保存モード( "c" で暗号化 )

    var recordHistoryOfStore = 0; // 通過履歴を記録するかどうか
		// 0 = 自動的には記録しない
        // 1 = 保存可能なラベルごと
		// 2 = 選択肢 ( @s タグ ) ごと
		// 3 = 選択肢 ( @select / @mselect タグ ) ごと
    
	var maxHistoryOfStore = 1; // 通過記録の最大数
	var historyOfStore = []; // 通過履歴データ
	var nextRecordHistory = false;
		// 次の保存可能なラベル通過時に現在の情報を保存するかどうか
    
	var stablePosibility = false;
		// 栞を保存可能なラベル間で stable になる可能性があるかどうか

	var fullScreened = false; // 現在フルスクリーンかどうか

	var isMain = true; // これがメインウィンドウかどうか

	var askOnClose = true; // 終了時に終了するかをユーザに聞くかどうか

	var helpFile = ""; // 「ヘルプ > 目次」で開くファイル

	var quakeTimer; // quake 用のタイマ
	var defaultQuakeTimeInChUnit = false;
    var quakeMessageLayer = false; // メッセージレイヤを quake対象にするか
    /*C*/var quaking = false; // 揺れているか
	/*C*/var quakeEndTick = 0; // 揺れを終了させる tick
	/*C*/var quakeHorzMax = 0; // 横振幅
	/*C*/var quakeVertMax = 0; // 縦振幅
	/*C*/var quakePhase = 0;

	var chDefaultAntialiased; // 文字にアンチエイリアスをかけるかどうか
	var chDefaultFace; // 文字のデフォルトのフォント
    var initialMessageLayerVisible = true;

    var historyLayer; // メッセージ履歴レイヤ
    /*C*/var historyWriteEnabled = true; // メッセージレイヤに文字を出力するか
	/*C*/var historyEnabled = true; // メッセージ履歴レイヤを表示可能か
    var historyShowing = false; // メッセージ履歴レイヤを表示中か
	var lastHistoryHiddenTick = 0; // 最後に履歴レイヤが非表示になったときの tick

    var selectPrevSkipMode;
    var selectPrevAutoMode;
    
    var _selectLayer;           // 選択肢レイヤ
    var selectShowing = false; // 選択肢レイヤが表示中か

    property selectLayer {
        getter() {
            if (_selectLayer === void) {
                // 選択肢レイヤの作成
                _selectLayer = new SelectLayer(this, fore.base);
                _selectLayer.name = "選択肢レイヤ";
                add(_selectLayer);
            }
            return _selectLayer;
        }
    }
    
    var _mapSelectLayer;           // マップ選択肢レイヤ
    var mapSelectShowing = false; // マップ選択肢レイヤが表示中か

    property mapSelectLayer {
        getter() {
            if (_mapSelectLayer === void) {
                // マップ選択肢レイヤの作成
                _mapSelectLayer = new MapSelectLayer(this, fore.base);
                _mapSelectLayer.name = "マップ選択肢レイヤ";
                add(_mapSelectLayer);
            }
            return _mapSelectLayer;
        }
    }
    
    var _transLayer; // 画面切り替え処理用レイヤ
    var transShowing = false; // 画面切り替えレイヤが表示中か

    property transLayer {
        getter() {
            if (_transLayer === void) {
                _transLayer = new TransLayer(this);
                add(_transLayer);
            }
            return _transLayer;
        }
    }
    
	/*C*/var numCharacterLayers = 0; // 前景レイヤの数
	/*C*/var numMessageLayers = 1; // メッセージレイヤの数

    /*C*/var messageFadeTime = 500; // メッセージレイヤの表示ON/OFF の時間

    var sysbase;  // ベースレイヤ
    var _debugwin; // デバッグ表示用レイヤ

    property debugwin {
        getter() {
            if (_debugwin === void) {
                // デバッグ表示用
                _debugwin = new Layer(this, primaryLayer);
                _debugwin.name = "デバッグ情報レイヤ";
                _debugwin.setSize(scWidth, 50);
                _debugwin.setPos(0, scHeight - 50);
                _debugwin.visible = false;
                _debugwin.hitThreshold = 256;
            }
            return _debugwin;
        }
    }
    
    var fore = %[]; // 表レイヤ
	var back = %[]; // 裏レイヤ

	var scPositionX = %[]; // 立ち絵の中心座標(X)

	var tempLayer = void; // 一時的なレイヤ

	var lineBreak; // 行待ち用アニメーションレイヤ
	var pageBreak; // ページ待ち用グリフのアニメーションレイヤ
	var clickWaiting = false; // クリック待ちかどうか

	var mainConductor; // メインのコンダクタ
	var extraConductor; // 予備のコンダクタ
	var conductor; // 現在のコンダクタ
	var usingExtraConductor = false; // 予備のコンダクタを使用中かどうか
	var onExtraConductorReturn; // extraConductor から通常のコンダクタに戻るときによぶ関数

	var tagHandlers; // タグのハンドラ群辞書配列

	var saveMacros = true; // マクロを栞に保存するかどうか

	var current; // 現在操作中のメッセージレイヤ
	/*C*/var currentNum; // 現在操作中のメッセージレイヤ番号
	/*C*/var currentPage; // 現在操作中のメッセージレイヤのページ(表0/裏1)
	/*C*/var currentWithBack = false; // 裏画面にも文字を描画するかどうか
    var currentVoiceScript; // 現在有効なボイス
    
	var bgm; // BGM オブジェクト

    var numSEBuffers = 1; // 効果音バッファの数
	var se = []; // 効果音バッファオブジェクト

    // システムが使えるSEを返す（ロード時に破壊されない)
    property sysse {
        getter() {
            return se[numSEBuffers];
        }
    }
    
	var numMovies = 1; // ムービーオブジェクト数
//	var movie; // ムービーオブジェクト
	var movies = []; // ムービーオブジェクト

    function isMoviePlaying() {
        for (var i=0;i<numMovies;i++) {
            if (movies[i].canWaitStop) {
                return true;
            }
        }
        return false;
    }

    // 次のテキスト表示の前に全ボイスをカット
    /*C*/var voicecut = false;
    // ボイスをカットのタイミングはページ消去時
    /*C*/var voicecutpage = false;
    // ボイス再生時に bgm をダウンさせる
    /*C*/var bgmdown = false;
    
	var transCount; // 現在進行中のトランジションの数
	var moveCount; // 現在進行中の自動移動の数
    
	var chSpeeds = %[
		fast: 10, // 「高速」文字表示スピード
		normal: 30, // 「普通」文字表示スピード
		slow: 50, // 「遅い」文字表示スピード
		];

	var userChSpeed = 30; // ユーザの選んだ文字表示スピード
	var userCh2ndSpeed = -1; // ユーザの選んだ 既読部分の文字表示スピード
	var chNonStopToPageBreak = false; // ページ末まで一気に読み進むか ( l タグを無視するか )
	var ch2ndNonStopToPageBreak = false; // 既読の部分でページ末まで一気に読み進むか
	/*C*/var chUserMode = true; // 文字表示速度は現在ユーザの選んだものか
	/*C*/var chSpeed = 30; // 現在の文字表示スピード
	/*C*/var actualChSpeed = chSpeed; // 実際の文字表示スピード

	/*C*/var beforeNoWaitActualChSpeed; // nowait に入る前の actualChSpeed
	/*C*/var beforeNoWaitChUserMode; // nowait に入る前の chUserMode

	/*C*/var clickSkipEnabled = true; // クリックスキップが有効か
	/*C*/var nextSkipEnabled = true; // 次の選択肢(/未読)まで進むが有効か

    /*C*/var allskip   = false; // 0:既読のみスキップ 1:全てスキップ
    /*C*/var afterauto = false; // 選択後オート   1:継続 0:解除
    /*C*/var afterskip = false; // 選択後スキップ 1:継続 0:解除
    /*C*/var nosewhenskip = false; // 1:スキップ時はSEをならさない
    
    var skipMode = 0; // スキップのモード
		// 0=スキップなし, 1=クリック待ち記号まで, 2=改ページ待ち記号まで, 3=次の停止まで
		// 4=早送り 5=次のラベルまで強制スキップ 6=次のスキップ解除まで強制スキップ
        // 7=強制処理用

    // beginskip 中のスキップモード
    var prevSkipMode;
    
    var autoMode = false; // 自動読みすすみモードかどうか

    var autoModePageWait = 350; // 自動読みすすみモード時の改ページ時のウェイト
	var autoModeLineWait = 50; // 自動読みすすみモード時の行クリック待ち時のウェイト
		// 上の二つは、ノーウェイトにしたい場合は 0 ではなくて -4 を指定すること

    // 加算処理用基準時間
    var autoModeAddWait;
    /**
     * 自動待ちに追加時間を加算処理する（ボイス用）
     * @param time 加算時間
     */
    function addAutoWait(time=void) {
        if (time !== void) {
            autoModeAddWait = System.getTickCount() + time;
        } else {
            autoModeAddWait = void;
        }
    }

    /**
     * 自動待ち時間の計算を行う
     */
    function calcAutoModePageWait() {
        if (autoModeAddWait !== void) {
            var waittime = autoModeAddWait - System.getTickCount();
            autoModeAddWait = void;
            if (waittime > 0) {
                return autoModePageWait + waittime;
            }
        }
        return autoModePageWait;
    }

    /**
     * 自動待ち時間の計算を行う
     */
    function calcAutoModeLineWait() {
        if (autoModeAddWait !== void) {
            var waittime = autoModeAddWait - System.getTickCount();
            autoModeAddWait = void;
            if (waittime > 0) {
                return autoModeLineWait + waittime;
            }
        }
        return autoModeLineWait;
    }

    
	var skipKeyRepressed = false; // return あるいは space キー ( f キーなどではない )
								// が押されると true になる ( スキップ解除時に false

	var autoModePageWaits = %[
		fast: 400,  // 自動読みすすみモードの改ページ時 ウェイト「短い」
		faster: 700,  // 自動読みすすみモードの改ページ時 ウェイト「やや短い」
		medium: 1000,  // 自動読みすすみモードの改ページ時 ウェイト「普通」
		slower: 1300, // 自動読みすすみモードの改ページ時 ウェイト「やや遅い」
		slow: 2000, // 自動読みすすみモードの改ページ時 ウェイト「遅い」
		];

	var autoModeLineWaits = %[
		fast: 180,  // 自動読みすすみモードの行末 ウェイト「短い」
		faster: 240,  // 自動読みすすみモードの行末 ウェイト「やや短い」
		medium: 300,  // 自動読みすすみモードの行末 ウェイト「普通」
		slower: 360, // 自動読みすすみモードの行末 ウェイト「やや遅い」
		slow: 500, // 自動読みすすみモードの行末 ウェイト「遅い」
		];

	/*C*/var canCancelSkipByClick = true; // クリックによりスキップ状態のキャンセルができるか

	/*C*/var autoWCEnabled = false; // 自動ウェイトが有効かどうか
	/*C*/var autoWCChars = ""; // 自動ウェイトをかける文字
	var autoWCWaits = []; // 自動ウェイトのウェイト

	var timeOrigin; // resetWait で設定された時間原点
	var lastWaitTime; // wait mode=until で実際に待った時間

	var stableHandlers = []; // システムが安定(クリック待ち/停止)したときに呼ばれる
	var runHandlers = []; // システムが走り始めたときに呼ばれる
	var inStable = true; // 安定しているとき(走行中でないとき) true
	var inSleep = false; // s タグで停止しているとき true

	var updateBeforeCh = 0; // 文字を描画する前にいったん画面描画に入るかどうかのカウント

	var messageLayerHiding = false; // ユーザによりメッセージレイヤが隠されているか

	/*C*/var rightClickEnabled = true; // 右クリックが有効か
	/*C*/var rightClickCall = false; // 右クリックで特定のルーチンを呼ぶか
	/*C*/var rightClickJump = false; // 右クリックかで特定のラベルにジャンプするか
	/*C*/var rightClickTarget = ""; // 右クリックでの呼び出し先
	/*C*/var rightClickStorage = ""; // 右クリックでの呼び出し先
	/*C*/var rightClickName = "default"; // 右クリックのメニュー表示名
	/*C*/var rightClickCurrentMenuName = ""; // 右クリックのメニューに現在設定されている名前
	var rightClickDefaultName = ""; // 右クリックのデフォルトのメニュー表示名

	/*C*/var lastClickGlyphVisible; // extraConductor を使用する直前にクリック待ち記号が可視だったかどうか
	var lastClickGlyphMessagePage;
		// extraConductor を使用する直前のクリック待ち記号の表示されているメッセージレイヤのページ
	var lastClickGlyphMessageNum; // 〃 番号
	var lastClickGlyphWhich; // 〃 "page" か "line" か
	var inSleepBeforeExtraConductor; // extraConductor を使用する直前が inSleep だったか

	// 通常のマウスカーソル
	/*C*/var cursorDefault = crArrow;  // 通常のマウスカーソル
	/*C*/var cursorPointed = crHandPoint;  // ボタン、リンク等をポイントした時のマウスカーソル
	/*C*/var cursorWaitingClick = crArrow;  // クリック待ちのマウスカーソル
	/*C*/var cursorDraggable = crSizeAll; // ドラッグ可能な場所用のマウスカーソル

	/*C*/var startAnchorEnabled = false; // 「最初に戻る」が使用可能かどうか

	/*C*/var storeEnabled = true; // ユーザが「栞をはさむ」メニューにアクセス可能かどうか
	/*C*/var restoreEnabled = true; // ユーザが「栞をたどる」メニューにアクセス可能かどうか
	var storeLabelPassed = false; // 保存可能なラベルを通過したかどうか
    /*C*/var currentStorage = ""; // 現在のラベル
    /*C*/var currentLabel = ""; // 現在のラベル
	/*C*/var currentPageName = ""; // 現在のページ名

	var currentRecordName = ""; // 現在の記録名 ( trail_ストレージ_ラベル )
	var autoRecordPageShowing = false; // ラベル通過記録をするか

	var numBookMarks = 10; // メニューに用意する栞のサブメニュー項目の数
	var showBookMarkDate = false; // メニューに栞をはさんだ日付時刻を表示するか

    var bookMarkDateSecond = false; // 日付に秒までふくめるか

    // プレイ時間
    var playTime;
    var playStartTime;

    function clearPlayTime(initTime = 0) {
        playTime = initTime;
        playStartTime = (new Date()).getTime();
    }
    
	var bookMarkNames = []; // メニューに設定されている栞の名前
	var bookMarkDates = []; // 栞の日付
    var bookMarkProtectedStates = []; // 栞が保護されているかの情報
    var bookMarkStorages  = []; // 栞のシナリオ名
    var bookMarkPlayTimes = [];  // 栞のプレイ時間
    var bookMarkInfos = [];     // 栞の追加情報

	var showFixedPitchOnlyInFontSelector = false; // フォント選択で固定ピットフォントのみを表示するか

	var flags = %[]; // フラグ(ユーザ)
	var pflags = %[]; // 「保存可能なラベル」を通過した時点でのフラグ(ユーザ)
	var pcflags = %[]; // 〃 (コア)
	var sflags = %[]; // システム変数領域(ユーザ)
	var scflags = %[]; // システム変数領域(コア)
	var tflags = %[]; // 一時フラグ

	var tempBookMarks = []; // 一時的に保存した栞

	var clickCount = 0; // 左クリックカウント
	var lastMouseDownX; // 最後にクリックされた X 座標
	var lastMouseDownY; // 最後にクリックされた Y 座標

	var mouseKeyEnabledCount = 0; // マウスキーが有効かどうか

	var kagPlugins = []; // KAG プラグイン

	var keyDownHook = []; // キーが押されたときに呼び出される物
	var leftClickHook = []; // 右クリックされたときに呼び出される物
	var rightClickHook = []; // 左クリックされたときに呼び出される物

	var padKeyMap; // パッドボタン -> ハンドラ(キーコード)。コンストラクタ内で設定
	var padKeyMapReverse; // キーコード -> パッドボタン。コンストラクタ内で設定


	var holdPeriodEventQueue = [];	// 保留にされたムービーのピリオドイベントキュー
	var isLeavePeriodEvent = false;	// ムービーのピリオドイベントを保留にするかどうか
	var isWaitPeriodEvent = false;	// ムービーのピリオドイベント待ち状態かどうか
	var waitedPeriodEventStorageName = void;	// ピリオドイベント待ちをコールしたストレージ名

    // ------------------------------------------------------ 自動ラベル処理

    var autoLabelMode; // true:自動ラベルモード
    var autoLabelType; // 0:間接ラベルロード 1:行番号指定ロード
    var autoLabelCount;  // 自動ラベルカウンタ
    var autoLabelSaveMode; // ラベルで自動的にセーブ処理を実行するモード
    
    // ------------------------------------------------------ 回想再生処理

    var recollectionBookmark = 5000; 
    var recollectionEndLabel; // 回想終了を示すラベル
    var recollectionStorage;  // 回想終了時の遷移先ストレージ
    var recollectionTarget;   // 回想終了時の遷移先ターゲット

    /**
     * 回想中かどうか
     */
    property isRecollection {
        getter() {
            return recollectionEndLabel !== void;
        }
    }
    
    /**
     * 回想モード実行を開始する
     */
    function startRecollection(elm) {
        if (elm.no !== void) {
            var num = (int)elm.no;
            // ロード処理中も isRecollection を有効にするためとりあえず設定
            recollectionEndLabel = true;
            if (loadBookMark(recollectionBookmark + num)) {
                // ロード処理で消されてるのでもう一度設定
                recollectionEndLabel = "*kaisouEnd" + num;
                recollectionStorage  = elm.doneStorage;
                recollectionTarget   = elm.doneTarget;
            } else {
                process(elm.doneStorage, elm.doneTarget);
            }
        } else if (elm.storage !== void || elm.target !== void) {
            process(elm.storage, elm.target);
            recollectionEndLabel = "*kaisouEndStorage";
            recollectionStorage  = elm.doneStorage;
            recollectionTarget   = elm.doneTarget;
        }
    }

    /**
     * 回想モード実行を終了する
     */
    function endRecollection() {
        // 回想終了処理
        if (isRecollection) {
            var ret = -1;
            if (recollectionStorage != '' || recollectionTarget != '') {
                // 実行を登録アドレスに移す
                if (recollectionStorage != '') {
                    conductor.loadScenario(recollectionStorage);
                }
                if (recollectionTarget != '') {
                    conductor.goToLabel(recollectionTarget);
                }
                inSleep = false;
                notifyRun();
                if (conductor.status != conductor.mRun) conductor.run();
                ret = 0;
            } else {
                // 実行停止
                stablePosibility = true;
                cancelSkip();
                isSleep = true;
                notifyStable();
            }
            stopRecollection();
            return ret;
        }
        return 0;
    }
    
    function stopRecollection() {
        recollectionEndLabel = void;
        recollectionStorage = void;
        recollectionTarget  = void;
    }
    
	//------------------------------------------------------ ダイアログレイヤ処理 --

    var currentDialog;
    
    function handleOpenDialog() {
        if (currentDialog !== void) {
            stopAllTransitions();
            cancelSkip();
            currentDialog.parent   = primaryLayer;
            currentDialog.absolute = 9000000;
            currentDialog.visible = true;
            currentDialog.setMode();
            currentDialog.focus();
            currentDialog.onOpen();
        }
        setMenuAccessibleAll();
    }

    function handleCloseDialog() {
        if (this isvalid) {
            if (currentDialog !== void) {
                currentDialog.visible = false;
                currentDialog.removeMode();
                invalidate currentDialog;
                currentDialog = void;
            }
            if (this isvalid) {
                kag.setMenuAccessibleAll();
            }
        }
    }

    /**
     * ダイアログを開く
     */
    function openDialog(dialog, trans) {
        if (currentDialog !== void &&
            currentDialog !== dialog) {
            invalidate currentDialog;
        }

        mainConductor.interrupted = true;
        extraConductor.interrupted = true;
        setMenuAccessibleAll();

        currentDialog = dialog;
        global.openDialogTrigger = new AsyncTrigger(handleOpenDialog, '');
        global.openDialogTrigger.cached = true;
        global.openDialogTrigger.trigger();
    }

    function closeDialog(dialog=void) {
        if (currentDialog !== void && (dialog === void || currentDialog === dialog)) {
            if (mainConductor.interrupted) {
                mainConductor.interrupted  = false;
            }
            if (extraConductor.interrupted) {
                extraConductor.interrupted = false;
            }
            setMenuAccessibleAll();
            
            if (currentDialog !== void) {
                global.closeDialogTrigger = new AsyncTrigger(handleCloseDialog, '');
                global.closeDialogTrigger.cached = true;
                global.closeDialogTrigger.trigger();
            }
        } else if (dialog !== void) {
            dialog.visible = false;
        }
    }

    //------------------------------------------------------ 特殊タイマ --

    var flipTimer; // 画面更新タイミングのタイマー

    /**
     * 画面更新処理
     */
    function onFlipTimerInterval() {
		var work = false;
        var now = System.getTickCount();
		
		// アクション更新
		updateAction(now);
		work = true if actionCount > 0;
		
		// 画面切り替えレイヤ更新
		if (_transLayer !== void) {
			_transLayer.update(now);
			work = true if _transLayer.working;
		}
		
		flipTimer.enabled = work;
	}
    
	//------------------------------------------------------ コンストラクタ --

	function KAGWindow(ismain = true, width = 0, height = 0)
	{
		// コンストラクタ
		// 引数 : ismain : メインウィンドウとして作成されるのかどうか
		super.Window(); // 親クラスのコンストラクタを呼ぶ

		// コンフィギュレーション
		isMain = ismain;
		if(ismain)
		{
			(KAGWindow_config incontextof this)();
			(KAGWindow_config_override incontextof this)()
				if typeof global.KAGWindow_config_override != "undefined";
		}

		userChSpeed = chSpeed = actualChSpeed = chSpeeds.normal;
		autoModePageWait = autoModePageWaits.medium;
		autoModeLineWait = autoModeLineWaits.medium;

		askOnClose = false if !ismain;

		// saveDataLocation がフルパスでないようならば System.exePath を
		// 付け加える
		if(saveDataLocation.indexOf(":") == -1)
			saveDataLocation = System.exePath + saveDataLocation;

        // セーブ可能かどうかの確認
        checkSave();
        
		// ログの出力先を saveDataLocation にする
		if(ismain) Debug.logLocation = saveDataLocation;
        
		// メニューアイテムの作成
		if(ismain) (KAGWindow_createMenus incontextof this)();
		if(typeof this.rightClickMenuItem != "undefined")
			rightClickDefaultName = rightClickCurrentMenuName = rightClickMenuItem.caption;

		if(typeof this.autoModeMediumMenuItem != "undefined")
			autoModeMediumMenuItem.checked = true;
		if(typeof this.windowedMenuItem != "undefined")
			windowedMenuItem.checked = true;
		if(typeof this.chNormalMenuItem != "undefined")
			chNormalMenuItem.checked = true;
		if(typeof this.ch2ndNoChangeMenuItem != "undefined")
			ch2ndNoChangeMenuItem.checked = true;

		if(ismain) (Menu_visible_config incontextof this)();

		createBookMarkSubMenus();

		// ウィンドウ外見の調整
		if(ismain)
		{
			borderStyle = bsSingle;
			innerSunken = true;
		}
		else
		{
			borderStyle = bsDialog;
			innerSunken = false;
		}
		showScrollBars = false;
		if(ismain) caption = System.title;

		// システムタイトルをキャプションと同じに
		//if(ismain) System.title = caption;

		// ウィンドウサイズの調整
		if(width != 0 && height != 0)
		{
			// 与えられたサイズを適用
			scWidth = width;
			scHeight = height;
		}
		setInnerSize(scWidth, scHeight);

		// quake 用タイマの作成
		quakeTimer = new Timer(onQuakeTimerInterval, '');
		add(quakeTimer);
		quakeTimer.interval = 50;

        // 更新処理用タイマの作成
        flipTimer = new Timer(onFlipTimerInterval, '');
        add(flipTimer);
        flipTimer.capacity = 1;
        flipTimer.interval = 10;
        
        // ベースになるレイヤ
        sysbase = new Layer(this, null);
        sysbase.setSize(scWidth, scHeight);
        sysbase.hasImage = false;
        add(sysbase);

        // 背景レイヤの作成
		fore.messages = [];
		back.messages = [];
		fore.layers = [];
		back.layers = [];
        fore.base = new BaseLayer(this, sysbase, "表-背景");
        add(fore.base);
        fore.base.setImageSize(scWidth, scHeight);
        fore.base.setSizeToImageSize();
        fore.base.visible = true;
        back.base = new BaseLayer(this, sysbase, "裏-背景");
        add(back.base);
        back.base.setImageSize(scWidth, scHeight);
		back.base.setSizeToImageSize();

        fore.base.setCompLayer(back.base);
		back.base.setCompLayer(fore.base);
		fore.base.freeImage();
		back.base.freeImage();

		fore.base.setDefaultCursor(cursorDefault);
		back.base.setDefaultCursor(cursorDefault);

        // 舞台レイヤ 背景レイヤの上
        fore.stage = new StageLayer(this, fore.base, "表-舞台", "stage");
        add(fore.stage);
        fore.stage.setImageSize(scWidth, scHeight);
        fore.stage.setSizeToImageSize();
        fore.stage.absolute = 100;
        back.stage = new StageLayer(this, back.base, "裏-舞台", "stage");
        add(back.stage);
        back.stage.setImageSize(scWidth, scHeight);
        back.stage.setSizeToImageSize();
        back.stage.absolute = 100;
        fore.stage.setCompLayer(back.stage);
		back.stage.setCompLayer(fore.stage);
		fore.stage.freeImage();
		back.stage.freeImage();
        
        // イベントレイヤ メッセージレイヤの下
        fore.event = new StageLayer(this, fore.base, "表-イベント", "event");
        add(fore.event);
        fore.event.setImageSize(scWidth, scHeight);
        fore.event.setSizeToImageSize();
        fore.event.absolute = 6 * 100000 - 100;
        back.event = new StageLayer(this, back.base, "裏-イベント", "event");
        add(back.event);
        back.event.setImageSize(scWidth, scHeight);
        back.event.setSizeToImageSize();
        back.event.absolute = 6 * 100000 - 100;
        fore.event.setCompLayer(back.event);
		back.event.setCompLayer(fore.event);
		fore.event.freeImage();
		back.event.freeImage();
        
		// メッセージ履歴レイヤの作成
        historyLayer = new HistoryLayer(this, fore.base);
        historyLayer.name = "履歴レイヤ";
		add(historyLayer);

		// 前景レイヤの作成
		allocateCharacterLayers(numCharacterLayers);

		// メッセージレイヤの作成
		allocateMessageLayers(numMessageLayers, false);
		current = fore.messages[0];
		currentNum = 0;
		currentPage = 0;
		currentWithBack = false;
		if(initialMessageLayerVisible)
		{
			fore.messages[0].visible = true;
			back.messages[0].visible = true;
		}

		chDefaultAntialiased = fore.messages[0].defaultAntialiased;
			// 文字にアンチエイリアスをかけるかどうか
		chDefaultFace = fore.messages[0].userFace;
			// 文字のデフォルトのフォント

		if(typeof this.chAntialiasMenuItem != "undefined")
			chAntialiasMenuItem.checked = chDefaultAntialiased;

		// 行待ち/ページ待ちアニメーションレイヤの作成
		lineBreak = new ClickGlyphLayer(this, fore.base);
		add(lineBreak);
		lineBreak.name = "行クリック待ち記号";
		pageBreak = new ClickGlyphLayer(this, fore.base);
		add(pageBreak);
		pageBreak.name = "ページ末クリック待ち記号";

		// タグハンドラ/コンダクタを作成
		tagHandlers = getHandlers();
        mainConductor = new Conductor(this, tagHandlers);
		add(mainConductor);
		conductor = mainConductor;
		extraConductor = new Conductor(this, tagHandlers);
		add(extraConductor);

        // コンダクタのデバッグレベルを指定
        debugLevel = _debugLevel;
        
		// BGM オブジェクトを作成
		bgm = new BGM(this);
		add(bgm);

		// 効果音オブジェクトを作成
        for(var i = 0; i < numSEBuffers+1; i++)
            add(se[i] = new SESoundBuffer(this, i));

		// ムービーオブジェクトを作成
		if(ismain)
		{
			for( var i = 0; i < numMovies; i++)
				add(movies[i] = new Movie(this,i));
		}

		// デフォルトのハンドラを追加
		stableHandlers.add(defaultStableHandler);
		runHandlers.add(defaultRunHandler);

		// システム変数の読み込み
		if(ismain) loadSystemVariables();

		// システム変数を反映
		if(ismain)
		{
			setSystemStateFromSystemVariables();
			setBookMarkMenuCaptions();
		}

		// メッセージレイヤのクリア
		clearMessageLayers(false);

		// ウィンドウ位置の調節
		if(this.width + this.left > System.desktopLeft + System.desktopWidth)
			left = ((System.desktopWidth - this.width) >>1) + System.desktopLeft;
		if(this.height + this.top > System.desktopTop + System.desktopHeight)
			top = ((System.desktopHeight - this.height) >>1) + System.desktopTop;

		// パッドボタンハンドラの作成
		createPadKeyMap();


		// ウィンドウを表示
		if(ismain) visible = true;

		// 画面サイズがウィンドウサイズよりも小さい場合は
		// フルスクリーンにしてみる
		if(ismain)
		{
			if(System.screenWidth <= scWidth && System.screenHeight <= scHeight)
				onFullScreenMenuItemClick(this);
		}

		// 前回起動時にフルスクリーンだった場合はフルスクリーンにしてみる
		if(ismain)
		{
			if(scflags.fullScreen !== void && +scflags.fullScreen)
				onFullScreenMenuItemClick(this);
		}

		// いったんシステム変数を書き出す
		if(ismain) saveSystemVariables();
	}

	//------------------------------------------------------------- finalize --

	function finalize()
	{
		// finalize メソッド

        if (debugControl) {
            wmrStop(this);
        }
        
        clearBgmStop();
        clearBgmLabel();
        
		// プラグインの無効化
		for(var i = 0; i < kagPlugins.count; i++) invalidate kagPlugins[i];

		// 前景、メッセージレイヤを無効化
		for(var i = 0; i< fore.layers.count; i++) invalidate fore.layers[i];
		for(var i = 0; i< back.layers.count; i++) invalidate back.layers[i];
		for(var i = 0; i< fore.messages.count; i++) invalidate fore.messages[i];
		for(var i = 0; i< back.messages.count; i++) invalidate back.messages[i];

        // 舞台・イベントレイヤを無効化
        invalidate fore.stage;
        invalidate back.stage;
        invalidate fore.event;
        invalidate back.event;
        
		// snapshotLayer を無効化
		invalidate snapshotLayer if snapshotLayer !== void;

		// tempLayer を無効化
		invalidate tempLayer if tempLayer !== void;

		// スーパークラスの finalize を呼ぶ
		super.finalize(...);
	}

	//-------------------------------------------------- onCloseQuery/close --

    function onCloseYes() {
        shutdown();
    }

	function onCloseQuery()
	{
		saveSystemVariables();
        if(!askOnClose) { super.onCloseQuery(true); return; }
        if (currentDialog === void) {
            askYesNo("終了しますか？", "確認", onCloseYes);
        }
        super.onCloseQuery(false);
    }

	function close()
	{
		// ウィンドウを閉じる
		saveSystemVariables();
		super.close(...);
	}

	function shutdown()
	{
		// ウィンドウを閉じるが、終了確認を行わない
		// このメソッド内で close をすると、様々な
		// オブジェクトが無効化されてしまい、この
		// 関数から戻った先でエラーが発生する。
		// そのため、いったん AsyncTrigger を介して、
		// 全てのメソッドから帰ったあとにシャットダウン
		// 処理を行う。
		global.shutdownTrigger =
			new AsyncTrigger(handleShutdown, '');
		global.shutdownTrigger.cached = true;
		global.shutdownTrigger.trigger();
		if(conductor.status == conductor.mRun)
			conductor.interrupt();
			// コンダクタが走行中の時は
			// コンダクタに中断を伝える
	}

	function handleShutdown()
	{
		// shutdown() からのシャットダウン要求を
		// 実際に処理するメソッド
		var askOnClose_save = askOnClose;
		askOnClose = false;
		close();
		if(this isvalid) askOnClose = askOnClose_save;
	}

	function closeByScript(elm)
	{
		// ウィンドウを閉じる
		// ちょっと面倒くさいとをやっているのは
		// shutdown と同じ理由
		// 「いいえ」が選択されてウィンドウが閉じなかった場合は
		// 'not_closed' トリガが発行され、実行は再開する。
		var askOnClose_save = askOnClose;
		if(elm.ask !== void && !(+elm.ask)) askOnClose = false;
		global.shutdownTrigger =
			new AsyncTrigger(handleCloseByScript, '');
		global.shutdownTrigger.cached = true;
		global.shutdownTrigger.trigger();

		// closeByScript は、このハンドラが終わった直後に
		// 「終了しますか？」のダイアログを表示する。
		// 終了する場合はそのまま終了する。
		// 終了しない場合は 'not_closed' トリガが発行され、
		// 実行は継続する。
		conductor.wait(%[
			not_closed : askOnClose_save
			? (function
			{
				// 実際にこれが呼ばれることはないが、一応
				askOnClose = true;
			} incontextof this)
			: (function
			{
			} incontextof this)
			]);
	}

	function handleCloseByScript()
	{
		// shutdown() からのシャットダウン要求を
		// 実際に処理するメソッド
		close();
		if(this isvalid) // いいえ が選択された場合
			conductor.trigger('not_closed');
	}

	//------------------------------------------------------ プラグイン処理 --

	function forEachEventHook(method, func, arg)
	{
		// すべてのプラグインオブジェクトの method にたいして
		// func を実行する
		// func の引数には各要素と arg が渡される
		if(kagPlugins.count)
		{
			var array = [];
			array.assign(kagPlugins); // いったんコピーし、コピーした物に対して実行する
			var arraycount = array.count;
			for(var i =0; i<arraycount; i++)
			{
				var obj = array[i];
				if(typeof obj[method] != "undefined")
					func(obj[method], arg);
			}
		}
	}

	function addPlugin(plugin)
	{
		// プラグインオブジェクトを追加
		kagPlugins.add(plugin);
	}

	function removePlugin(plugin)
	{
		// プラグインオブジェクトを削除
		kagPlugins.remove(plugin);
	}

	//---------------------------------------------------------- フック処理 --

	function callHook(array, arg1, arg2, arg3)
	{
		if(array.count)
		{
			var processed = false;
			var newarray = [];
			newarray.assign(array);
			var arraycount = newarray.count;
			for(var i  = 0; i < arraycount; i++)
			{
				var func = newarray[i];
				var ret = func(arg1, arg2, arg3);
				processed = processed || ret;
			}
			return processed;
		}
		else
		{
			return false;
		}
	}

	//------------------------------------------ パッドのキーマッピング作成 --

	function createPadKeyMap()
	{
		// パッド入力とそれに対応する動作のマッピング。
		// 標準では十字キーはキーボードのカーソルキーにマッピング、
		// ボタン1 は Return、ボタン2 は ESC、ボタン3 は メッセージ履歴の表示
		// にマッピングされる。
		// 関数を指定した場合はボタンを押したときにはその関数が呼ばれる。

		padKeyMap = %[
			VK_PADLEFT =>		VK_LEFT,
			VK_PADRIGHT =>		VK_RIGHT,
			VK_PADUP =>			VK_UP,
			VK_PADDOWN =>		VK_DOWN,
			VK_PAD1 =>			VK_RETURN,
			VK_PAD2 =>			VK_ESCAPE,
			VK_PAD3 =>
				function(ev) {
					showHistoryByKey(this);
				},
			];

		// padKeyMapReverse を作成
		padKeyMapReverse = %[];
		var ar = [];
		ar.assign(padKeyMap);
		for(var i = 0; i < ar.count; i += 2)
		{
			if(typeof(ar[i+1]) != "Object")
			{
				padKeyMapReverse[ar[i+1]] = ar[i];
			}
		}
	}

	function getKeyState(key)
	{
		// System.getKeyState 関数と同等だが、パッドのキーに関しても
		// 反応を返す
		var sg = System.getKeyState;
		var state = sg(key);
		if(state) return true;
		var pad_key = padKeyMapReverse[key];
		if(pad_key !== void)
		{
			// キーコード -> パッドのキーコードの変換が見つかった
			return sg(pad_key);
		}
		return false;
	}

	//-------------------------------------------------------------- action --

	function action(ev)
	{
        if(ev.type == 'onKeyDown' && ev.target === this)
		{
            // パッド入力に対応する処理
			var handler = padKeyMap[ev.key];
			if(handler !== void)
			{
				// ハンドラが見つかった
				if(typeof(handler) == "Object")
				{
					// ハンドラは関数
					(handler incontextof this)(ev);
				}
				else
				{
					// ハンドラはキーコード
					postInputEvent('onKeyDown', %[key: handler]);
					postInputEvent('onKeyUp', %[key: handler]);
				}
			}
		}
	}

	//------------------------------------------------------ tempLayer 関連 --

	property temporaryLayer
	{
		// ワークエリアとして一時的に使用できるレイヤを返す
		getter()
		{
			if(tempLayer === void)
			{
				tempLayer = new KAGLayer(this, primaryLayer);
				tempLayer.name = "一時ワークレイヤ";
			}
			return tempLayer;
		}
	}

	//------------------------------------------------ メニューアイテム関連 --

	function onExitMenuItemClick(sender)
	{
		close();
	}

	function onRightClickMenuItemClick(sender)
	{
		onPrimaryRightClick(); // 右クリックの動作
	}

	function onShowHistoryMenuItemClick(sender)
	{
		if(historyLayer.visible) hideHistory(); else showHistory();
	}

	function onSkipToNextStopMenuItemClick(sender)
	{
        if (skipMode) cancelSkip(); else skipToStop();
        setMenuAccessibleAll();
	}


    function onAutoLabelSaveModeMenuItemClick(sender)
    {
        autoLabelSaveMode = !autoLabelSaveMode;
        if (autoLabelSaveMode) {
            canDebugControl();
        } 
        if (typeof this.autoLabelSaveModeMenuItem != "undefined") {
            autoLabelSaveModeMenuItem.checked = autoLabelSaveMode;
        }
        if (typeof this.skipToPrevLabelMenuItem != "undefined") {
            skipToPrevLabelMenuItem.enabled = autoLabelSaveMode;
        }
    }

    
	function onSkipToNextLabelMenuItemClick(sender)
	{
        if (skipMode) cancelSkip(); else skipToLabel();
        setMenuAccessibleAll();
	}

	function onSkipToPrevLabelMenuItemClick(sender)
	{
        if (autoLabelSaveMode) {
            // 外部シナリオに頼る
            var exefile = "%stools\\searchprev.exe".sprintf(
                Storages.getLocalName(System.exePath));
            var param = "\"%s\" \"%s\" %d".sprintf(
                Storages.getLocalName(System.exeName),
                Storages.getLocalName(Storages.getPlacedPath(pcflags.mainConductor.storageName)),
                pcflags.mainConductor.curLine);
            System.shellExecute(exefile, param);
        }
    }
    
	function onAutoModeMenuItemClick(sender)
	{
        if(autoMode) {
            autoMode = false;
            if (typeof this.autoModeMenuItem !== "undefined")
                autoModeMenuItem.checked = false;
            var t = conductor.lastTagName;
            if (t == 'p'){
                insertTag("p");
            }
            else if(t == 'l'){
                insertTag("l");
            }
        } else {
            enterAutoMode();
        }
        setMenuAccessibleAll();
    }

	function onAutoModeWaitMenuClick(sender)
	{
		sender.checked = true;
		autoModePageWait = sender.wait;
		autoModeLineWait = sender.lwait;
	}

	function onBackStartMenuItemClick(sender)
	{
		goBackHistory();
	}

	function onGoToStartMenuItemClick(sender)
	{
		goToStartWithAsk();
	}

    function onAllSkipMenuItemClick(sender)
    {
		sender.checked = true;
        allskip = sender.skip;
		saveSystemVariables();
    }
    
	function onChSpeedMenuItemClick(sender)
	{
		sender.checked = true;
		userChSpeed = sender.speed;
		setUserSpeed();
		saveSystemVariables();
	}

	function onChNonStopToPageBreakItemClick(sender)
	{
		chNonStopToPageBreak = ! chNonStopToPageBreak;
		if(typeof this.chNonStopToPageBreakItem != "undefined")
			chNonStopToPageBreakItem.checked = chNonStopToPageBreak;
			saveSystemVariables();
	}

	function onCh2ndNonStopToPageBreakItemClick(sender)
	{
		ch2ndNonStopToPageBreak = ! ch2ndNonStopToPageBreak;
		if(typeof this.ch2ndNonStopToPageBreakItem != "undefined")
			ch2ndNonStopToPageBreakItem.checked = ch2ndNonStopToPageBreak;
			saveSystemVariables();
	}

	function onCh2ndSpeedMenuItemClick(sender)
	{
		sender.checked = true;
		userCh2ndSpeed = sender.speed;
		setUserSpeed();
		saveSystemVariables();
	}

	function onChAntialiasMenuItemClick(sender)
	{
		chDefaultAntialiased = !chDefaultAntialiased;
		if(typeof this.chAntialiasMenuItem != "undefined")
			chAntialiasMenuItem.checked = chDefaultAntialiased;
		setMessageLayerUserFont();
		saveSystemVariables();
	}

	function onChChangeFontMenuItem(sender)
	{
		selectFont();
		saveSystemVariables();
	}

	function onRestoreMenuClick(sender)
	{
		if(!freeSaveDataMode) return;
		loadBookMarkFromFileWithAsk();
	}

	function onStoreMenuClick(sender)
	{
		if(!freeSaveDataMode) return;
		saveBookMarkToFileWithAsk();
	}

	function onWindowedMenuItemClick(sender)
	{
		if(fullScreened)
		{
			try
			{
				fullScreen = false;
			}
			catch(e)
			{
				Debug.notice("ウィンドウモードに移行できませんでした : " + e.message);
			}
			fullScreened = fullScreen;
			if(fullScreened)
				fullScreenMenuItem.checked = true;
			else
				windowedMenuItem.checked = true;
		}
		saveSystemVariables();
	}

	function onFullScreenMenuItemClick(sender)
	{
		if(!fullScreened)
		{
			try
			{
				fullScreen = true;
			}
			catch(e)
			{
				Debug.notice("フルスクリーンモードに移行できませんでした : " + e.message);
			}
			fullScreened = fullScreen;
			if(fullScreened)
				fullScreenMenuItem.checked = true;
			else
				windowedMenuItem.checked = true;
		}
		saveSystemVariables();
	}

	function onHelpIndexMenuItemClick(sender)
	{
		// ヘルプファイルを開く
		System.shellExecute(Storages.getLocalName(System.exePath) + helpFile);
	}

	function onHelpAboutMenuItemClick(sender)
	{
		// 「このソフトについて」ウィンドウを表示
        var win = new global.KAGWindow(false, aboutWidth, aboutHeight);
        win.debugLevel = tkdlNone;
        win.setPos(left + ((width - win.width)>>1), top + ((height - win.height)>>1));
        win.process('about.ks' ,,, true); // about.ks を immediate で表示
		win.showModal(); // モード付きで表示
		invalidate win;
	}

    // シナリオ実行ダイアログ呼び出し
    function onExecDialogMenuItemClick(sender)
    {
        execDialog();
    }

    function onChDebugLogMenuItemClick(sender) {
        logMode = !logMode;
        if (typeof sender != "undefined") {
            sender.checked = logMode;
        }
        initLog();
    }

    function onOutputDebugLogMenuItemClick(sender) {
        outputLog();
    }
    
	function onReloadScenarioMenuItemClick(sender)
	{
		saveBookMark(1000, false);
		loadBookMark(1000);
	}

	function onShowConsoleMenuItemClick(sender)
	{
		Debug.console.visible = true;
	}

	function onShowContollerMenuItemClick(sender)
	{
		Debug.controller.visible = true;
	}

	function internalSetMenuAccessibleAll(menu, state)
	{
		// autoEnable が true のすべてのメニュー項目の accessible に値 state を
		// 設定する
		if(typeof menu.autoEnable != "undefined" && menu.autoEnable)
			menu.accessible = state;
		if(typeof menu.stopRecur == "undefined" || !menu.stopRecur)
		{
			var children = menu.children;
			for(var i = children.count -1; i >= 0; i--)
				internalSetMenuAccessibleAll(children[i], state); // 再帰
		}
	}

	function canStore()
	{
		return storeEnabled && storeLabelPassed && !isRecollection;
	}

	function canRestore()
	{
		return restoreEnabled && !isRecollection;
	}

	function setMenuAccessibleAll()
	{
		// メニュー項目の使用可/不可を設定する

		// autoEnable が true のすべてのメニュー項目の accessible の
		// 値を設定する
        var modal = historyLayer.visible || messageLayerHiding || currentDialog;
        var state = inStable && !modal;
        internalSetMenuAccessibleAll(menu, state);

        // その他のメニューの使用可/不可
        var canSkip = !modal && (inStable || skipMode) && !inSleep && nextSkipEnabled && (allskip || getCurrentRead()) && !selectShowing && !mapSelectShowing && !transShowing;
        //dm("canSkip:" + canSkip);
        if(typeof this.skipToNextStopMenuItem != "undefined")
            skipToNextStopMenuItem.enabled = canSkip;

		if(typeof this.rightClickMenuItem != "undefined")
            rightClickMenuItem.enabled = inStable && !historyLayer.visible && !currentDialog;

		if(typeof this.showHistoryMenuItem != "undefined")
            showHistoryMenuItem.enabled = inStable && !messageLayerHiding && !mapSelectShowing && !transShowing && currentDialog===void &&
				historyEnabled;

        var canAuto = !modal && (inStable || autoMode) && !inSleep && !skipMode && !selectShowing && !mapSelectShowing && !transShowing;
        if(typeof this.autoModeMenuItem != "undefined")
            autoModeMenuItem.enabled = canAuto;

		if(typeof this.goBackMenuItem != "undefined")
			goBackMenuItem.enabled = state && isHistoryOfStoreAlive();

		if(typeof this.goToStartMenuItem != "undefined")
			goToStartMenuItem.enabled = state && startAnchorEnabled;

		if(typeof this.storeMenu != "undefined")
		{
			var st = state && canStore();
			var children = storeMenu.children;
			if(freeSaveDataMode) storeMenu.enabled = st;
			for(var i = children.count - 1; i >= 0; i--)
			{
				var obj = children[i];
				obj.enabled = obj.orgEnabled && st;
			}
		}

		if(typeof this.restoreMenu != "undefined")
		{
			var st = state && canRestore();
			var children = restoreMenu.children;
			if(freeSaveDataMode) restoreMenu.enabled = st;
			for(var i = children.count - 1; i >= 0; i--)
			{
				var obj = children[i];
				obj.enabled = obj.orgEnabled && st;
			}
		}

        // 全制御
        if (this == global.Window.mainWindow && typeof global.onModeChange !== "undefined") {
            global.onModeChange(this, autoMode, skipMode, canAuto, canSkip, selectShowing || mapSelectShowing || transShowing, modal);
        }
    }

	//----------------------------------------------- マウスキーを有効にする --

	function enableMouseKey()
	{
		// マウスキーを有効にする
		if(mouseKeyEnabledCount == 0)
		{
			useMouseKey = true;
			mouseCursorState = mcsVisible;
		}
		mouseKeyEnabledCount++; // 参照カウンタ方式
	}

	function disableMouseKey()
	{
		// マウスキーを無効にする
		mouseKeyEnabledCount --;
		if(mouseKeyEnabledCount == 0) useMouseKey = false;
	}

	//----------------------------------------------------- システム変数関連 --

    /**
     * 書き込みテストを行う
     */
    function checkSave()
    {
		if(!readOnlyMode) {
			
			var appName = (typeof global.ENV_Maker != "undefined") ? global.ENV_Maker + "/" + global.ENV_GameName : System.title;

			// セーブ場所の差し替え
			var udp = Storages.chopStorageExt(System.exeName) + ".udp";
			if(Storages.isExistentStorage(udp)) {
				var vars = [];
				vars.load(udp);
				if (vars[0] == "document") {
					if (System.personalPath != System.exePath) {
						saveDataLocation = System.personalPath + appName;
					}
				} else if (vars[0] == "application") {
					if (System.appDataPath != System.exePath) {
						saveDataLocation = System.appDataPath + appName;
					}
				}
			}

			// 書き込み権限テスト
			var dummy = ["test"];
			var fn = saveDataLocation + "/" + "savecheck";
			try {
				(Array.saveStruct incontextof dummy)(fn);
			} catch(e) {
				if (System.personalPath != System.exePath) {
					System.inform("書き込み権限がなくファイル保存できません。MyDocument以下にデータを保存します");
					saveDataLocation = System.personalPath + appName;
				} else {
					System.inform("書き込み権限がなくファイル保存できません。ReadOnlyMode で動作します");
					readOnlyMode = true;
				}
			}

			dm("セーブデータ保存場所:" + saveDataLocation );
		}
    }
    
	function loadSystemVariables()
	{
		// システム変数の読み込み
		try
		{
			var fn = saveDataLocation + "/" + dataName +
				"sc.ksd";
			if(Storages.isExistentStorage(fn))
			{
				scflags = Scripts.evalStorage(fn);
				scflags = %[] if scflags === void;
			}
			else
			{
				scflags = %[];
			}

			var fn = saveDataLocation + "/" + dataName +
				"su.ksd";
			if(Storages.isExistentStorage(fn))
			{
				sflags = Scripts.evalStorage(fn);
				sflags = %[] if sflags === void;
			}
			else
			{
				sflags = %[];
			}
		}
		catch(e)
		{
			throw new Exception("システム変数データを読み込めないか、"
				"あるいはシステム変数データが壊れています(" + e.message + ")");
		}
	}

	function setSystemStateFromSystemVariables()
	{
		// システム変数に基づいてシステムを設定
		// (フルスクリーン関連をのぞく)
		if(scflags.autoModePageWait !== void)
		{
			if(typeof this.autoModeWaitMenu !== "undefined")
			{
				var children = autoModeWaitMenu.children;
				for(var i = children.count-1; i >= 0; i--)
				{
					var item = children[i];
					if(typeof item.wait !== "undefined" && item.wait == scflags.autoModePageWait)
					{
						item.checked = true;
						break;
					}
				}
			}
		}

		if(scflags.userChSpeed !== void)
		{
			if(typeof this.chSpeedMenu !== "undefined")
			{
				var children = chSpeedMenu.children;
				for(var i = children.count-1; i >= 0; i--)
				{
					var item = children[i];
					if(typeof item.speed !== "undefined" && item.speed == scflags.userChSpeed)
					{
						item.checked = true;
						break;
					}
				}
			}
		}

		if(scflags.userCh2ndSpeed !== void)
		{
			if(typeof this.chSpeedMenu !== "undefined")
			{
				var children = ch2ndSpeedMenu.children;
				for(var i = children.count-1; i >= 0; i--)
				{
					var item = children[i];
					if(typeof item.speed !== "undefined" && item.speed == scflags.userCh2ndSpeed)
					{
						item.checked = true;
						break;
					}
				}
			}
		}

		if (scflags.allskip !== void) {
			allskip = scflags.allskip;
		}
		if (typeof this.allskipMenu !== "undefined") {
			var children = allskipMenu.children;
			for(var i = children.count-1; i >= 0; i--) {
				var item = children[i];
				if(typeof item.skip !== "undefined" && item.skip == allskip) {
					item.checked = true;
					break;
				}
			}
        }

        voicecut = scflags.voicecut if scflags.voicecut !== void;
        voicecutpage = scflags.voicecutpage if scflags.voicecutpage !== void;
        bgmdown = scflags.bgmdown if scflags.bgmdown !== void;
        
        afterauto = scflags.afterauto if scflags.afterauto !== void;
        afterskip = scflags.afterskip if scflags.afterskip !== void;
        nosewhenskip = scflags.nosewhenskip if scflags.nosewhenskip !== void;
        
		lastSaveDataNameGlobal = scflags.lastSaveDataNameGlobal if scflags.lastSaveDataNameGlobal !== void;

		bookMarkNames = scflags.bookMarkNames if scflags.bookMarkNames !== void;
		bookMarkDates = scflags.bookMarkDates if scflags.bookMarkDates !== void;
		bookMarkProtectedStates = scflags.bookMarkProtectedStates if scflags.bookMarkProtectedStates !== void;
		bookMarkStorages = scflags.bookMarkStorages if scflags.bookMarkStorages !== void;
		bookMarkPlayTimes = scflags.bookMarkPlayTimes if scflags.bookMarkPlayTimes !== void;
		bookMarkInfos = scflags.bookMarkInfos if scflags.bookMarkInfos !== void;

		autoModePageWait = scflags.autoModePageWait if scflags.autoModePageWait !== void;
		autoModeLineWait = scflags.autoModeLineWait if scflags.autoModeLineWait !== void;
		userChSpeed = scflags.userChSpeed if scflags.userChSpeed !== void;
		userCh2ndSpeed = scflags.userCh2ndSpeed if scflags.userCh2ndSpeed !== void;

		setUserSpeed();

		chNonStopToPageBreak = scflags.chNonStopToPageBreak if scflags.chNonStopToPageBreak !== void;
		if(typeof this.chNonStopToPageBreakItem != "undefined")
			chNonStopToPageBreakItem.checked = chNonStopToPageBreak;

		ch2ndNonStopToPageBreak = scflags.ch2ndNonStopToPageBreak if scflags.ch2ndNonStopToPageBreak !== void;
		if(typeof this.ch2ndNonStopToPageBreakItem != "undefined")
			ch2ndNonStopToPageBreakItem.checked = ch2ndNonStopToPageBreak;

		chDefaultAntialiased = scflags.chDefaultAntialiased if scflags.chDefaultAntialiased !== void;
		if(typeof this.chAntialiasMenuItem != "undefined")
			chAntialiasMenuItem.checked = chDefaultAntialiased;
		chDefaultFace = scflags.chDefaultFace if scflags.chDefaultFace !== void;

		setMessageLayerUserFont();

		bgm.restoreSystemState(scflags);

        for(var i = 0; i<numSEBuffers+1; i++)
		{
			se[i].restoreSystemState(scflags);
		}

        // ボイス用速度制御用メニュー
        if(typeof this.voiceSpeedMenu !== "undefined") {
            var children = voiceSpeedMenu.children;
            for (var i = children.count-1; i >= 0; i--) {
                var item = children[i];
                if (typeof item.speed !== "undefined" && item.speed == voicespeed) {
                    item.checked = true;
                    break;
                }
            }
		}

        if (scflags.logMode !== void) {
            logMode = scflags.logMode;
        }
        if (typeof this.chDebugLogMenuItem != "undefined") {
            chDebugLogMenuItem.checked = logMode;
        }
        
        if (scflags.debugLevel !== void) {
            debugLevel = scflags.debugLevel;
        }
        switch (debugLevel) {
        case tkdlNone:
            if(typeof this.debugLevelNoneMenuItem != "undefined")
                debugLevelNoneMenuItem.checked = true;
            break;
        case tkdlSimple:
            if(typeof this.debugLevelSimpleMenuItem != "undefined")
                debugLevelSimpleMenuItem.checked = true;
            break;
        case tkdlVerbose:
            if(typeof this.debugLevelVerboseMenuItem != "undefined")
                debugLevelVerboseMenuItem.checked = true;
            break;
        }

        if (scflags.debugwin !== void && scflags.debugwin) {
            debugwin.visible = true;
        }
        if (typeof this.debugWinMenuItem != "undefined" && _debugwin !== void) {
            debugWinMenuItem.checked = debugwin.visible;
        }

        if (scflags.autoLabelSaveMode !== void) {
            autoLabelSaveMode = scflags.autoLabelSaveMode;
            if (autoLabelSaveMode) {
                canDebugControl();
            } 
        }
        if (typeof this.autoLabelSaveModeMenuItem != "undefined") {
            autoLabelSaveModeMenuItem.checked = autoLabelSaveMode;
        }
        if (typeof this.skipToPrevLabelMenuItem != "undefined") {
            skipToPrevLabelMenuItem.enabled = autoLabelSaveMode;
        }
    }

	function clearSystemVariables()
	{
		// システム変数のクリア
		(Dictionary.clear incontextof sflags)();
	}

	function saveSystemVariables()
	{
		// システム変数の保存
		if(!isMain) return;

		// プラグインを呼ぶ
		forEachEventHook('onSaveSystemVariables',
			function(handler, f) { handler(); } incontextof this);

		// フルスクリーン
		scflags.fullScreen = fullScreened;

		// 文字表示速度
		scflags.autoModePageWait = autoModePageWait;
		scflags.autoModeLineWait = autoModeLineWait;
		scflags.userChSpeed = userChSpeed;
		scflags.userCh2ndSpeed = userCh2ndSpeed;
		scflags.chDefaultAntialiased = chDefaultAntialiased;
		scflags.chDefaultFace = chDefaultFace;
		scflags.chNonStopToPageBreak = chNonStopToPageBreak;
		scflags.ch2ndNonStopToPageBreak = ch2ndNonStopToPageBreak;

		// ブックマーク名
		scflags.bookMarkNames = bookMarkNames; // (コピーではなくて)参照で十分
        scflags.bookMarkDates = bookMarkDates;
		scflags.bookMarkProtectedStates = bookMarkProtectedStates;
        scflags.bookMarkStorages = bookMarkStorages;
        scflags.bookMarkPlayTimes = bookMarkPlayTimes;
        scflags.bookMarkInfos = bookMarkInfos;

		scflags.lastSaveDataNameGlobal = lastSaveDataNameGlobal;

        // ボイスカット処理設定
        scflags.voicecut = voicecut;
        scflags.voicecutpage = voicecutpage;
        scflags.bgmdown = bgmdown;
        
        // 全てスキップ
        scflags.allskip = allskip;
        
        scflags.afterauto = afterauto;
        scflags.afterskip = afterskip;
        scflags.nosewhenskip = nosewhenskip;

        scflags.logMode = logMode;
        scflags.debugLevel = debugLevel;
        scflags.debugwin = _debugwin !== void && debugwin.visible;
        scflags.autoLabelSaveMode = autoLabelSaveMode;
        
		// ファイルに書き込む
		if(!readOnlyMode)
		{
            try {
            var fn = saveDataLocation + "/" + dataName +
				"sc.ksd";
			(Dictionary.saveStruct incontextof scflags)(fn, saveDataMode);

			var fn = saveDataLocation + "/" + dataName +
				"su.ksd";
			(Dictionary.saveStruct incontextof sflags)(fn, saveDataMode);
            } catch (e) {
                readOnlyMode = true;
            }
		}
	}

	//------------------------------------------------------- ゲーム変数関連 --

    /**
     * 内部保存処理
     * @param f 記録先 loadFromLine 行番号ジャンプ指定
     */
	function internalStoreFlags(f, loadFromLine)
	{
		// f に現在の状態を記録する

		// KAGWindow に関するもの
		(Dictionary.clear incontextof f)(); // クリア
		// ここの [start_store_vars] から [end_store_vars] で囲まれた部分は
		// 末端の perl スクリプトによって自動的に処理されるので、このマークを消したり
		// このマークの間を編集したりしないこと。
		// [start_store_vars]
		f.lastSaveDataName = lastSaveDataName;
		f.quaking = quaking;
		f.quakeEndTick = quakeEndTick;
		f.quakeHorzMax = quakeHorzMax;
		f.quakeVertMax = quakeVertMax;
		f.quakePhase = quakePhase;
		f.historyWriteEnabled = historyWriteEnabled;
		f.historyEnabled = historyEnabled;
		f.numCharacterLayers = numCharacterLayers;
		f.numMessageLayers = numMessageLayers;
		f.currentNum = currentNum;
		f.currentPage = currentPage;
		f.currentWithBack = currentWithBack;
		f.chUserMode = chUserMode;
		f.chSpeed = chSpeed;
		f.actualChSpeed = actualChSpeed;
		f.beforeNoWaitActualChSpeed = beforeNoWaitActualChSpeed;
		f.beforeNoWaitChUserMode = beforeNoWaitChUserMode;
		f.clickSkipEnabled = clickSkipEnabled;
		f.nextSkipEnabled = nextSkipEnabled;
		f.canCancelSkipByClick = canCancelSkipByClick;
		f.autoWCEnabled = autoWCEnabled;
		f.autoWCChars = autoWCChars;
		f.rightClickEnabled = rightClickEnabled;
		f.rightClickCall = rightClickCall;
		f.rightClickJump = rightClickJump;
		f.rightClickTarget = rightClickTarget;
		f.rightClickStorage = rightClickStorage;
		f.rightClickName = rightClickName;
		f.rightClickCurrentMenuName = rightClickCurrentMenuName;
		f.lastClickGlyphVisible = lastClickGlyphVisible;
		f.cursorDefault = cursorDefault;
		f.cursorPointed = cursorPointed;
		f.cursorWaitingClick = cursorWaitingClick;
		f.cursorDraggable = cursorDraggable;
		f.startAnchorEnabled = startAnchorEnabled;
		f.storeEnabled = storeEnabled;
		f.restoreEnabled = restoreEnabled;
        f.currentStorage  = currentStorage;
        f.currentLabel    = currentLabel;
		f.currentPageName = currentPageName;
		// [end_store_vars]

		// perl スクリプトによって自動的に処理されないもの、いくつか。
		// 自動ウェイト
		f.autoWCWaits = [];
		f.autoWCWaits.assign(autoWCWaits); // 自動ウェイトのウェイト

		// bgm
		f.bgm = bgm.store();

		// 効果音
		f.se = [];
		for(var i = 0; i<numSEBuffers; i++)
		{
			f.se[i] = se[i].store();
		}

		// メッセージレイヤ
		f.foreMessageLayers = [];
		f.backMessageLayers = [];
		for(var i = 0; i < numMessageLayers; i++)
		{
			f.foreMessageLayers[i] = fore.messages[i].store();
			f.backMessageLayers[i] = back.messages[i].store();
		}

		// 前景レイヤ
		f.foreCharacterLayers = [];
		f.backCharacterLayers = [];
		for(var i = 0; i < numCharacterLayers; i++)
		{
			f.foreCharacterLayers[i] = fore.layers[i].store();
			f.backCharacterLayers[i] = back.layers[i].store();
		}

        // 舞台レイヤ・イベントレイヤ
        f.foreStageLayer = fore.stage.store();
        f.backStageLayer = back.stage.store();
        f.foreEventLayer = fore.event.store();
        f.backEventLayer = back.event.store();
        
		// 背景レイヤ
		f.foreBaseLayer = fore.base.store();
		f.backBaseLayer = back.base.store();

		// ウィンドウキャプション
		f.caption = caption;

		// コンダクタ
		f.mainConductor = mainConductor.store();
		f.mainConductor.lineSaveMode = true if loadFromLine;
		if(!saveMacros) f.mainConductor.macros = void;
		// マクロ情報を void で上書きすると栞中のマクロ情報は無効になる

		// メッセージ履歴
		if(historyLayer.storeState)
		{
			f.historyData = historyLayer.save();
		}

		// ムービー
		if( isMain )
		{
			f.movies = [];
			for( var i = 0; i < numMovies; i++)
				f.movies[i] = movies[i].store();
		}

        f.lineMode  = lineMode;
        f.crAfterName = crAfterName;
        f.erAfterPage = erAfterPage;
        f.noCrOnce = noCrOnce;
        f.noErOnce = noErOnce;
        f.autoIndent = autoIndent;
        f.autoLabelCount = autoLabelCount;
        f.afterPage = afterPage;
        f.emptyLine = emptyLine;
        f.prevEmptyLine = prevEmptyLine;
        
		// storeHook
		forEachEventHook('onStore',
			function(handler, f) { handler(f.flags, f.options); } incontextof this,
			%[flags:f, options:void]);
	}

	function storeFlags(loadFromLine=false)
	{
		// pcflags, pflags に値を書き込む

		// flags -> pflags
		(Dictionary.assignStruct incontextof pflags)(flags);

		internalStoreFlags(pcflags, loadFromLine);
	}

	function internalRestoreFlags(f, clear = true, elm = void)
	{
		// f から情報を読み出す
		// clear が true ならばメッセージレイヤをクリアする
		// se, bgm がそれぞれ true ならばその情報も反映させる
		// backlay が true の場合は、表画面にロードすべきものを裏画面にロードする

		// KAGWindow に関するもの
		// ここの [start_restore_vars] から [end_restore_vars] で囲まれた部分は
		// (略)
		// [start_restore_vars]
		lastSaveDataName = f.lastSaveDataName if f.lastSaveDataName !== void;
		quaking = f.quaking if f.quaking !== void;
		quakeEndTick = f.quakeEndTick if f.quakeEndTick !== void;
		quakeHorzMax = f.quakeHorzMax if f.quakeHorzMax !== void;
		quakeVertMax = f.quakeVertMax if f.quakeVertMax !== void;
		quakePhase = f.quakePhase if f.quakePhase !== void;
		historyWriteEnabled = f.historyWriteEnabled if f.historyWriteEnabled !== void;
		historyEnabled = f.historyEnabled if f.historyEnabled !== void;
		numCharacterLayers = f.numCharacterLayers if f.numCharacterLayers !== void;
		numMessageLayers = f.numMessageLayers if f.numMessageLayers !== void;
		currentNum = f.currentNum if f.currentNum !== void;
		currentPage = f.currentPage if f.currentPage !== void;
		currentWithBack = f.currentWithBack if f.currentWithBack !== void;
		chUserMode = f.chUserMode if f.chUserMode !== void;
		chSpeed = f.chSpeed if f.chSpeed !== void;
		actualChSpeed = f.actualChSpeed if f.actualChSpeed !== void;
		beforeNoWaitActualChSpeed = f.beforeNoWaitActualChSpeed if f.beforeNoWaitActualChSpeed !== void;
		beforeNoWaitChUserMode = f.beforeNoWaitChUserMode if f.beforeNoWaitChUserMode !== void;
		clickSkipEnabled = f.clickSkipEnabled if f.clickSkipEnabled !== void;
		nextSkipEnabled = f.nextSkipEnabled if f.nextSkipEnabled !== void;
		canCancelSkipByClick = f.canCancelSkipByClick if f.canCancelSkipByClick !== void;
		autoWCEnabled = f.autoWCEnabled if f.autoWCEnabled !== void;
		autoWCChars = f.autoWCChars if f.autoWCChars !== void;
		rightClickEnabled = f.rightClickEnabled if f.rightClickEnabled !== void;
		rightClickCall = f.rightClickCall if f.rightClickCall !== void;
		rightClickJump = f.rightClickJump if f.rightClickJump !== void;
		rightClickTarget = f.rightClickTarget if f.rightClickTarget !== void;
		rightClickStorage = f.rightClickStorage if f.rightClickStorage !== void;
		rightClickName = f.rightClickName if f.rightClickName !== void;
		rightClickCurrentMenuName = f.rightClickCurrentMenuName if f.rightClickCurrentMenuName !== void;
		lastClickGlyphVisible = f.lastClickGlyphVisible if f.lastClickGlyphVisible !== void;
		cursorDefault = f.cursorDefault if f.cursorDefault !== void;
		cursorPointed = f.cursorPointed if f.cursorPointed !== void;
		cursorWaitingClick = f.cursorWaitingClick if f.cursorWaitingClick !== void;
		cursorDraggable = f.cursorDraggable if f.cursorDraggable !== void;
		startAnchorEnabled = f.startAnchorEnabled if f.startAnchorEnabled !== void;
		storeEnabled = f.storeEnabled if f.storeEnabled !== void;
		restoreEnabled = f.restoreEnabled if f.restoreEnabled !== void;
        currentStorage = f.currentStorage if f.currentStorage !== void;
        currentLabel = f.currentLabel if f.currentLabel !== void;
		currentPageName = f.currentPageName if f.currentPageName !== void;
		// [end_restore_vars]

		// perl スクリプトによって自動的に処理されないもの、いくつか。

		// 自動ウェイト
		autoWCWaits.assign(f.autoWCWaits) if f.autoWCWaits !== void;

        switch (f.lineMode) {
        case 0:
            setLineMode();
            break;
        case 1:
            setLineMode("page");
            break;
        case 2:
            setLineMode("line");
            break;
        case 3:
            setLineMode("vn");
            break;
        case 4:
            setLineMode("tex");
            break;
        case 5:
            setLineMode("free");
            break;
        }
        crAfterName = f.crAfterName;
        erAfterPage = f.erAfterPage;
        noCrOnce    = f.noCrOnce;
        noErOnce    = f.noErOnce;
        autoIndent = f.autoIndent;
        autoLabelCount = f.autoLabelCount;
        afterPage = f.afterPage;
        emptyLine = f.emptyLine;
        prevEmptyLine = f.prevEmptyLine;
        
		// ムービー
		if( isMain )
		{
			for( var i = 0; i < numMovies; i++)
				movies[i].restore(f.movies[i]);
		}

		// 背景レイヤ
		var backlay = elm != void && elm.backlay != void && +elm.backlay;
		if(backlay)
		{
			back.base.restore(f.foreBaseLayer);
		}
		else
		{
			fore.base.restore(f.foreBaseLayer);
			back.base.restore(f.backBaseLayer);
		}

        if (backlay) {
            back.stage.restore(f.foreStageLayer);
            back.event.restore(f.foreEventLayer);
        } else {
            fore.stage.restore(f.foreStageLayer);
			back.stage.restore(f.backStageLayer);
            fore.event.restore(f.foreEventLayer);
			back.event.restore(f.backEventLayer);
        }
        
		// メッセージレイヤ
		allocateMessageLayers(numMessageLayers);
		if(backlay)
		{
			for(var i = 0; i < numMessageLayers; i++)
			{
				back.messages[i].restore(f.foreMessageLayers[i]);
			}
		}
		else
		{
			for(var i = 0; i < numMessageLayers; i++)
			{
				fore.messages[i].restore(f.foreMessageLayers[i]);
				back.messages[i].restore(f.backMessageLayers[i]);
			}
		}

		if(clear)
		{
			for(var i = 0; i < numMessageLayers; i++)
			{
				fore.messages[i].clear();
				back.messages[i].clear();
			}
			if(historyLayer.storeState)
			{
				historyLayer.load(f.historyData);
			}
			else
			{
				if(historyWriteEnabled)
				{
					if(historyLayer.everypage)
						historyLayer.repage();
					else
						historyLayer.reline(), historyLayer.reline();
				}
				historyLayer.clearAction();
			}
		}

		// 前景レイヤ
		allocateCharacterLayers(numCharacterLayers);
		if(backlay)
		{
			for(var i = 0; i < numCharacterLayers; i++)
			{
				back.layers[i].restore(f.foreCharacterLayers[i]);
			}
		}
		else
		{
			for(var i = 0; i < numCharacterLayers; i++)
			{
                try {
                    fore.layers[i].restore(f.foreCharacterLayers[i]);
                } catch (e) {
                    dm("画像の読み込みに失敗しました");
                } 
                try {
                    back.layers[i].restore(f.backCharacterLayers[i]);
                } catch (e) {
                    dm("画像の読み込みに失敗しました");
                } 
            }
		}

		// quake 関連
		restoreQuake();

		// bgm
		if(elm === void || elm.bgm === void || +elm.bgm)
		{
			bgm.restore(f.bgm);
		}

		// 効果音
		if(elm === void || elm.se === void || +elm.se)
		{
			for(var i = 0; i<numSEBuffers; i++)
			{
				se[i].restore(f.se[i]);
			}
		}

		// ウィンドウキャプション
		caption = f.caption;
		//System.title = caption;

		// current の設定し直し
		current = (currentPage?back:fore).messages[currentNum];

		// 右クリックメニュー名
		if(typeof this.rightClickMenuItem != "undefined")
			rightClickMenuItem.caption = rightClickCurrentMenuName;

		// restoreHook
		forEachEventHook('onRestore',
			function(handler, f) { handler(f.flags, f.clear, f.options); } incontextof this,
			%[flags:f, clear:clear, options:elm]);

	}

	function restoreFlags()
	{
		// pcflags, pflags から情報を読み出す

		// ロード時、ムービーのピリオドイベント情報をクリアする
		purgeMoviePeriod();

		// スナップショットの破棄
		freeSnapshot();

		// トランジション、自動移動の停止
		stopAllTransitions();
		stopAllMoves();

		// クリック待ち記号を隠す
		hideClickGlyphs();

		// メッセージ履歴を隠す
		hideHistory();

        // 選択肢を隠す
        hideSelect();
        hideMapSelect();
        hideTransLayer();
        
		// スキップのキャンセル
        if (skipMode < 7) {
            cancelSkip();
        }

		// pflags -> flags
		(Dictionary.assignStruct incontextof flags)(pflags);

		// 栞管理関連
		storeLabelPassed = true;
		nextRecordHistory = false;
		stablePosibility = false;

		// コンダクタ
		currentRecordName = "";
		extraConductor.clear();
		setConductorToMain();
		mainConductor.restore(pcflags.mainConductor);
		// XXX 順番入れ替え
		
		// 読み込み
		internalRestoreFlags(pcflags);

        // メニュー関連
		setMenuAccessibleAll();

        // 回想中止
        stopRecollection();
        
		// 実行開始
		processGo();
    }

	function clearVariables()
	{
		// ゲーム変数のクリア
		(Dictionary.clear incontextof flags)();
	}

	//--------------------------------------------------------- 通過記録管理 --

	function pushHistoryOfStore()
	{
		// 通過記録を行う
		// pflags, pcflags に情報を格納した後に呼ぶこと

		if(nextRecordHistory)
		{
			if(stablePosibility)
			{
				// stablePosibility が false の場合は、
				// そこのラベルで通過記録を行っても
				// そこよりも前に戻るすべがないので通過記録をしない

				// 辞書配列を作成
				var dic = %[];

				// user と core を記録
				dic.user = %[];
				(Dictionary.assignStruct incontextof dic.user)(pflags);
				dic.core = %[];
				(Dictionary.assignStruct incontextof dic.core)(pcflags);

				// dic を historyOfStore の先頭に挿入
				historyOfStore.insert(0, dic);

				// はみ出た分を削除
				if(historyOfStore.count > maxHistoryOfStore)
					historyOfStore.count = maxHistoryOfStore;
			}

			nextRecordHistory = false;
		}
	}

	function setToRecordHistory()
	{
		// 次の「保存可能なラベル」通過時に
		// 通過記録を行うように設定する
		// ( ただし、そのときに記録されるのは、現在の状態 )
        if (!isRecollection) {
            nextRecordHistory = true;
        }
	}

	function isHistoryOfStoreAlive()
	{
		// 通過記録が利用可能かどうかを返す
		return historyOfStore.count;
	}

    function goBackYes() {
        // user と core を pflags, pcflags に戻す
        (Dictionary.assignStruct incontextof pflags)(historyOfStore[0].user);
        (Dictionary.assignStruct incontextof pcflags)(historyOfStore[0].core);
        
        // 記録の先頭を削除する
        historyOfStore.erase(0);
        
        // データを元に、栞をたどる動作をする
        restoreFlags();
    }

    function goBackHistory(ask = true)
	{
		// 通過記録をたどり、戻る

		if(!isHistoryOfStoreAlive())
			return false;

		var result;
		if(ask)
		{
			var prompt = "「"+ historyOfStore[0].core.currentPageName + "」まで戻りますか?";
            askYesNo(prompt, "確認", goBackYes);
		}
		else
		{
            goBackYes();
		}
	}

	//--------------------------------------------------------------- 栞管理 --

	function createBookMarkSubMenus()
	{
		// 「栞をたどる」「栞をはさむ」以下にサブメニュー項目を追加
		if(freeSaveDataMode) return; // フリーセーブモードではなにもしない
		if(typeof this.storeMenu !== "undefined" && storeMenu.visible)
		{
			for(var i = 0; i<numBookMarks; i++)
			{
				var item;
				storeMenu.add(item = new KAGMenuItem(this, string i, 0, onBookMarkStore,
					false));
				item.bmNum = i;
				item.orgEnabled = false;
			}
		}
		if(typeof this.restoreMenu !== "undefined" && restoreMenu.visible)
		{
			for(var i = 0; i<numBookMarks; i++)
			{
				var item;
				restoreMenu.add(item = new KAGMenuItem(this, string i, 0, onBookMarkRestore,
					false));
				item.bmNum = i;
				item.orgEnabled = false;
			}
		}
	}

	function setBookMarkMenuCaptions()
	{
		// 「栞をたどる」「栞をはさむ」以下のサブメニューに
		// キャプションを設定

		// 栞を挟む
		if(typeof this.storeMenu !== "undefined")
		{
			var children = storeMenu.children;
			for(var i = children.count - 1; i >= 0; i--)
			{
				if(bookMarkDates[i] != '') // 空文字列の場合は栞がないということ
				{
					// 栞が存在する
					var caption;
					if(showBookMarkDate) caption = bookMarkDates[i] + " ";
					caption += bookMarkNames[i];
					var item = children[i];
					item.caption = caption;
					item.enabled = false;
					item.orgEnabled = !bookMarkProtectedStates[i];
				}
				else
				{
					// 栞が存在しない
					var item = children[i];
					item.caption = "(未設定)";
					item.enabled = false;
					item.orgEnabled = !bookMarkProtectedStates[i];
				}
			}
		}

		// 栞をたどる
		if(typeof this.restoreMenu !== "undefined")
		{
			var children = restoreMenu.children;
			for(var i = children.count - 1; i >= 0; i--)
			{
				if(bookMarkDates[i] != '') // 空文字列の場合は栞がないということ
				{
					// 栞が存在する
					var caption;
					if(showBookMarkDate) caption = bookMarkDates[i] + " ";
					caption += bookMarkNames[i];
					var item = restoreMenu.children[i];
					item.caption = caption;
					item.enabled = false;
					item.orgEnabled = true;
				}
				else
				{
					var item = restoreMenu.children[i];
					item.caption = "(未設定)";
					item.enabled = false;
					item.orgEnabled = false;
				}
			}
		}
		setMenuAccessibleAll();
	}

	function setBookMarkProtectedState(num, s)
	{
		// n 番の栞の保護フラグを設定する
		// s = true ならば栞に書き込み保護をする
		bookMarkProtectedStates[num] = s;
		setBookMarkMenuCaptions();
	}

	function onBookMarkStore(sender)
	{
		// 栞をはさむメニューが選択された
//		if(!sender.parent.accessEnabled) return;
		saveBookMarkWithAsk(sender.bmNum);
	}

	function onBookMarkRestore(sender)
	{
		// 栞をたどるメニューが選択された
//		if(!sender.parent.accessEnabled) return;
		loadBookMarkWithAsk(sender.bmNum);
	}

	function getBookMarkPageName(num)
	{
		// 栞番号 num のブックマーク名を得る
		if(bookMarkDates[num] != '') // 空文字列の場合は栞がないということ
			return bookMarkNames[num];
		return "(未設定)";
	}

	function getBookMarkDate(num)
	{
		// 栞番号 num の日付を得る
		return bookMarkDates[num];
	}

	function getBookMarkStorage(num)
	{
        // 栞番号 num のストレージ名を得る
        if(bookMarkDates[num] != '') // 空文字列の場合は栞がないということ
            return bookMarkStorages[num];
		return "";
	}

	function getBookMarkPlayTime(num)
	{
        // 栞番号 num のプレイ時間を得る
        if(bookMarkDates[num] != '') // 空文字列の場合は栞がないということ
            return bookMarkPlayTimes[num];
        return 0;
	}
    
	function getBookMarkInfo(num)
	{
        // 栞番号 num の拡張情報を得る
        return bookMarkInfos[num];
	}
    
	function getBookMarkFileNameAtNum(num)
	{
		if(num >= 999) // 999 番以降は特殊なデータに用いるので
			return saveDataLocation + "/" + dataName + num + ".ksd";
		else
			return saveDataLocation + "/" + dataName + num + (saveThumbnail?".bmp":".kdt");
	}

	function lockSnapshot()
	{
		// スナップショットをロックする
		// 初めてスナップショットがロックされた時点での画面を保存する
		if(snapshotLockCount == 0)
		{
			if(snapshotLayer === void)
                snapshotLayer = new Layer(this, primaryLayer);
            snapshotLayer.name = "スナップショット用";
            snapshotLayer.setImageSize(scWidth, scHeight);
			snapshotLayer.face = dfAlpha;
			snapshotLayer.piledCopy(0, 0, kag.fore.base, 0, 0, scWidth, scHeight);
		}
		snapshotLockCount ++;
	}

	function unlockSnapshot()
	{
		// スナップショットのロックを解除する
		if(snapshotLockCount == 0)
			throw new Exception("snapshotLockCount がアンダーフローしました");
		snapshotLockCount --;
		if(snapshotLockCount == 0)
		{
			if(snapshotLayer !== void)
				invalidate snapshotLayer, snapshotLayer = void;
		}
	}

	function calcThumbnailSize()
	{
		// サムネイルのサイズを計算する
		// 横幅は 133 に
		var ratio = scHeight / scWidth;
		var w = thumbnailWidth;
		var h = (int)(w * ratio);

		// サムネイル用ビットマップのサイズを計算
		// サムネイル用画像は 256 色 BMP または 24bit フルカラー BMP
		var size;
		if (thumbnailDepth == 8)
		  size = ((((w - 1) >> 2) + 1) << 2) * h + 1024 + 54;
		else
		  size = (((w * 3 + 3) >> 2) << 2) * h + 54;

		return %[width : w, height : h, size : size];
	}

	function freeSnapshot()
	{
		// スナップショットを強制的に破棄し、snapshotLockCount を 0 に設定する
		snapshotLockCount = 0;
		if(snapshotLayer !== void)
			invalidate snapshotLayer, snapshotLayer = void;
	}

    /**
     * 保存用追加情報の登録
     */
    function addBookMarkInfo(name, value) {
        if (pcflags.bookMarkInfo === void) {
            pcflags.bookMarkInfo = %[];
        }
        pcflags.bookMarkInfo[name] = value;
    }

	function saveBookMarkToFile(fn, savehist = true)
	{
        // ファイル fn に栞を保存する
        if(readOnlyMode) return false;
        pcflags.storeTime = (new Date()).getTime(); // 日付を保存
        pcflags.playTime = playTime + pcflags.storeTime - playStartTime;
        
		// セーブデータをまとめる
		var data = %[];
		data.id = saveDataID;
		data.core = pcflags;
		data.user = pflags;
		if(savehist) data.history = historyOfStore;

		if(saveThumbnail)
		{
			// サムネイルを保存
			lockSnapshot();
			try
			{
				// サムネイルのサイズまで縮小
				var size = calcThumbnailSize();
				var tmp = new Layer(this, primaryLayer);
				try
				{
					tmp.setImageSize(size.width, size.height);
					tmp.face = dfAlpha;
					tmp.stretchCopy(0, 0, size.width, size.height, snapshotLayer,
						0, 0, snapshotLayer.imageWidth, snapshotLayer.imageHeight, stLinear);
					/*
					// サムネイル画像をセピア調にして保存する場合はコメントアウトを解除
					tmp.doGrayScale();
					tmp.adjustGamma(
									1.3, 0, 255,  // R gamma, floor, ceil
									1.0, 0, 255,  // G gamma, floor, ceil
									0.8, 0, 255); // B gamma, floor, ceil
					*/
					try
					{
						// サムネイルを保存
						tmp.saveLayerImage(fn, "bmp" + thumbnailDepth);

						// データを保存
						var mode = saveDataMode;
						mode += "o" + size.size; // モード文字列に 書き込みオフセットを指定
						(Dictionary.saveStruct incontextof data)(fn, mode);
					}
					catch(e)
					{
						invalidate tmp;
						unlockSnapshot();
						System.inform("ファイルに保存できません (ファイルを開けないか、"
							"書き込み禁止です)");
                        readOnlyMode = true;
						return false;
					}
				}
				catch(e)
				{
					invalidate tmp;
					throw e;
				}
				invalidate tmp;
			}
			catch(e)
			{
				unlockSnapshot();
				throw e;
			}
			unlockSnapshot();
		}
		else
		{
			// 通常のファイルに保存
			try
			{
				(Dictionary.saveStruct incontextof data)(fn, saveDataMode);
			}
			catch(e)
			{
				System.inform("ファイルに保存できません (ファイルを開けないか、"
					"書き込み禁止です)");
                readOnlyMode = true;
                return false;
			}
		}

		return true;
	}

	function saveBookMark(num, savehist = true)
	{
		// 栞番号 num に栞を保存する
		if(readOnlyMode) return false;
		if(bookMarkProtectedStates[num]) return false;

        var ret = saveBookMarkToFile(getBookMarkFileNameAtNum(num), savehist);
		if(ret)
		{
            // メニュー / bookMarkNames / bookMarkDates を更新
            getBookMarkInfoFromData(pcflags, num);
		}
		return ret;
	}

	function getBookMarkInfoFromData(dic, num)
	{
        // 辞書配列 dic から栞のページ名と日付を読み出し、
		// bookMarkDates[num] や bookMarkNames[num] に設定する
		if(num < numBookMarks)
		{
            bookMarkNames[num] = dic.currentPageName;
            var date = new Date();
            date.setTime(dic.storeTime);
            if (bookMarkDateSecond) {
                date = "%04d/%02d/%02d %02d:%02d:%02d".sprintf(
                    date.getYear(), date.getMonth() + 1, date.getDate(),
                    date.getHours(), date.getMinutes(), date.getSeconds() );
            } else {
                date = "%04d/%02d/%02d %02d:%02d".sprintf(
                    date.getYear(), date.getMonth() + 1, date.getDate(),
                    date.getHours(), date.getMinutes() );
            }
            bookMarkDates[num] = date;
            bookMarkStorages[num]  = dic.currentStorage;
            bookMarkPlayTimes[num] = dic.playTime;
            bookMarkInfos[num]     = dic.bookMarkInfo;
            setBookMarkMenuCaptions();
			saveSystemVariables();
		}
	}

    function readBookMarkFromFile(fn)
    {
        try {
            if (Storages.isExistentStorage(fn)) {
                var modestr;
                if(saveThumbnail) {
                    // 指定オフセットからデータを読み込む
                    modestr += "o" + calcThumbnailSize().size;
                }
                var data = Scripts.evalStorage(fn, modestr);
                if (data.id == saveDataID) {
                    return data;
                }
            }
        } catch(e) {
        }
        return %[];
    }

    function loadBookMarkFromFile(fn, loaduser = true)
	{
		// ファイル fn から栞を読み込む
		// loaduser が false の時は user を読み込まない
		try
		{
			if(!Storages.isExistentStorage(fn)) return false; //ファイルがない

			var data;

			var modestr;

			if(saveThumbnail)
			{
				// 指定オフセットからデータを読み込む
				modestr += "o" + calcThumbnailSize().size;
			}

			data = Scripts.evalStorage(fn, modestr);

			if(data.id != saveDataID)
			{
				System.inform("他のシステムのデータを読み込もうとしました", "エラー");
				return false;
			}

			pcflags = data.core;
			pcflags = %[] if pcflags === void;
			if(loaduser)
			{
				pflags = data.user;
				pflags = %[] if pflags === void;
			}
			else
			{
				(Dictionary.assignStruct incontextof pflags)(flags);
			}
			historyOfStore = data.history;
			historyOfStore = [] if historyOfStore === void;
		}
		catch(e)
		{
			System.inform("栞を読み込めないか、栞が"
				"壊れているか、あるいは他の形式の栞データ"
				"です(" + e.message + ")", "エラー");
			return false;
		}
		restoreFlags();
        clearPlayTime(pcflags.playTime);
        return true;
	}

	function loadBookMark(num, loaduser = true)
	{
		// 栞番号 num からデータを読み出す
		return loadBookMarkFromFile(getBookMarkFileNameAtNum(num), loaduser);
	}

    function readBookMark(num)
	{
        // 栞番号 num からデータのみを読み出す
        return readBookMarkFromFile(getBookMarkFileNameAtNum(num));
	}
    
	function saveBookMarkWithAsk(num)
	{
		// 栞番号 num に栞を設定する
		// そのとき、設定するかどうかをたずねる
		if(readOnlyMode) return false;
		if(bookMarkProtectedStates[num]) return false;
		var prompt = "栞 ";
		if(num < numBookMarks) prompt += (num + 1);
		if(bookMarkDates[num] != "") // bookMarkDates が空文字の場合は栞は存在しない
			prompt += "「" + bookMarkNames[num] + "」";
		prompt += "に「"+ pcflags.currentPageName + "」をはさみますか?";

        askYesNo(prompt, "確認", saveBookMark, void, num);
        return true;
	}

	function loadBookMarkWithAsk(num)
	{
		// 栞番号 num から栞を読み出す
		// そのとき、読み出すかどうかをたずねる
		if(num < numBookMarks && bookMarkDates[num] == "") // bookMarkDates が空文字の場合は栞は存在しない
			return false;
		var prompt = "栞 ";
		if(num < numBookMarks) prompt += (num + 1);
		prompt += "「"+ bookMarkNames[num] + "」をたどりますか?";

        askYesNo(prompt, "確認", loadBookMark, void, num);
        return true;
	}

	function saveBookMarkToFileWithAsk()
	{
		// 任意のファイルに栞を保存する
		// currentPageName をファイル名として適合するように
		// 変形する
		var invalid = "\\/:,;*?\"<>!.";
		var valid = "￥／：，；＊？”＜＞！．";

		var initialname = saveDataLocation + "/";
		var through = false;
		var orgname = currentPageName;

		if(lastSaveDataNameGlobal != "")
		{
			try
			{
				initialname = Storages.extractStoragePath(lastSaveDataNameGlobal);
			}
			catch(e)
			{
				initialname = saveDataLocation + "/";
			}
		}

		if(orgname == "")
		{
			// 栞の見出しがないので
			if(lastSaveDataName == "")
				orgname = System.title; // System.title を代わりに使う
			else
				initialname = lastSaveDataName, through = true;
		}

		if(!through)
		{
			var length = orgname.length;
			for(var i = 0; i < length; i++)
			{
				var ch = orgname[i];
					var ind = invalid.indexOf(ch);
				if(ind != -1)
					initialname += valid[ind];
				else if(#ch >= 32)
					initialname += ch;
			}
		}

		// 保存するファイル名を得る
		var selectdata = %[
			title:"栞をはさむ",
			filter: [saveThumbnail ?
					"サムネイル画像付き栞データ(*.bmp)|*.bmp" :
					"栞データ(*.kdt)|*.kdt"],
			filterIndex : 1,
			name : initialname,
			initialDir : "",
			defaultExt : saveThumbnail?"bmp":"kdt",
			save : true,
		];
		if(Storages.selectFile(selectdata))
		{
			// 保存
			saveBookMarkToFile(lastSaveDataName = lastSaveDataNameGlobal = selectdata.name);
			lastSaveDataName = Storages.chopStorageExt(lastSaveDataName);
		}
	}

	function loadBookMarkFromFileWithAsk()
	{
		// 任意のファイルから栞を読み込む
		var initialdir = "";
		if(lastSaveDataNameGlobal == "")
			initialdir = saveDataLocation + "/";

		var selectdata = %[
			title:"栞をたどる",
			filter: [saveThumbnail ?
					"サムネイル画像付き栞データ(*.bmp)|*.bmp" :
					"栞データ(*.kdt)|*.kdt"],
			filterIndex : 1,
			name : lastSaveDataNameGlobal,
			initialDir : initialdir,
			defaultExt : saveThumbnail?"bmp":"kdt",
			save : false,
		];
		if(Storages.selectFile(selectdata))
		{
			loadBookMarkFromFile(lastSaveDataName = lastSaveDataNameGlobal = selectdata.name);
			lastSaveDataName = Storages.chopStorageExt(lastSaveDataName);
		}
	}


	function copyBookMark(from, to)
	{
		// 栞番号 from から栞番号 to に栞をコピーする
		if(readOnlyMode) return false;
		if(bookMarkProtectedStates[to]) return;

		var fn = getBookMarkFileNameAtNum(from);

		if(!Storages.isExistentStorage(fn)) return; //ファイルがない

		var data = Scripts.evalStorage(fn);

		fn = getBookMarkFileNameAtNum(to);

        (Dictionary.saveStruct incontextof data)(fn, saveDataMode);
        getBookMarkInfoFromData(data.core, to);
	}

	function eraseBookMark(num)
	{
		// 栞を消す
		// num < numBookMarks の時にしか動作しないようになったので注意
		if(num < numBookMarks)
		{
			if(!bookMarkProtectedStates[num])
			{
				bookMarkDates[num] = "";
				setBookMarkMenuCaptions();
			}
		}
	}

	function tempDisableStore(elm)
	{
		// 栞を一時的に保存不可能にする
		storeEnabled = true;
		if(elm.store === void)
			storeLabelPassed = false;
		else
			storeLabelPassed = !(+elm.store);
		if(elm.restore == void)
			restoreEnabled = true;
		else
			restoreEnabled = !(+elm.restore);
		setMenuAccessibleAll();
	}

	function setStoreEnabled(enabled)
	{
		// 栞メニューの有効/無効の設定
		storeEnabled = enabled;
		restoreEnabled = enabled;
		setMenuAccessibleAll();
	}

	function setStartAnchorEnabled(enabled)
	{
		// 「最初に戻る」の有効/無効の設定
		startAnchorEnabled = enabled;
		if(enabled) saveBookMark(999, false); // 999 番に保存
		setMenuAccessibleAll();
	}

	function goToStart()
	{
		// 最初に戻る
		if(!startAnchorEnabled) return;
		loadBookMark(999, false); // 栞を読み込む
	}

	function goToStartWithAsk()
	{
		// 最初に戻る(確認あり)
        askYesNo("最初に戻ります。よろしいですか ?", "確認", goToStart);
	}

	function tempSave(num)
	{
		// tempBookMarks[num] に現在の状態を保存する
		tempBookMarks[num] = %[];
		internalStoreFlags(tempBookMarks[num]);
	}

	function tempLoad(num, elm)
	{
		// tempBookMarks[num] から状態を読み込む
		internalRestoreFlags(tempBookMarks[num], false, elm);
	}

	function restoreBookMark(num, ask = true)
	{
		// KAG 2.x 互換用
		if(ask)
			return loadBookMarkWithAsk(num);
		else
			return loadBookMark(num);
	}

	function storeBookMark(num, ask = true)
	{
		// KAG 2.x 互換用
		if(ask)
			return saveBookMarkWithAsk(num);
		else
			return saveBookMark(num);
	}

	//------------------------------------------------- 未読/既読/ラベル記録 --

    function getRecordLabel(storage, label) {
        if(label != '')	{
            if(label[0] == '*') label = label.substring(1);
        }
        return Storages.chopStorageExt(Storages.extractStorageName(storage)) + '_' + label;
    }

    function getBookMarkFileNameAtLabel(storage, label) {
        var name = saveDataLocation + "/" + "auto_" + getRecordLabel(storage, label) + ".ksd";
		//dm("保存ファイル名:" + name);
        return name;
    }

    
	function setRecordLabel(storage, label)
	{
		// 現在のラベルを設定する
		if(autoRecordPageShowing)
		{
			if(label != '')
			{
				if(label[0] == '*') label = label.substring(1);
				if(label[1] == '-') return; // ローカルラベル
			}
			currentRecordName = 'trail_' + Storages.chopStorageExt(
				Storages.extractStorageName(storage)) + '_' + label;
		}
	}

	function incRecordLabel(count)
	{
        // 自動ラベルもアップする
        incAutoLabel();

        // sflags[currentRecordName]++
		if(autoRecordPageShowing)
		{
			if(currentRecordName != "")
			{
				if(count)
				{
                    if(sflags[currentRecordName] === void)
						sflags[currentRecordName] = 0;
					sflags[currentRecordName]++;
				}
				currentRecordName = "";
			}
		}
	}

	//------------------------------------------- システム全体に関係するもの --

	function setTitle(title)
	{
		// タイトルを設定
		//if(isMain) System.title = title;
		caption = title;
	}

	function setCursor(elm)
	{
		// マウスカーソルの設定
		var conv = function(variable, value)
		{
			if(value !== void)
			{
				if(!(typeof value == "String" &&
					(value.indexOf('.cur')!=-1 || value.indexOf('.ani')!=-1) ))
						value = +value;
				this[variable] = value;
			}
		} incontextof this;

		conv('cursorDefault', elm['default']); 
		conv('cursorPointed', elm.pointed);
		conv('cursorWaitingClick', elm.click);
		conv('cursorDraggable', elm.draggable);
		fore.base.setDefaultCursor(cursorDefault);
		back.base.setDefaultCursor(cursorDefault);
	}

	//---------------------------------------------------- トリガ管理(TJS用) --

	function waitTrigger(elm)
	{
		// elm.name で示されたトリガを待つ
		if((elm.canskip !== void && +elm.canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ動作中
				if(elm.onskip !== void) Scripts.eval(elm.onskip);
				return 0; // すぐに返る
			}
			conductor.wait(%[
				click : function(arg)
				{
					if(arg !== void) Scripts.eval(arg);
				} incontextof this,
				click_arg : elm.onskip,
				elm.name => function
				{
				} incontextof this
				]);
		}
		else
		{
			conductor.wait(%[
				elm.name => function
				{
				} incontextof this
				]);
		}
		return -2;
	}

	function trigger(name)
	{
		// name で示したトリガを発動する
		conductor.trigger(name);
	}

	//------------------------------------------------------- メッセージ履歴 --

	function showHistory()
	{
		// メッセージ履歴レイヤを表示する
		historyLayer.parent = fore.base; // メッセージ履歴レイヤの親も再設定
        historyLayer.absolute = 4000000;
		historyLayer.dispInit();
		historyShowing = true;
		if(typeof this.showHistoryMenuItem != "undefined")
			showHistoryMenuItem.checked = true;
		setMenuAccessibleAll();
	}

	function hideHistory()
	{
		// メッセージ履歴レイヤを非表示にする
		historyLayer.dispUninit();
		historyShowing = false;
		if(typeof this.showHistoryMenuItem != "undefined")
			showHistoryMenuItem.checked = false;
		setMenuAccessibleAll();
		lastHistoryHiddenTick = System.getTickCount();
		conductor.trigger('history'); // 'history' を送る
	}

	function setHistoryOptions(elm)
	{
		// elm からメッセージ履歴レイヤのオプションを設定する
		historyWriteEnabled = +elm.output if elm.output !== void;
		historyEnabled = +elm.enabled if elm.enabled !== void;
		if(elm.enabled !== void && !historyEnabled)
			historyLayer.clearAction();
		historyLayer.setOptions(elm); // その他のオプション
		setMenuAccessibleAll();
	}

	function showHistoryByScenario(elm)
	{
		// メッセージ履歴をシナリオ中から表示させる
		showHistory();
		conductor.wait(%[ // コンダクタを待ちに
			history : function
			{
				// やることなし
			} incontextof this
			]);
		return -2; // break
	}

    //------------------------------------------------------- 選択肢 --

    function setSelectOptions(elm)
	{
        selectLayer.setOptions(elm);
	}

    function addSelect(elm) {
		if ((elm.eval === void || elm.eval == "" || Scripts.eval(elm.eval))) {
			if (f.selectInfos == void) {
				f.selectInfos = [];
			}
			if (f.selectDoneFlag) {
				f.selectInfos.clear();
				f.selDoneStorage = void;
				f.selDoneTarget  = void;
				f.selectDoneFlag = false;
			}
			var e = %[];
			(Dictionary.assign incontextof e)(elm,false);
			f.selectInfos.add(e);
		}
	}

    /**
     * 選択肢の表示
     */
	function showSelect()
	{
		selectLayer.clearButtons();
		for (var i=0;i<f.selectInfos.count;i++) {
			selectLayer.addSelect(f.selectInfos[i]);
		}
		selectLayer.start(fore.base, 1000000);
        selectShowing = true;
        setMenuAccessibleAll();
	}

    function hideSelect() {
        if (_selectLayer !== void) {
            selectLayer.done();
            selectShowing = false;
            setMenuAccessibleAll();
        }
    }
    
    function afterSelect() {
        if (erAfterPage) {
            // 選択肢後もテキスト消去
            tagHandlers.er(%[all:true]);
        }
        if (afterauto && selectPrevAutoMode == true) {
            if(typeof this.autoModeMenuItem !== "undefined")
                autoModeMenuItem.checked = true;
            autoMode = true;
        } else if (afterskip && selectPrevSkipMode >= 3) {
            if (selectPrevSkipMode == 3) {
                skipMode = 3;
                actualChSpeed = 0;
            } else if (selectPrevSkipMode == 4) {
                if (getKeyState(VK_CONTROL)) {
                    skipMode = 4;
                    actualChSpeed = 0;
                }
            }
        }
        setMenuAccessibleAll();
    }

    //------------------------------------------------------- マップ選択肢 --

    /**
     * マップ選択肢初期化
     */
    function initMapSelect()
    {
        mapSelectLayer.init();
	}

    /**
     * マップ選択肢オプション
     */
    function setMapSelectOptions(elm)
	{
        mapSelectLayer.setOptions(elm);
	}

    /**
     * ボタン登録
     */
    function addMapSelectButton(elm) {
		mapSelectLayer.addButton(elm);
    }

    /**
     * 場所登録
     */
    function addMapSelectPosition(elm) {
        mapSelectLayer.addPosition(elm);
    }

    /**
     * 選択肢登録
     */
    function addMapSelect(elm) {
		if ((elm.eval === void || elm.eval == "" || Scripts.eval(elm.eval))) {
			mapSelectLayer.addSelect(elm);
		}
    }
    
    function showMapSelect()
	{
        mapSelectLayer.start(fore.base, 1000000);
        mapSelectShowing = true;
        setMenuAccessibleAll();
	}

    function hideMapSelect()
	{
        if (_mapSelectLayer !== void) {
            mapSelectLayer.done();
            mapSelectShowing = false;
            setMenuAccessibleAll();
        }
    }
    
    //------------------------------------------------------- 画面切り替え特殊レイヤ --

    function hideTransLayer() {
        if (_transLayer !== void) {
            transLayer.stop();
            transShowing = false;
        }
    }
    
    function layerTransBegin(elm)
	{
        hideTransLayer();
        if (elm.time === void) { elm.time = 1000; }
        if (elm.type === void) { elm.type = "wipeltor"; }
        var waitParam  = %[];
		var waitTime = void;
        if((elm.canskip === void || +elm.canskip) && clickSkipEnabled) {
            if(skipMode) {
                return 0; // すぐに返る
            }
            waitParam.click = function() {hideTransLayer();} incontextof this;
		}
        if (elm.wait !== void) {
            waitTime = +elm.time + +elm.wait;
            waitParam.timeout = function() {} incontextof this;
        } else {
            waitParam.layertrans = function() {} incontextof this;
        }
        transLayer.start(elm);
		flipTimer.enabled = true;
		transShowing = true;
        if (waitTime > 0) {
            conductor.waitWithTimeOut(waitParam, waitTime);
        } else {
            conductor.wait(waitParam);
        }
        return -2;
	}

    function layerTransEnd(elm) {
        if (!transShowing) {
            return 0;
        }
        var waitParam  = %[];
        if((elm.canskip === void || +elm.canskip) && clickSkipEnabled) {
            if(skipMode) {
                hideTransLayer();
                return 0; // すぐに返る
            }
            waitParam.click = function() {hideTransLayer();} incontextof this;
        }
        waitParam.layertrans = function() {hideTransLayer();} incontextof this;
		transLayer.start(elm, true);
		flipTimer.enabled = true;
        conductor.wait(waitParam);
        return -2;
    }
    
	//-------------------------------------------------------------- process --

	function process(file, label, countpage = true, immediate = false)
	{
        // 指定ファイル、指定ラベルから実行を開始する

        if(!usingExtraConductor) {
            incRecordLabel(countpage);
        }
		setUserSpeed();

		if(file != '')
		{
			// ファイルを読み込み
            conductor.loadScenario(file);
		}

		if(label != '')
		{
			// ラベルに移動する
			conductor.goToLabel(label);
		}

		if(isFirstProcess)
		{
			storeFlags(); // 一番最初の状態をストア
			isFirstProcess = false;
		}

        if (debugLevel >= tkdlSimple)
            dm("処理を開始します");
		inSleep = false;
		notifyRun();
		if(conductor.status != conductor.mRun) conductor.run(immediate); // 実行開始
    }

	function processGo()
	{
        // コンダクタを現在位置から実行開始させる
        if (debugLevel >= tkdlSimple)
            dm("処理を開始します");
		inSleep = false;
		notifyRun();
		conductor.run(false); // 実行開始
	}

	function processCall(file, label)
	{
		// 指定ファイル、指定ラベルを呼ぶ
		// incRecordLabel(); は呼ばないので注意

		if(file != '')
		{
			// ファイルを読み込み
			conductor.loadScenario(file);
		}

		inSleep = false;
		notifyRun();
		conductor.callLabel(label); // 実行開始
        if (debugLevel >= tkdlSimple)
            dm("処理を開始します");
		if(conductor.status != conductor.mRun) conductor.run();
	}

	//------------------------------------------------- コンダクタのイベント --

	function onConductorScenarioLoad(name)
	{
        prevSkipMode = void;
        // コンダクタが新しいシナリオファイルを読み込む前によばれる。
		// name は読み込もうとしたシナリオファイル。
		// 戻り値に文字列を返すと、それをシナリオとして
		// ファイルの代わりに使うようになるので、ここにフィルタを書くこ
		// とができる。
		// true を返すと通常のシナリオファイル読み込みとなる。
		return true;
	}


	function onConductorScenarioLoaded(name)
	{
		// コンダクタが新しいシナリオファイルを読み込んだ
		if(!usingExtraConductor) incRecordLabel(true);
        return true;
	}


	function onConductorLabel(label, page)
	{
        if (skipMode == 5) {
            cancelSkip();
        }
        // コンダクタがラベルを通過した
		if(!usingExtraConductor)
		{
            if (label !== "*autoLabelLabel") {
                incRecordLabel(true);
                autoLabelCount = 1;
            }
            setRecordLabel(conductor.curStorage, label);
		}
		setUserSpeed();
		if(!usingExtraConductor)
		{
            if (label !== "*autoLabelLabel") {
                if(!(allskip || getCurrentRead()) && skipMode < 4)
                    cancelSkip(); // 未読なのでスキップを停止
                currentStorage = conductor.curStorage;
            }
            currentLabel = label;
		}
		if(page !== void && page !== '')
		{
			if(page[0] == '&') page = Scripts.eval((page.substring(1)));
			currentPageName = page;
		}
		if(page !== void)
		{
			pushHistoryOfStore();
			stablePosibility = false;
            if (debugLevel >= tkdlVerbose) {
                dm(conductor.curStorage + " : ラベル/ページ : " + label + "/" + currentPageName);
            }
			if(usingExtraConductor) throw new Exception("右クリックサブルーチン内/extraCondutor"
				"サブルーチン内では保存可能なラベルを記述できません");
			storeFlags(), storeLabelPassed = true, setMenuAccessibleAll();
			if(recordHistoryOfStore == 1) // 1 : 保存可能なラベルごと
				setToRecordHistory();

            if (autoLabelSaveMode) {
                saveBookMarkToFile(getBookMarkFileNameAtLabel(conductor.curStorage, label));
            }

        }

        if (label.substring(0,12) == "*kaisouBegin") {

            // 回想用の記録処理を行う
            var num = (int)label.substring(12);
            saveBookMark(recollectionBookmark + num, false);

        } else if (label.substring(0,10) == "*kaisouEnd") {

            // すぐ既読にする
            if(!usingExtraConductor) incRecordLabel(true);

            // 回想終了
            if (label == recollectionEndLabel) {
                endRecollection();
            }
            
        }
		return true;
	}

	function onConductorJump(elm)
	{
        // コンダクタで jump タグを処理するとき
        closeDialog();
        if(!usingExtraConductor) incRecordLabel(elm.countpage === void || +elm.countpage);
		return true;
	}

	function onConductorCall(elm)
	{
		// コンダクタが call タグを処理するとき
		if(!usingExtraConductor) incRecordLabel(elm.countpage !== void && +elm.countpage);
		return true;
	}

	function onConductorReturn(elm)
	{
		// コンダクタが return タグを処理するとき
		if(!usingExtraConductor) incRecordLabel(elm.countpage === void || +elm.countpage);
		if(conductor === extraConductor)
		{
			// extraConductor サブルーチン用のコンダクタから呼ばれている
			if(conductor.callStackDepth == 1)
			{
				// つまり、最終の return が実行されたと言うこと
				dm("extraConductor サブルーチンから戻ります ...");
				var run;
				if(elm.storage !== void || elm.target !== void) run = true; else run = false;
				returnExtraConductor(run);
				if(elm.storage !== void) conductor.loadScenario(elm.storage);
				if(elm.target !== void) conductor.goToLabel(elm.target);
				setRecordLabel(currentStorage = conductor.curStorage, currentLabel = conductor.curLabel);
				if(run)
				{
					notifyRun();
					conductor.run();
				}
				isLeavePeriodEvent = false;
				if(elm.storage !== void || elm.target !== void)
				{	// returnで元の位置以外に戻る時はピリオドイベントをクリアする。
					holdPeriodEventQueue.clear();
					isWaitPeriodEvent = false;
				}
				if( isWaitPeriodEvent == true )
				{	// [wp]でピリオドイベント待ちをしている時のみ、トリガーする
					fireMoviePeriodFromQueue();
				}
				return false; // return は実行しない
			}
		}
		return true;
	}
	function purgeMoviePeriod()
	{
		isLeavePeriodEvent = false;
		holdPeriodEventQueue.clear();
		isWaitPeriodEvent = false;
		waitedPeriodEventStorageName = void;
	}
	function fireMoviePeriodFromQueue()
	{
		var retVal = false;
		if( holdPeriodEventQueue.count > 0 )
		{
			if( waitedPeriodEventStorageName == conductor.curStorage && conductor == mainConductor )
			{
				for( var i = 0; i < holdPeriodEventQueue.count; i++ )
				{
					conductor.trigger( holdPeriodEventQueue[i] );
					retVal = true;
				}
			}
			holdPeriodEventQueue.clear();
		}
		return retVal;
	}

	function onConductorAfterReturn()
	{
		// コンダクタが return タグを実行した後
		if(!usingExtraConductor)
		{
			setRecordLabel(currentStorage = conductor.curStorage, currentLabel = conductor.curLabel);
		}
		setUserSpeed();
		if(!usingExtraConductor)
		{
            if(!(allskip || getCurrentRead()) && skipMode < 4)
                cancelSkip(); // 未読なのでスキップを停止
		}
    }

	function onConductorScript(script, scriptname, lineofs)
	{
		// iscript タグ
		try
		{
			Scripts.exec(script, scriptname, lineofs);
		}
		catch(e)
		{
			throw new Exception(scriptname + " の 行 " + lineofs + " から始まる"
				" iscript ブロックでエラーが発生しました。"
				"\n( 詳細はコンソールを参照してください )\n" + e.message);
		}
		return true;
	}

    var unknownHandler;
    
	function onConductorUnknownTag(tagname, elm)
	{
        var ret;
        if (unknownHandler === void || (ret = unknownHandler(tagname,elm)) === void) {
            // 不明なタグがあった場合
            throw new Exception("タグ/マクロ \"" + tagname + "\" は存在しません");
        } else {
            return ret; // この戻り値は、各タグハンドラが返す物とおなじ
        }
	}

	//----------------------------------------------------------- stable/run --

	function notifyStable()
	{
		// システムが安定(クリック待ち/停止)したときに、ハンドラを呼ぶ
		if(!inStable)
		{
			inStable = true;
			var handlers = stableHandlers;
			for(var i = handlers.count-1; i>=0; i--)
				handlers[i]();

			// stableHook
			forEachEventHook('onStableStateChanged',
				function(handler, f) { handler(f.stable); } incontextof this,
				%[stable:true]);
        }
	}

	function notifyRun()
	{
		// システムが走り始めたときに、ハンドラを呼ぶ
		if(inStable)
		{
			inStable = false;
			var handlers = runHandlers;
			for(var i = handlers.count-1; i>=0; i--)
				handlers[i]();

			// runHook
            forEachEventHook('onStableStateChanged',
				function(handler, f) { handler(f.stable); } incontextof this,
				%[stable:false]);
            
			if(autoMode) hideMouseCursor();
		}
	}

	function defaultStableHandler()
	{
		// デフォルトの stable ハンドラ
		setMenuAccessibleAll();
	}

	function defaultRunHandler()
	{
		// デフォルトの run ハンドラ
		hideHistory();
		hideClickGlyphs();
		showMessageLayerByUser();
		setMenuAccessibleAll();
	}

	//----------------------------------------------------------- 文字列入力 --

	var inputTemp;
	function inputString(elm)
	{
		// 文字列を入力する
		var name = elm.name;
		var initial = Scripts.eval(name);
		var res = System.inputString(elm.title, elm.prompt, initial);
		if(res !== void)
		{
			// name に res を代入する
			inputTemp = res;
			Scripts.eval(("(" + name + ") = kag.inputTemp"));
		}
	}

	//-------------------------------------------------- extraConductor 処理 --

	function callExtraConductor(storage, label, onreturn)
	{
		// extraConductor を使ってサブルーチンを呼び出す
		onExtraConductorReturn = onreturn;
		inSleepBeforeExtraConductor = inSleep; // inSleep 保存
		storeMessageLayerSelProcessLock(); // メッセージレイヤの storeSelProcessLock を呼ぶ
        if (_selectLayer !== void) {
            selectLayer.lockFocus();
        }
        if (_mapSelectLayer !== void) {
            mapSelectLayer.lockFocus();
        }
        conductor = extraConductor; // コンダクタを切り替える
		(Dictionary.assign incontextof extraConductor.macros)(mainConductor.macros);
			// マクロはコピー
		usingExtraConductor = true;
		if(storage == '')
		{
			// ストレージ指定がないので現在のストレージを読み込ませる
			storage = mainConductor.curStorage;
		}

		// 呼び出す
		conductor.clearCallStack();
		processCall(storage, label);
	}

	function returnExtraConductor(run)
	{
		// extraConductor のサブルーチンから戻る
		// run が true の場合は 待機状態の復帰は行わない

		conductor.sleep(); // 停止
		conductor.interrupt();
			// interrupt は コンダクタのイベント内でコンダクタの実行を
			// 停止させるためのメソッド
		conductor = mainConductor; // コンダクタを切り替え
		(Dictionary.assign incontextof mainConductor.macros)(extraConductor.macros);
			// マクロはコピー
		usingExtraConductor = false;
		if(!run)
		{	restoreClickGlyphState(); // クリック待ち記号の復帰
			inSleep = inSleepBeforeExtraConductor; // inSleep 復帰
			notifyStable();
		}
        if (_mapSelectLayer !== void) {
            mapSelectLayer.unlockFocus();
        }
        if (_selectLayer !== void) {
            selectLayer.unlockFocus();
        }
        restoreMessageLayerSelProcessLock(); // メッセージレイヤの restoreSelProcessLock を呼ぶ
		setMenuAccessibleAll();
		cancelSkip();

		if(onExtraConductorReturn !== void) onExtraConductorReturn();
	}

	//------------------------------------------------------- 右クリック処理 --

	function setRightClickOptions(elm)
	{
		// 右クリックのオプションを設定する
		rightClickEnabled = +elm.enabled if elm.enabled !== void;
		if(elm.call !== void)
		{
			rightClickCall = +elm.call;
			if(rightClickCall) rightClickJump = false;
		}
		if(elm.jump !== void)
		{
			rightClickJump = +elm.jump;
			if(rightClickJump) rightClickCall = false;
		}
		rightClickTarget = elm.target if elm.target !== void;
		rightClickStorage = elm.storage if elm.storage !== void;
		if(elm.name !== void)
		{
			if(typeof this.rightClickMenuItem != "undefined")
			{
				rightClickName = elm.name;
				if(rightClickName == "default")
					rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickDefaultName;
				else
					rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickName;
			}
		}
	}

	function callRightClickSubRoutine()
	{
		isLeavePeriodEvent = true;

		// 右クリックサブルーチンを呼ぶ
		if(typeof this.rightClickMenuItem != "undefined")
		{
			rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickDefaultName;
		}

		callExtraConductor(rightClickStorage, rightClickTarget, restoreFromRightClick);

		lockMessageLayerSelProcess(); // 選択肢ロック
	}

	function restoreFromRightClick()
	{
		// 右クリックサブルーチンから抜けるときに呼ばれる
		if(typeof this.rightClickMenuItem != "undefined")
		{
			if(rightClickName == "default")
				rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickDefaultName;
			else
				rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickName;
		}
	}

	function setConductorToMain()
	{
		// restore の時に呼ばれ、コンダクタを main に切り替える
		if(usingExtraConductor)
		{
			extraConductor.sleep();
			extraConductor.interrupt();
			conductor= mainConductor;
			usingExtraConductor = false;
		}
	}

	function jumpToRightClickTarget()
	{
		process(rightClickStorage, rightClickTarget);
	}

	function onPrimaryRightClick()
	{
		// プライマリレイヤで右クリックされたときに呼ばれる
		if(!callHook(rightClickHook))
		{
			if(getKeyState(VK_LBUTTON))
			{
//				enterAutoMode();
				return;
			}
			if(!rightClickEnabled) return;
			if(inStable)
			{
				if(rightClickJump)
					jumpToRightClickTarget();
				else if(rightClickCall && conductor == mainConductor)
					callRightClickSubRoutine();
				else
					switchMessageLayerHiddenByUser();
			}
			setMenuAccessibleAll();
		}
	}

	//------------------------------------------------------- 前景レイヤ処理 --

    function allocateCharacterLayers(num, reorder=true, level=0)
	{
		// 前景レイヤ数を num に設定する
		if(fore.layers.count > num)
		{
			// レイヤが減る
			for(var i = num; i<fore.layers.count; i++)
			{
				invalidate fore.layers[i];
				invalidate back.layers[i];
			}
			fore.layers.count = num;
			back.layers.count = num;
		}
		else if(fore.layers.count < num)
		{
            // レイヤが増える
            if (reorder) {
                for(var i = fore.layers.count; i<num; i++)
                {
                    fore.layers[i] = new CharacterLayer(this, fore.base, "表前景レイヤ" + i, i, level);
                    back.layers[i] = new CharacterLayer(this, back.base, "裏前景レイヤ" + i, i, level);
                    fore.layers[i].setCompLayer(back.layers[i]);
                    back.layers[i].setCompLayer(fore.layers[i]);
                }
                reorderLayers(true, false);
            } else {
                // 該当レベルで最大の index 値をさがす
                var foreindex = (level + 1) * 100000;
                var backindex = (level + 1) * 100000;
                for (var i=0; i<fore.layers.count;i++) {
                    if (fore.layers[i].level == level && fore.layers[i].absolute > foreindex) {
                        foreindex = fore.layers[i].absolute;
                    }
                    if (back.layers[i].level == level && back.layers[i].absolute > backindex) {
                        backindex = back.layers[i].absolute;
                    }
                }
                foreindex += 100;
                backindex += 100;
                
                for(var i = fore.layers.count; i<num; i++) {
                    fore.layers[i] = new CharacterLayer(this, fore.base, "表前景レイヤ" + i, i, level);
                    back.layers[i] = new CharacterLayer(this, back.base, "裏前景レイヤ" + i, i, level);
                    fore.layers[i].setCompLayer(back.layers[i]);
                    back.layers[i].setCompLayer(fore.layers[i]);
                    fore.layers[i].absolute = foreindex;
                    back.layers[i].absolute = backindex;
                    foreindex += 100;
                    backindex += 100;
                }
            }
        }
		numCharacterLayers = num;
	}

	//------------------------------------------------- メッセージレイヤ処理 --

	function allocateMessageLayers(num, setdefaultfont = true)
	{
		// メッセージレイヤ数を num に設定する
		if(fore.messages.count > num)
		{
			// レイヤが減る
			for(var i = num; i<fore.messages.count; i++)
			{
				if(current == fore.messages[i] || current == back.messages[i])
					current = fore.messages[0], currentNum = 0, currentPage = 0;
				invalidate fore.messages[i];
				invalidate back.messages[i];
			}
			fore.messages.count = num;
			back.messages.count = num;
		}
		else if(fore.messages.count < num)
		{
			// レイヤが増える
			for(var i = fore.messages.count; i<num; i++)
			{
				fore.messages[i] = new MessageLayer(this, fore.base, "表メッセージレイヤ" + i, i, true);
				back.messages[i] = new MessageLayer(this, back.base, "裏メッセージレイヤ" + i, i, true);
				fore.messages[i].setCompLayer(back.messages[i]);
				back.messages[i].setCompLayer(fore.messages[i]);
				fore.messages[i].clear();
				back.messages[i].clear();
			}
			reorderLayers(false, true);
			if(setdefaultfont) setMessageLayerUserFont();
		}
		numMessageLayers = num;
	}

	function setCurrentMessageLayer(elm)
	{
		// 現在のメッセージレイヤを設定
		var page = getMessageLayerPageFromElm(elm);
		var num = getMessageLayerNumberFromElm(elm);
		currentNum = num;
		currentPage = page;
		if(page) current = back.messages[num]; else current = fore.messages[num];
		currentWithBack = +elm.withback if elm.withback !== void;
	}

	function setMessageLayerPosition(elm)
	{
		// 現在のメッセージレイヤの位置、属性を設定
		var layer = getMessageLayerObjectFromElm(elm);
		elm.setPosition(elm);
	}

	function clearMessageLayers(resetcurrent)
	{
		// すべてのメッセージレイヤのクリア
		// ct タグから呼ばれる
		// resetcurrent が true の場合は現在のメッセージレイヤを
		// 表0に設定する

		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].clear(true);
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].clear(true);
		if(resetcurrent)
		{
			currentNum = 0;
			currentPage = 0;
			current = fore.messages[0];
			currentWithBack = false;
		}
	}

	function lockMessageLayerSelProcess()
	{
		// すべてのメッセージレイヤに 選択とprocessを禁止させる
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].setSelProcessLock(true);
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].setSelProcessLock(true);
	}

	function unlockMessageLayerSelProcess()
	{
		// すべてのメッセージレイヤの選択を許可する
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].setSelProcessLock(false);
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].setSelProcessLock(false);
	}

	function setMessageLayerUserFont()
	{
		// すべてのメッセージレイヤの defaultAntialiased と
		// userFace を設定する
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--)
			messages[i].defaultAntialiased = chDefaultAntialiased,
			messages[i].userFace = chDefaultFace,
			messages[i].resetNameLayerFont();
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--)
			messages[i].defaultAntialiased = chDefaultAntialiased,
			messages[i].userFace = chDefaultFace,
			messages[i].resetNameLayerFont();
	}

	function storeMessageLayerSelProcessLock()
	{
		// すべてのメッセージレイヤの storeSelProcessLock を呼び出す
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].storeSelProcessLock();
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].storeSelProcessLock();
	}

	function restoreMessageLayerSelProcessLock()
	{
		// すべてのメッセージレイヤの restoreSelProcessLock を呼び出す
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].restoreSelProcessLock();
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].restoreSelProcessLock();
	}

	function setMessageLayerHiddenState(b)
	{
		var layers;
		layers = fore.messages;
        for(var i = layers.count-1; i >= 0; i--) layers[i].setHiddenStateByUser(b);
        layers = fore.layers;
		for(var i = layers.count-1; i >= 0; i--) layers[i].setHiddenStateByUser(b);

        selectLayer.setHiddenStateByUser(b);
        //mapSelectLayer.setHiddenStateByUser(b);
        
		// プラグインを呼ぶ
		forEachEventHook('onMessageHiddenStateChanged',
			function(handler, f) { handler(f.hidden); } incontextof this,
			%[hidden:b]);
	}

    // メッセージレイヤ状態を同期
    function syncMessageLayer() {
        var messages = back.messages;
        for(var i = messages.count-1; i >= 0; i--) messages[i].assignComp();
    }
    
	function hideMessageLayerByUser()
	{
        // メッセージレイヤを一時的に隠す
		if(messageLayerHiding) return;
		setMessageLayerHiddenState(true);
		if(typeof this.rightClickMenuItem !== "undefined")
			rightClickMenuItem.checked = true;
		messageLayerHiding = true;
		fore.base.cursor = cursorWaitingClick;
		setMenuAccessibleAll();
	}

	function showMessageLayerByUser()
	{
        // 一時的に隠されていたメッセージレイヤを元に戻す
		if(!messageLayerHiding) return;
        setMessageLayerHiddenState(false);
		if(typeof this.rightClickMenuItem !== "undefined")
			rightClickMenuItem.checked = false;
		messageLayerHiding = false;
		conductor.trigger('message'); // 'message' を送る
		if(clickWaiting)
			fore.base.cursor = cursorWaitingClick;
		else
			fore.base.cursor = cursorDefault;
		setMenuAccessibleAll();
	}

	function switchMessageLayerHiddenByUser()
	{
		// メッセージレイヤの非表示/表示を切り替える
		if(messageLayerHiding) showMessageLayerByUser(); else hideMessageLayerByUser();
	}

	function hideMessageLayerByScenario(elm)
	{
		// シナリオからメッセージを一時的に隠す
		hideMessageLayerByUser();
		conductor.wait(%[ // コンダクタを待ちに
			message : function
			{
				// やることなし
			} incontextof this
			]);
        notifyStable();
		return -2; // break
	}

    function setCurrentMessageLayerVisibleFast(page, visible) {
        var base = page == 0 ? fore : back;
        var msg = base.messages[currentNum];
        msg.visible = visible;
        if (!visible) {
            msg.clear(true);
        }
        forEachEventHook('onCurrentMessageVisibleChanged',
                         function(handler, f) { handler(f.hidden, f.page); } incontextof this,
                         %[hidden:!visible, page:page]);
    }

    /**
     * 現在のメッセージ窓の表示状態の変更
     * @param visible
     * @return 処理の待ちが必要な場合は true を返す
     */
    function setCurrentMessageLayerVisible(visible) {

		if (fore.messages[currentNum].visible != visible) {
			var fadeTime = messageFadeTime * drawspeed;
            if (!skipMode && fadeTime > 0) {

                // 裏は先に消しておく。そうしないと msgvisible がとんでしまって
                // せっかくの待ちが解除される
                back.messages[currentNum].visible = visible;
                if (!visible) {
                    back.messages[currentNum].clear(true);
                }
                
                // 処理待ち
                var layer = fore.messages[currentNum];
                layer.setVisibleTime(visible, fadeTime);

                if (visible) {
                    conductor.wait(%[
                    click : function(layer) {
                        updateBeforeCh = 1;
                        layer.fadeDone();
                    } incontextof this,
                    'click_arg' => layer,
                    msgvisible : function() {
                        updateBeforeCh = 1;
                    } incontextof this
                        ]);
                } else {
                    conductor.wait(%[
                    click : function(layer) {
                        updateBeforeCh = 1;
                        layer.fadeDone();
                        layer.clear(true);
                    } incontextof this,
                    'click_arg' => layer,
                    msgvisible : function(layer) {
                        updateBeforeCh = 1;
                        layer.clear(true);
                    } incontextof this,
                    'msgvisible_arg' => layer,
                        ]);
                }
                forEachEventHook('onCurrentMessageVisibleChanged',
                                 function(handler, f) { handler(f.hidden, f.page); } incontextof this,
                                 %[hidden:!visible, page:0]);
                
                return true;
            } else {
                fore.messages[currentNum].visible = visible;
                back.messages[currentNum].visible = visible;
                forEachEventHook('onCurrentMessageVisibleChanged',
                                 function(handler, f) { handler(f.hidden, f.page); } incontextof this,
                                 %[hidden:!visible, page:0]);
                if (!visible) {
                    fore.messages[currentNum].clear(true);
                    back.messages[currentNum].clear(true);
                }
            }
        }
        return false;
    }

	function selectFont()
	{
		// フォントを選択する
		fore.base.font.face = chDefaultFace;
		fore.base.font.height = -20;
		var flags = fsfSameCharSet | fsfNoVertical | fsfTrueTypeOnly | fsfUseFontFace;
		if(showFixedPitchOnlyInFontSelector) flags |= fsfFixedPitch;
		if(fore.base.font.doUserSelect(flags, "フォントの選択",
			"フォントを選択してください", "ABCDEFGHIあいうえお亜胃宇絵御"))
		{
			chDefaultFace = fore.base.font.face;
			setMessageLayerUserFont();
		}
	}

	function mapPrerenderedFont(storage)
	{
		// レンダリング済みフォントを現在の操作対象のレイヤに選択
		// されているフォントにマッピングする
		current.decideSizeChange();
		current.lineLayer.font.mapPrerenderedFont(storage);
	}

    //------------------------------------------------- レイヤを正しい順序に --

    // 指定したレイヤを指定したレベルに移動する
    function toLevel(n, newlevel, base) {
        if (base === void) {
            base = fore;
        }
        if (n === void) {
            return;
        }
        n = +n;
        newlevel = +newlevel;
        if (n < base.layers.count) {
            
            var level = base.layers[n].level;
            if (level == newlevel) {
                return;
            }
            var index = base.layers[n].absolute;
            // もともといたレベルの調整
            for (var i = 0; i<base.layers.count; i++) {
                if (i != n && base.layers[i].level == level) {
                    if (base.layers[i].absolute > index) {
                        base.layers[i].absolute -= 100;
                    }
                }
            }
            // 新規レベルの一番上にもっていく
            var newindex = (newlevel + 1) * 100000;
            for (var i = 0; i<base.layers.count; i++) {
                if (i != n && base.layers[i].level == newlevel && base.layers[i].absolute > newindex) {
                    newindex = base.layers[i].absolute;
                }
            }
            newindex += 100;
            //dm("レベル設定:" + newlevel + ":" + newindex);
            base.layers[n].absolute = newindex;
            base.layers[n].level = newlevel;
        }
    }
    
    // 同じレベルのレイヤの中で最前列に移動
    function toFront(n, base) {
        if (base === void) {
            base = fore;
        }
        if (n !== void && n < base.layers.count) {
            var level = base.layers[n].level;
            var index = base.layers[n].absolute;
            var maxindex = index;
            for(var i = 0; i<base.layers.count; i++) {
                if (i != n && base.layers[i].level == level) {
                    if (base.layers[i].absolute > maxindex) {
                        maxindex = base.layers[i].absolute;
                    }
                    if (base.layers[i].absolute > index) {
                        base.layers[i].absolute -= 100;
                    }
                }
            }
            base.layers[n].absolute = maxindex;
        }
    }

    // レイヤを最後列に
    function toBack(n, base) {
        if (base === void) {
            base = fore;
        }
        if (n !== void && n < base.layers.count) {
            var level = base.layers[n].level;
            var index = base.layers[n].absolute;
            var minindex = index;
            for(var i = 0; i<base.layers.count; i++) {
                if (i != n && base.layers[i].level == level) {
                    if (base.layers[i].absolute < minindex) {
                        minindex = base.layers[i].absolute;
                    }
                    if (base.layers[i].absolute < index) {
                        base.layers[i].absolute += 100;
                    }
                }
            }
            base.layers[n].absolute = minindex;
        }
    }

    function reorderLayers(ch=true, msg=true)
	{
        // ステージレイヤ
        fore.stage.absolute = 100;
        back.stage.absolute = 100;

        // レイヤを正しい順序に並び替える
        if (ch) {
            var indexes = %[];
            for(var i = 0; i<fore.layers.count; i++)
            {
                var level = fore.layers[i].level;
                var index = indexes[level];
                if (index === void) {
                    index = (level + 1) * 100000;
                }
                fore.layers[i].absolute = index;
                back.layers[i].absolute = index;
                index += 100;
                indexes[level] = index;
            }
        }

        // イベントレイヤ
        fore.event.absolute = 6 * 100000 - 100;
        back.event.absolute = 6 * 100000 - 100;

        if (msg) {
            var index = 1000000;
            for(var i = 0; i<fore.messages.count; i++)
            {
                fore.messages[i].absolute = index;
                back.messages[i].absolute = index;
                index += 1000;
            }
        }

		historyLayer.absolute = 4000000;
	}

	//--------------------------------------------- 属性->レイヤオブジェクト --

	function getLayerFromElm(elm, prefix = '')
	{
		// elm に指定されている page と layer 属性から、該当する
		// オブジェクトを返す
		// prefix には、属性名の前につけるプレフィクスを指定する
		var base;
		if(elm[prefix + 'page'] == 'back') base = back; else base = fore;
		var layer = elm[prefix + 'layer'];
		if(layer == 'base') return base.base; // 背景
		if(layer == 'stage') return base.stage; // 舞台
		if(layer == 'event') return base.event; // イベント
		if(layer[0] == 'm')
		{
			// message? ( ? = 数値 )
			// ここではあまり厳密にエラーチェックはしない
			if(layer == 'message') return base.messages[currentNum];
			return base.messages[+layer.substr(7)];
		}
		return base.layers[+layer];
	}

	function getLayerPageFromElm(elm, backlay)
	{
		// getLayerFromElm と似ているが、page 属性まではみない。
		// backlay が true のときは裏、false の時は表のレイヤを返す。
		// elm.layer が void の時は背景レイヤを帰す
		var base = backlay?back:fore;
		var layer = elm.layer;
		if(layer === void || layer == 'base') return base.base; // 背景
		if(layer == 'stage') return base.stage; // 舞台
		if(layer == 'event') return base.event; // イベント
        if(layer[0] == 'm')
		{
			if(layer == 'message') return base.messages[currentNum];
			return base.messages[+layer.substr(7)];
		}
		return base.layers[+layer];
	}

	function getMessageLayerPageFromElm(elm)
	{
		// elm から該当する表/裏画面のメッセージレイヤ配列を返す
		if(elm.page == 'back') return 1; else return 0;
	}

	function getMessageLayerNumberFromElm(elm)
	{
		// elm の layer 属性の示すメッセージレイヤ番号を返す
		var layer = elm.layer;
		if(layer === void || layer == 'message') return currentNum;
		return +layer.substr(7);
	}

	function getMessageLayerObjectFromElm(elm)
	{
		// elm の layer 属性の示すメッセージレイヤを返す
		var page = elm.page;
		var layer = elm.layer;
		if(page === void && layer === void) return current;
		var base;
		if(page == 'back') base = back; else base = fore;
		if(layer === void || layer == 'message') return base.messages[currentNum];
		return base.messages[+layer.substr(7)];
	}

	function getMessageLayerObjectFromPageAndNumber(page, num)
	{
		return (page?back:fore).messages[num];
	}

	//----------------------------------------------------- レイヤコピー関連 --

	function backupLayer(elm, toback)
	{
        // レイヤの表←→裏間のコピーを行う
		// toback = true の場合は表→裏、false の場合は裏→表
		if(elm.layer !== void)
		{
			// レイヤ指定がある
			getLayerPageFromElm(elm, toback).assignComp(); // 対のレイヤの内容をコピー
		}
		else
		{
			// レイヤ指定が無いので全部のレイヤをコピー
			var base = toback ? back:fore;
			base.base.assignComp();
            base.stage.assignComp();
            base.event.assignComp();
            var layers = base.layers, messages = base.messages;
			for(var i = layers.count-1; i >= 0; i--) layers[i].assignComp();
			for(var i = messages.count-1; i >= 0; i--) messages[i].assignComp();

			forEachEventHook('onCopyLayer',
				function(handler, f) { handler(f.toback); } incontextof this,
				%[toback:toback]);
		}
	}

	function copyLayer(elm)
	{
		// elm に従って同種のレイヤ間のコピーを行う
		var src = getLayerFromElm(elm, 'src');
		var dest = getLayerFromElm(elm, 'dest');
		dest.assign(src);
	}

	//--------------------------------------------------- アニメーション関連 --

	function onAnimationStopped(name, segment)
	{
		// アニメーションが停止した
		conductor.trigger('anim:' + name + ':' + segment);
	}

	function waitAnimation(elm)
	{
		// アニメーションの停止をまつ
		var layer = getLayerFromElm(elm);
		var seg = +elm.seg;
		if(!layer.canWaitAnimStop(seg)) return 0; // アニメーションの停止を待つ
		conductor.wait(%[
			'anim:' + layer.name + ':' + seg => function
			{
			} incontextof this
			]);
		return -2;
	}

	//--------------------------------------------------- トランジション関連 --

	function onLayerTransitionCompleted(layer, dest, src)
	{
		// レイヤでトランジションが終了したときに呼ばれる
		conductor.trigger('trans'); // 'trans' を送る
    }

	function waitTransition(elm)
	{
        // トランジションを待つ
		if(transCount == 0) return 0; // トランジションを待てない
		if((elm.canskip === void || +elm.canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ動作中
				stopAllTransitions();
				return 0; // トランジションを停止させてすぐに返る
			}
			conductor.wait(%[
				click : function
				{
					updateBeforeCh = 1;
					stopAllTransitions(); // すべてのトランジションは停止
				} incontextof this,
				trans : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		else
		{
			conductor.wait(%[
				trans : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		return -2;
	}

	function stopAllTransitions()
	{
        // すべてのトランジションを停止させる
		var layers, messages;
		fore.base.stopTransition();
        fore.stage.stopTransition();
        fore.event.stopTransition();
        layers = fore.layers, messages = fore.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].stopTransition();
		for(var i = messages.count-1; i >= 0; i--) messages[i].stopTransition();
        back.base.stopTransition();
        back.stage.stopTransition();
        back.event.stopTransition();
        layers = back.layers, messages = back.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].stopTransition();
		for(var i = messages.count-1; i >= 0; i--) messages[i].stopTransition();
		transCount = 0; // 一応
	}

	function callExchangeInfo()
	{
		// すべての背景レイヤをのぞく表レイヤに対して
		// exchangeInfo を呼ぶ
        fore.stage.exchangeInfo();
        fore.event.exchangeInfo();
        var layers = fore.layers, messages = fore.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].exchangeInfo();
		for(var i = messages.count-1; i >= 0; i--) messages[i].exchangeInfo();
    }

	function callAssignTransSrc()
	{
		// すべての背景レイヤをのぞく表レイヤに対して
		// assignTransSrc を呼ぶ
        fore.event.assignTransSrc();
        fore.stage.assignTransSrc();
        var layers = fore.layers, messages = fore.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].assignTransSrc();
		for(var i = messages.count-1; i >= 0; i--) messages[i].assignTransSrc();
        forEachEventHook('onCopyLayer',
				function(handler, f) { handler(f.toback); } incontextof this,
				%[toback:false]);
    }

	function exchangeForeBack()
	{
        var tmp = fore;
		fore = back;
		back = tmp;
		current = (currentPage?back:fore).messages[currentNum]; // current は設定し直し
		forEachEventHook('onExchangeForeBack',
				function(handler, f) { handler(); } incontextof this);

        // 選択肢復帰
        if (selectShowing) {
            selectLayer.setParent(fore.base, 1000000);
        }
        if (mapSelectShowing) {
            mapSelectLayer.setParent(fore.base, 1000000);
        }

        // 強制表示変更
        fore.base.visible = true;
        back.base.visible = false;
    }

	function swapBaseLayer()
	{
        // 背景レイヤのみを取り替える
        var tmp = fore.base;
		fore.base = back.base;
		back.base = tmp;
        current = (currentPage?back:fore).messages[currentNum]; // current は設定し直し

    }

	function swapStageLayer(id)
	{
        // 前景レイヤの表と裏を取り替える
        var fl = fore[id], bl = back[id];
        var tmp = fl;
        fl = bl;
        bl = tmp;
	}
    
	function swapCharacterLayer(id)
	{
		// 前景レイヤの表と裏を取り替える
		var fl = fore.layers, bl = back.layers;
		var tmp = fl[id];
		fl[id] = bl[id];
		bl[id] = tmp;
	}

	function swapMessageLayer(id)
	{
		// メッセージレイヤの表と裏を取り替える
		var fl = fore.messages, bl = back.messages;
		var tmp = fl[id];
		fl[id] = bl[id];
		bl[id] = tmp;
		current = (currentPage?back:fore).messages[currentNum]; // current は設定し直し
	}

	//--------------------------------------------------------- 自動移動関連 --

	function onLayerMoveStop()
	{
		// レイヤの自動移動が終了した
		conductor.trigger('move');
	}

	function waitMove(elm)
	{
		// 自動移動を待つ
		if(moveCount == 0) return 0; // 自動移動を待てない
		if((elm.canskip === void || +elm.canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ動作中
				stopAllMoves();
				return 0; // 自動移動を停止させてすぐに返る
			}
			conductor.wait(%[
				click : function
				{
					updateBeforeCh = 1;
					stopAllMoves(); // すべてのトランジションは停止
				} incontextof this,
				move : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		else
		{
			conductor.wait(%[
				move : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		return -2;
	}

	function stopAllMoves()
	{
		// すべての自動移動を停止させる
		var layers, messages;
		fore.base.stopMove();
		back.base.stopMove();
        fore.stage.stopMove();
        back.stage.stopMove();
        fore.event.stopMove();
        back.event.stopMove();
        layers = fore.layers, messages = fore.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].stopMove();
		for(var i = messages.count-1; i >= 0; i--) messages[i].stopMove();
		layers = back.layers, messages = back.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].stopMove();
		for(var i = messages.count-1; i >= 0; i--) messages[i].stopMove();
		moveCount = 0; // 一応
	}

	//--------------------------------------------------------- アクション関連 --

    // アクション対象全部
    var allActions = %[];
    var actionCount = 0;

    /**
     * アクション実行中か
     */
    function isInAction(target) {
        return allActions[target] !== void;
    }

	/**
	 * アクション情報をコピーする
	 * @param src コピー元
	 * @param dest コピー先
	 */
	function copyAction(src, dest, completed) {
		stopAction(dest);
		var srcAction = allActions[src];
		if (srcAction !== void) {
			var destAction = srcAction.clone();
			destAction.target = dest;
			if (completed !== void) {
				destAction.onActionCompleted = completed;
			}
			allActions[dest] = destAction;
			actionCount++;
		}
	}
	
    /**
     * アクションを登録
     * @param target ターゲットオブジェクト
     * @param action アクション情報
     * @param elm パラメータ
     * @param completed 終了ハンドラ
     */
    function beginAction(target, action, completed) {
		var info = allActions[target];
		if (info === void) {
			info = new ActionSequense(target);
			allActions[target] = info;
			actionCount++;
        }
		if (completed !== void) {
            // 終了ハンドラを登録
			info.onActionCompleted = completed;
        }
        
        // 文字列の場合は評価してしまう
        if (typeof action == "String") {
            action = Scripts.eval(action);
        }
        
        if (typeof action == "Object") {
            if (action instanceof "Dictionary") {
				//dm("辞書アクション:" + action);
				//showKeys("アクション", action);
				// 辞書の場合
				if (typeof action.module == "Object") {
					action.module(info, action);
                } else if (typeof action.module == "String") {
                    var module = Scripts.eval(action.module);
					if (module !== void) {
						module(info, action);
                    }
                } else if (typeof action.moduleName == "String") {
                    // moduleName が指定されている場合はアクション定義とみなす
                    var module = Scripts.eval(action.moduleName);
                    if (module !== void) {
                        module(info, action);
                    }
                } else {
                    // 複数アクションの同時指定
                    info.addActions(action);
                }
                if (action.next) {
                    info.next();
                }
			} else if (action instanceof "Array") {
                // アクションシーケンス
                for (var i=0;i<action.count;i++) {
                    info.addActions(action[i]);
                    info.next();
                }
            }
        }
		flipTimer.enabled = true;
	}
    
    /**
     * アクションを停止
     * @param target ターゲットオブジェクト
     */
	function stopAction(target) {
        // 指定されたアクションの停止
        var info = allActions[target];
        if (info !== void) {
            actionCount--;
            info.stopAction();
            if (typeof info.onActionCompleted != "undefined") {
                info.onActionCompleted(info.target);
            }
            invalidate info;
            delete allActions[target];
        }
    }

    /**
     * 全アクションの停止
     */
    function stopAllActions() {
        // 全アクション停止
        var names = [];
        names.assign(allActions);
        (Dictionary.clear incontextof allActions)();
        for (var i=0;i<names.count;i+=2) {
            var info = names[i+1];
            actionCount--;
            info.stopAction();
            if (typeof info.onActionCompleted != "undefined") {
                info.onActionCompleted(info.target);
            }
            invalidate info;
        }
    }
    
    /**
     * アクション状態更新
     * システム全体から呼び出す
     * @param now 現在時刻
     */
    function updateAction(now) {
        var names = [];
        names.assign(allActions);
        (Dictionary.clear incontextof allActions)();
        for (var i=0;i<names.count;i+=2) {
            var target = names[i];
            var info   = names[i+1];
            if (info.doAction(now, false)) {
				//dm("アクション終了:" + info.target);
                actionCount--;
                if (typeof info.onActionCompleted != "undefined") {
                    info.onActionCompleted(info.target);
                }
                invalidate info;
            } else {
                // 再登録
                allActions[target] = info;
            }
        }
    }
    
    /**
     * アクション終了
     */
	function onActionCompleted(self) {
		// 個別アクション停止
		conductor.trigger('action_' + (string)self);
		if (actionCount == 0) {
			// 全アクション停止
			conductor.trigger('action');
		}
    }

	/**
	 * アクション待ち
	 */
	function waitAction(target, canskip=void) {
		if (!isInAction(target)) return 0; // アクションを待てない
		if((canskip === void || +canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ動作中
                stopAction(target);
				return 0; // 自動移動を停止させてすぐに返る
			}
			conductor.wait(%[
				click : function (target)
				{
                    updateBeforeCh = 1;
                    stopAction(target); // アクションを停止
				} incontextof this,
				'click_arg' => target, // ハンドラへの引数
                'action_' + (string)target => function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		else
		{
			conductor.wait(%[
				'action_' + (string)target => function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		return -2;
	}

	function waitAllAction(canskip)	{
		// アクションを待つ
        if (actionCount == 0) return 0; // アクションを待てない
		if((canskip === void || +canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ動作中
				stopAllActions();
				return 0; // 自動移動を停止させてすぐに返る
			}
			conductor.wait(%[
				click : function
				{
					updateBeforeCh = 1;
					stopAllActions(); // すべてのアクションは停止
				} incontextof this,
				action : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		else
		{
			conductor.wait(%[
				action : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		return -2;
	}
	
	//------------------------------------------------ ディレイ/スキップ関連 --

	function setDelay(elm)
	{
		// delay タグの処理
		var speed = elm.speed;
		if(speed == 'nowait')
		{
			chSpeed = 0;
			chUserMode = false;
		}
		else if(speed == 'user')
		{
			chUserMode = true;
			setUserSpeed();
		}
		else
		{
			chSpeed = +speed;
			chUserMode = false;
		}
		if(!skipMode) actualChSpeed = chSpeed;
	}

	function getCurrentRead()
	{
        // 回想中は常に既読
        if (isRecollection) {
            return true;
        }

        // 自動ラベルモードでは行単位で判定する必要がある 
        if (autoLabelMode) {
			if (currentRecordName != "") {
				var label = "auto" + currentRecordName;
				//dm("ラベル:" + label);
                //dm("フラグ:" + sflags[label]);
                //dm("カウント:" + autoLabelCount);
                return sflags[label] !== void && sflags[label] >= autoLabelCount;
            }
        }

        // 現在のシナリオ部分が既読かどうかを判定する
		return autoRecordPageShowing && currentRecordName != "" &&
				+sflags[currentRecordName] || !autoRecordPageShowing;
	}

	function setUserSpeed()
	{
		// ユーザの選択した文字表示スピードを設定
		// この関数を読んだ時点ですでに userChSpeed には
		// あたらしい値が設定されているとみなす。
		// あるいは、ラベルごとに、その区域が既読か未読かで
		// 表示スピードを変える目的で呼ばれる
		if(chUserMode)
		{
			if(getCurrentRead())
				chSpeed = userCh2ndSpeed==-1?userChSpeed:userCh2ndSpeed; // 既読
			else
				chSpeed = userChSpeed; // 未読
		}
		if(!skipMode) actualChSpeed = chSpeed;
	}

	function skipToClick()
	{
		// クリック待ち記号までスキップ
		skipMode = 1;
		actualChSpeed = 0;
	}

	function skipToPage()
	{
		// 改ページ待ち記号までスキップ
		skipMode = 2;
		actualChSpeed = 0;
	}

	function skipToStop()
	{
        // すべてスキップまたは既読の場合のみ
        if (allskip || getCurrentRead()) {
            // 次の停止までスキップ
            onPrimaryClick(); // クリックの動作をエミュレートする
            skipMode = 3;
            actualChSpeed = 0;
        }
	}

	function skipToStop2()
	{
		// 次の停止までスキップ(早送りモード)
		onPrimaryClick();
		skipMode = 4;
		actualChSpeed = 0;
	}

    function skipToLabel()
    {
        // デバッグ用: 次のラベルまで強制スキップ
        onPrimaryClick();
		skipMode = 5;
		actualChSpeed = 0;
    }
    
	function cancelSkip()
	{
		// スキップ動作をキャンセル
        skipMode = 0;
		skipKeyRepressed = false;
		actualChSpeed = chSpeed;
	}

	function enterNoWait()
	{
		// nowait タグの処理
		beforeNoWaitActualChSpeed = actualChSpeed;
		beforeNoWaitChUserMode = chUserMode;
		actualChSpeed = 0;
	}

	function leaveNoWait()
	{
		// endnowait タグの処理
		actualChSpeed = beforeNoWaitActualChSpeed;
		chUserMode = beforeNoWaitChUserMode;
	}

	function setAutoWait(elm)
	{
		// 自動ウェイトを設定する
		autoWCEnabled = +elm.enabled if elm.enabled !== void;
		autoWCChars = elm.ch if elm.ch !== void;
		autoWCWaits = [].split(",", elm.time) if elm.time !== void;
	}

	function cancelAutoMode()
	{
        // 自動読みすすみモードのキャンセル
        if (autoMode) {
            if (typeof this.autoModeMenuItem !== "undefined") {
                autoModeMenuItem.checked = false;
            }
            autoMode = false;
        }
	}

	function enterAutoMode()
	{
        // 自動読みすすみモードに入る
        if(typeof this.autoModeMenuItem !== "undefined")
            autoModeMenuItem.checked = true;
        // クリック待ちの場合の挙動
        if (clickWaiting) {
            onPrimaryClick();
            // ボイス待ちが残ってるばあいはもうすこしまつ
            if (autoModeAddWait !== void && autoModeAddWait - System.getTickCount() > 0) {
                var t = conductor.lastTagName;
                if (t == 'p'){
                    insertTag("p");
                }
                else if(t == 'l'){
                    insertTag("l");
                }
            }
        }
        autoMode = true;
    }
        
	//--------------------------------------------------------- ウェイト関連 --

	function resetWait()
	{
		// 時間原点のリセット
        timeOrigin = System.getTickCount();
	}

	function waitTime(waittime, canskip, trans=false, action=false)
	{
		// waittime 分待つ
		if(waittime == 0) return 0;

		var arg = 0;
		if (trans) { arg |= 0x01; };
		if (action) { arg |= 0x02; };
		
		if(canskip)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				return 0; // スキップ中の場合はなにもせずに返る
			}

            conductor.waitWithTimeOut(%[
				click : function(arg) 
				{
					if (arg) {
						updateBeforeCh = 1;
						if ((arg & 0x01)) {stopAllTransitions();} // すべてのトランジションは停止
						if ((arg & 0x02)) {stopAllActions();} // すべてのアクションは停止
					}
				} incontextof this,
				click_arg : arg,
				timeout : function(arg)
				{
					if (arg) {
						updateBeforeCh = 1;
						if ((arg & 0x01)) {stopAllTransitions();} // すべてのトランジションは停止
						if ((arg & 0x02)) {stopAllActions();} // すべてのアクションは停止
					}
				} incontextof this,
				timeout_arg : arg,
				], waittime);
		}
		else
		{
			// スキップできない場合
			conductor.waitWithTimeOut(%[
				timeout : function(arg)
				{
					if (arg) {
						updateBeforeCh = 1;
						if ((arg & 0x01)) {stopAllTransitions();} // すべてのトランジションは停止
						if ((arg & 0x02)) {stopAllActions();} // すべてのアクションは停止
					}
				} incontextof this,
				timeout_arg : arg
				], waittime);
		}
		return -2; // break
		
	}



    
	function doWait(elm)
	{
		// wait タグの処理
		var waittime;
		if(elm.mode == 'until')
		{
			// until モード
			waittime = timeOrigin + +elm.time - System.getTickCount();
			if(waittime < 0) { lastWaitTime = 0; return 0; } // すでに時間が経過している
			lastWaitTime = waittime;
			if(waittime < 6) return 0; // あまりに待ち時間が短いので待たない
		}
		else
		{
			waittime = +elm.time;
        }
		return waitTime(waittime, (elm.canskip === void || +elm.canskip) && clickSkipEnabled,
						elm.trans !== void ? elm.trans : false,
						elm.action !== void ? elm.action : false);
	}

	function doWaitCh(elm)
	{
		// +elm.time のカウント分、待つ
		var t = elm.time;
		return waitTime(actualChSpeed * (t === void ? 1 : +t),
			(elm.canskip === void || +elm.canskip) && clickSkipEnabled);
	}

	//------------------------------------------------------------ quake関連 --

	function doQuake(elm)
	{
		// elm に従って quake を開始
		if(elm.time !== void)
		{
			if(defaultQuakeTimeInChUnit)
			{
				if(elm.timemode == 'ms')
					quakeEndTick = System.getTickCount() + +elm.time;
				else
					quakeEndTick = System.getTickCount() + +elm.time * chSpeed;
			}
			else
			{
				if(elm.timemode == 'delay')
					quakeEndTick = System.getTickCount() + +elm.time * chSpeed;
				else
					quakeEndTick = System.getTickCount() + +elm.time;
			}
		}
		else
		{
			quakeEndTick = -1;
		}

		if(elm.hmax !== void) quakeHorzMax = +elm.hmax; else quakeHorzMax = 10;
		if(elm.vmax !== void) quakeVertMax = +elm.vmax; else quakeVertMax = 10;

		quakeTimer.enabled = true;
		quaking = true;
	}

	function restoreQuake()
	{
		// restore から呼ばれ、栞を保存したときに揺れていた場合は揺らす
		if(quaking && quakeEndTick == -1)
			quakeTimer.enabled =true;
	}

    /**
     * レイヤ位置の調整
     * メッセージレイヤの位置を自動的にずらす
     */
    function setLayerPos(x, y) {
        super.setLayerPos(x, y);
        if (!quakeMessageLayer) {
            for(var i = 0; i< fore.messages.count; i++) fore.messages[i].setDiff(-x, -y);
            for(var i = 0; i< back.messages.count; i++) back.messages[i].setDiff(-x, -y);
        }
    }

    
	function stopQuake()
	{
		// 揺れを停止
		setLayerPos(0, 0);
		quakeTimer.enabled = false;
		quaking = false;
		conductor.trigger('quake');
	}

	function onQuakeTimerInterval()
	{
		// quakeTimer により呼ばれる
		if(quakeEndTick != -1 && System.getTickCount() > quakeEndTick) { stopQuake(); return; }
        if(historyShowing || selectShowing || mapSelectShowing || currentDialog !== void)
		{
			// メッセージ履歴レイヤ表示中はさすがに揺れていられない
			setLayerPos(0, 0);
			return;
		}
		var x, y;
		if(quakeHorzMax == quakeVertMax)
		{
			// だいたい同じ
			x = int(Math.random() * quakeHorzMax - quakeHorzMax);
			y = int(Math.random() * quakeVertMax - quakeVertMax);
		}
		else if(quakeHorzMax < quakeVertMax)
		{
			// 縦揺れ
			x = int(Math.random() * quakeHorzMax - quakeHorzMax);
			y = int((quakePhase ? Math.random() : -Math.random()) * quakeVertMax);
		}
		else
		{
			// 横揺れ
			x = int((quakePhase ? Math.random() : -Math.random()) * quakeHorzMax);
			y = int(Math.random() * quakeVertMax - quakeVertMax);
		}
		quakePhase = !quakePhase;
		setLayerPos(x, y);
	}

	function waitQuake(elm)
	{
		// 揺れが終了するまでまつ
		if(!quaking || quakeEndTick == -1) return 0; // 揺れていなければ待たない
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				stopQuake();
				return 0; // スキップ中の場合は揺れを停止させて返る
			}
			conductor.wait(%[
				click : function
				{
					stopQuake(); // 揺れは停止する
				} incontextof this,

				quake : function
				{
					// やることなし
				} incontextof this
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				quake : function
				{
					// やることなし
				} incontextof this
				]);
		}
		return -2;
	}

	//------------------------------------------------------------- クリック --

	function onPrimaryClick()
	{
        // プライマリレイヤで「クリックの動作」がなにもフィルタリングされなかった
		// とき、プライマリレイヤから呼ばれる。
		clickCount ++;
		if(!callHook(leftClickHook))
		{
			if(messageLayerHiding)
			{
				showMessageLayerByUser(); // メッセージレイヤを表示する
			}
            else
            {
				var st = conductor.status;
				var runst = conductor.mRun;
				var stopst = conductor.mStop;

                if(st != stopst && canCancelSkipByClick && skipMode && skipMode < 4)
				{
					// クリックによるスキップの解除が可能
					cancelSkip();
                    return;
				}
                
//				else
                {
					// この時点でフィルタリングされないメッセージは待ち状態のクリアなので
					// conductor に 'click' を送り解除を伝える。

					if(!conductor.trigger('click')) // 待ち状態でない場合は単に無視される
					{
                        // ハンドラが見つからないなど、処理されなかった場合
                        if (prevSkipMode !== void) {
                            skipMode = 6;
                        } else {
                            if(st == runst && clickSkipEnabled && skipMode == 0)
  						    {
                                // クリックによるスキップが可能
                                skipToClick();
                            }
                        }
                    } else {
                        if (prevSkipMode !== void) {
                            skipMode = 6;
                        }
                    }
				}

                // 順序をいれかえた。自動モード解除はクリックによるキャンセル処理の後にする
                if (st != stopst && autoMode) {
                    cancelAutoMode();
                }
                
            }
		}
	}

	function onPrimaryClickByKey()
	{
		// キーが押されたときプライマリレイヤをクリックしたのと
		// 同じ動作をするが、さらに一時的にマウスカーソルを隠す
		onPrimaryClick();
		hideMouseCursor();
	}

	function waitClick(elm)
	{
		// クリックを待つ
		conductor.wait(%[
			click : function
			{
			} incontextof this]);
        notifyStable();
		return -2;
	}

	function onMouseDown(x, y)
	{
        lastMouseDownX = x;
		lastMouseDownY = y;
		super.onMouseDown(...);
	}

	//------------------------------------------------------- キーボード操作 --

	function processKeys(key, shift)
	{
        if (shift == ssAlt && key == VK_LEFT) {
            onSkipToPrevLabelMenuItemClick();
            return;
        } else if (shift == ssAlt && key == VK_RIGHT) {
            onSkipToNextLabelMenuItemClick();
            return;
        }

        // CONTROL によるスキップ処理
        if(key == VK_CONTROL) {
            var sg = getKeyState;
            if(sg(VK_CONTROL)){
                if (conductor.status != conductor.mStop && clickSkipEnabled && skipMode < 4) {
                    skipToStop2(); // まだskipMode 4に入っていない場合は早送りモードに入る
                }
            }
        }

        if(checkProceedingKey(key, shift)) return;

		if(key == #'F')
		{
			// 次の選択肢/未読まで進む
			skipToNextStopByKey();
			return;
		}

		if(key == #'B')
		{
			// 前に戻る
			goBackByKey();
			return;
		}

		if(key == #'A')
		{
			// 自動的に読み進める
			switchAutoModeByKey();
			return;
		}
 
		if(freeSaveDataMode)
		{
			if(key == #'S')
			{
				// 栞をはさむ
				if(typeof this.storeMenu != "undefined" && storeMenu.enabled)
					storeMenu.click();
				return;
			}

			if(key == #'L')
			{
				// 栞をたどる
				if(typeof this.restoreMenu != "undefined" && restoreMenu.enabled)
					restoreMenu.click();
				return;
			}
		}

		if(key == #'R' || (key == VK_UP && (shift & ssShift)))
		{
			// メッセージ履歴を表示
			showHistoryByKey();
			return;
		}

		if(key == VK_ESCAPE)
		{
			// メッセージを消す
			if(typeof this.rightClickMenuItem != "undefined" &&
				rightClickMenuItem.enabled)
			{
				rightClickMenuItem.click(); // クリックをエミュレート
				return;
			}
		}
	}

	function preProcessKeys(key, shift)
	{
		return callHook(keyDownHook, key, shift);
	}

	function internalOnKeyDown(key, shift)
	{
		if(!preProcessKeys(key, shift)) processKeys(key, shift);
	}

	function checkProceedingKey(key, shift)
	{
        // key が読みすすみのキー ( スペースキーかReturnキー ) の場合は
		// キーを処理し、true を返す。そうでなければ false を返す
		if(key == VK_RETURN || key == VK_SPACE)
		{
			// キーがメッセージキューに溜まってる場合があるので
			// 実際にそのキーが押されているのかどうかを
			// getKeyState を用いて調べる
			var sg = getKeyState;
			if(sg(VK_RETURN) || sg(VK_SPACE))
			{
				// キーが押されてた
				if((shift & ssRepeat) && clickSkipEnabled)
				{
					// キーリピート
					if(skipMode < 4 && skipKeyRepressed)
						skipToStop2(); // まだskipMode 4に入っていない場合は早送りモードに入る
					// skipKeyRepressed をチェックするのは
					// 連続してキーリピートが発生しているときに
					// cancelSkip 後にスキップに突入するのを防ぐため
				}
				else
				{
					skipKeyRepressed = true;
					onPrimaryClickByKey();
				}
				return true;
			}
		}

		return false;
	}

	function skipCancelKeyPressing()
	{
		// スキップを解除する要因となるキーあるいはマウスボタンが押されているか
		var sg = getKeyState;
		return sg(VK_RETURN) || sg(VK_SPACE) || sg(VK_LBUTTON);
	}

	function skipKeyPressing()
	{
		// VK_RETURN あるいは VK_SPACE が押されているかどうか
		var sg = getKeyState;
		return sg(VK_RETURN) || sg(VK_SPACE) || sg(VK_CONTROL);
	}

	function goBackByKey()
	{
		if(typeof this.goBackMenuItem != "undefined" &&
			goBackMenuItem.enabled)
			goBackMenuItem.click(); // クリックをエミュレート
	}

	function skipToNextStopByKey()
	{
		if(typeof this.skipToNextStopMenuItem != "undefined" &&
			skipToNextStopMenuItem.enabled)
			skipToNextStopMenuItem.click(); // クリックをエミュレート
	}

	function showHistoryByKey()
	{
		if(typeof this.showHistoryMenuItem != "undefined" &&
			showHistoryMenuItem.enabled)
			showHistoryMenuItem.click(); // クリックをエミュレート
	}

	function switchAutoModeByKey()
	{
		if(typeof this.autoModeMenuItem != "undefined" &&
			autoModeMenuItem.enabled)
			autoModeMenuItem.click(); // クリックをエミュレート
	}

	function onKeyDown(key, shift)
	{
        if(focusedLayer === null)
			internalOnKeyDown(key, shift);
		super.onKeyDown(...);
	}

	function onMouseWheel(shift, delta, x, y)
	{
		// ホイールが回転した
		super.onMouseWheel(...);
        if (currentDialog !== void) {
            return;
        }
        // メッセージ窓のホイール処理
        if (inSleep && current.hasWheel()) {
            current.processWheel(shift, delta, x, y);
            return;
        }
        if(!historyLayer.visible)
		{
			if(delta > 0)
				showHistoryByKey(); // メッセージ履歴を表示
			else if(System.getTickCount() - lastHistoryHiddenTick > 150) 
					onPrimaryClick(); // クリックをエミュレート
			// ↑ tick を比較しているのは、メッセージ履歴を隠す操作とホイールを
			// 手前に回す操作が連続した場合に勝手に読み進むのをある程度防ぐ仕掛け
		}
		else
		{
			// メッセージ履歴にイベントを垂れ流す
			historyLayer.windowMouseWheel(shift, delta, x, y);
		}
	}

	//------------------------------------------------- クリック待ち記号処理 --

	function hideClickGlyphs()
	{
		// クリック待ち記号を非表示に
		lineBreak.visible = false;
		pageBreak.visible = false;
		if(conductor == mainConductor)
		{
			// クリック待ち記号の状態を記録
			lastClickGlyphVisible = false;
		}
	}

	function storeClickGlyphState(which)
	{
		// クリック待ち記号の情報を一時的に待避
		// このデータは右クリックサブルーチンやextraConductorサブルーチンから戻るときに参照する
		if(conductor == mainConductor)
		{
			lastClickGlyphVisible = true;
			lastClickGlyphMessagePage = currentPage;
			lastClickGlyphMessageNum = currentNum;
			lastClickGlyphWhich = which;
		}
	}

	function restoreClickGlyphState()
	{
		// lastClickGlyph *** に一時的に待避したクリック待ち記号の情報
		// に基づいてクリック待ち記号を設定する
		if(lastClickGlyphVisible)
		{
			var layer = getMessageLayerObjectFromPageAndNumber
				(lastClickGlyphMessagePage, lastClickGlyphMessageNum);
			if(layer !== void)
			{
				switch(lastClickGlyphWhich)
				{
				case 'line':
					layer.showLineBreakGlyph(lineBreak);
					break;
				case 'page':
					layer.showPageBreakGlyph(pageBreak);
					break;
				}
			}
		}
	}

	function canIgnoreL()
	{
		// L タグを無視できるかどうか
		return chNonStopToPageBreak || (getCurrentRead() && ch2ndNonStopToPageBreak);
	}

    function waitAuto(waittime, tag) {
        if (skipMode) return 0;
        if (waittime <= 0) {
            waittime = 1;
        }
        conductor.waitWithTimeOut(%[
            click : function (tag)
            {
                clickWaiting = false;
                fore.base.cursor = cursorDefault;
                hideClickGlyphs();
                cancelAutoMode();
                if (tag !== void) {
                    insertTag(tag);
                }
            } incontextof this,
            click_arg : tag,
            timeout : function
            {
				clickWaiting = false;
				fore.base.cursor = cursorDefault;
                hideClickGlyphs();
            } incontextof this
                ], waittime);
        return -2; // break
	}
    
	function showLineBreak(elm)
	{
		// 現在のメッセージレイヤに行待ち記号を表示する
		stablePosibility = true;
		if(canIgnoreL())
		{
			// l タグの無視
			if(elm.canskip === void || !+elm.canskip)
				return (skipMode==3 || skipMode==4) ? 0 : -4;
		}

        if(autoMode) {
            current.showLineBreakGlyph(lineBreak);
            storeClickGlyphState("line");
            return waitAuto(elm.voicewait ? calcAutoModeLineWait() : autoModeLineWait, "l");
		}
		if(skipMode == 1) cancelSkip();
		if(skipMode == 4 && !skipKeyPressing()) cancelSkip();
		if(skipMode >= 4) return -4;
		if(skipMode) return skipCancelKeyPressing()?-4:0;
			// スキップ中(スキップをキャンセルするようなキーがあればスキップ解除
			// のためのイベント処理の機会を与える)

        current.showLineBreakGlyph(lineBreak);
        storeClickGlyphState("line");
        
		if(!current.nodeVisible)
		{
			dm("警告 : 非表示になっている" +
				(currentPage ? "裏" : "表") + "メッセージレイヤ" + currentNum +
				"で行クリック待ちになりました");
		}

		// conductor を 'click' まで待ち状態に
		conductor.wait(%[
			click : function
			{
				clickWaiting = false;
				fore.base.cursor = cursorDefault;
				notifyRun();
                hideClickGlyphs();
            } incontextof this
			]);
		clickWaiting = true;
		fore.base.cursor = cursorWaitingClick;
		notifyStable();
		return -2;
	}

	function showPageBreak(elm)
	{
		// 現在のメッセージレイヤにページ待ち記号を表示する
		stablePosibility = true;
		if(skipMode == 1 || skipMode == 2) cancelSkip();
		if(skipMode == 4 && !skipKeyPressing()) cancelSkip();
		if(skipMode) return -4; // いったんイベントを処理

        current.showPageBreakGlyph(pageBreak);
		storeClickGlyphState("page");
        
        if(autoMode) {
            return waitAuto(calcAutoModePageWait(), "p");
        }

		if(!current.nodeVisible)
		{
			dm("警告 : 非表示になっている" +
				(currentPage ? "裏" : "表") + "メッセージレイヤ" + currentNum +
				"でページクリック待ちになりました");
		}

		// conductor を 'click' まで待ち状態に
		conductor.wait(%[
			click : function
			{
				clickWaiting = false;
				fore.base.cursor = cursorDefault;
				notifyRun();
                hideClickGlyphs();
			} incontextof this
			]);
		clickWaiting = true;
		fore.base.cursor = cursorWaitingClick;
		notifyStable();
		return -2;
	}

	function showPageBreakAndClear()
	{
		// メッセージレイヤが最終行まで達して自動改ページがされるときに
		// 呼ばれる。現在のメッセージレイヤにページ待ち記号を表示し、
		// 実行再開時には MessageLayer.clear2 を呼ぶ
		stablePosibility = true;
		if(skipMode == 1 || skipMode == 2) cancelSkip();
		if(skipMode == 4 && !skipKeyPressing()) cancelSkip();
		var lasttagname = conductor.lastTagName;
		if(!autoMode && ((!canIgnoreL() && lasttagname == 'l') || lasttagname == 'p'))
			{ current.clear2(); return -5; }// いったんイベントを処理(タグは後回し)
		if(skipMode) { current.clear2(); return -5; }// いったんイベントを処理(タグは後回し)

		if(!current.nodeVisible)
		{
			dm("警告 : 非表示になっている" +
				(currentPage ? "裏" : "表") + "メッセージレイヤ" + currentNum +
				"で自動改ページクリック待ちになりました");
		}

		if(autoMode)
		{
            var wait = calcAutoModePageWait();
			conductor.waitWithTimeOut(%[ // タイムアウト付きウェイト
				click : function
				{
					current.clear2(); // clear2 を呼ぶ
                    cancelAutoMode();
				} incontextof this,
				timeout : function
				{
					current.clear2(); // clear2 を呼ぶ
				} incontextof this
				], wait <= 0 ? 1 : wait);
			return -3;
		}
		else
		{
			current.showPageBreakGlyph(pageBreak);
			storeClickGlyphState("page");

			// conductor を 'click' まで待ち状態に
			conductor.wait(%[
				click : function
				{
					clickWaiting = false;
					fore.base.cursor = cursorDefault;
					current.clear2(); // clear2 を呼ぶ
					notifyRun();
				} incontextof this
				]);
			clickWaiting = true;
			fore.base.cursor = cursorWaitingClick;
			notifyStable();
			return -3;
		}
	}

	//------------------------------------------------------------- BGM 処理 --

	function onBGMFadeCompleted()
	{
		// BGM のフェードが完了した
		conductor.trigger('bgmfade');
	}

    // BGM停止処理
    var bgmStopExp;
    var bgmStopStorage;
    var bgmStopTarget;

    function handleBgmStop() {
        // BGM停止ハンドラ

        // パラメータを保持して破棄
        var exp     = bgmStopExp;
        var storage = bgmStopStorage;
        var target  = bgmStopTarget;
        clearBgmStop();
        
        // 処理実行
        if (exp !== void) {
            Scripts.eval(exp);
        }
        if (storage !== void || target !== void) {
            window.process(storage, target);
        }
    }
    
    function setBgmStop(elm) {
        // BGM停止時処理の登録
        bgmStopExp     = elm.exp;
        bgmStopStorage = elm.storage;
        bgmStopTarget  = elm.target;
    }
    
    function clearBgmStop() {
        // BGM停止時処理の解除
        bgmStopExp     = void;
        bgmStopStorage = void;
        bgmStopTarget  = void;
    }
    
    // BGM 停止時拡張ハンドラ
    var bgmStopHandler;
    
	function onBGMStop()
	{
        // BGM が停止した
        conductor.trigger('bgmstop');
        if (bgmStopHandler !== void) {
            bgmStopHandler();
        }
        if (bgmStopExp !== void || bgmStopStorage !== void || bgmStopTarget !== void) {
            global.stopBgmTrigger = new AsyncTrigger(handleBgmStop, '');
            global.stopBgmTrigger.cached = true;
            global.stopBgmTrigger.trigger();
        }
    }

    // ------------------------------------------
    
    var bgmLabelInfos = %[];
    var bgmLabelInfo;

    function handleBgmLabel() {
        if (bgmLabelInfo !== void) {
            if (bgmLabelInfo.exp !== void) {
                Scripts.eval(bgmLabelInfo.exp);
            }
            if (bgmLabelInfo.storage !== void || bgmLabelInfo.target !== void) {
                window.process(bgmLabelInfo.storage, bgmLabelInfo.target);
            }
        }
    }

    // BGM 停止時拡張ハンドラ
    var bgmLabelHandler;

    function onBGMLabel(label) {
        // BGM のラベル通過処理
        conductor.trigger('bgmlabel_' + label);
        if (bgmLabelHandler !== void) {
            bgmLabelHandler(label);
        }
        var obj = bgmLabelInfos[label];
        if (obj !== void) {
            bgmLabelInfo = obj;
            global.labelBgmTrigger = new AsyncTrigger(handleBgmLabel, '');
            global.labelBgmTrigger.cached = true;
            global.labelBgmTrigger.trigger();
        }
    }

    /**
     * BGM ラベル処理の登録
     */
    function setBgmLabel(elm) {
        if (elm.name !== void) {
            var obj = %[];
            obj.storage = elm.storage;
            obj.target  = elm.target;
            obj.exp     = elm.exp;
            bgmLabelInfos[elm.name] = obj;
        }
    }

    /**
     * BGM ラベル処理の解除
     */
    function clearBgmLabel() {
        bgmLabelInfos = %[];
        bgmLabelInfo = void;
    }

    // ----------------------------------------------------------------------
    
	function waitBGMFade(elm)
	{
		// BGM のフェード終了を待つ
		if(!bgm.inFading) return 0; // フェード中でなければ待たない
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				bgm.stopFade();
				return 0; // スキップ中の場合はフェードを停止させて返る
			}
			conductor.wait(%[
				click : function
				{
					bgm.stopFade(); // フェーディングは停止する
				} incontextof this,

				bgmfade : function
				{
					// やることなし
				} incontextof this
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				bgmfade : function
				{
					// やることなし
				} incontextof this
				]);
		}
		return -2;
	}

	function waitBGMStop(elm)
	{
		// BGM の再生終了を待つ
		if(!bgm.canWaitStop) return 0; // BGM 再生終了を待てなければそのまま戻る
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				bgm.stop();
				return 0; // スキップ中の場合は再生を停止させて返る
			}
			conductor.wait(%[
				click : function
				{
					bgm.stop(); // 再生を終了する
				} incontextof this,

				bgmstop : function
				{
					// やることなし
				} incontextof this
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				bgmstop : function
				{
					// やることなし
				} incontextof this
				]);
		}
		return -2;
	}

	//----------------------------------------------------------- 効果音処理 --

	function onSESoundBufferFadeCompleted(id)
	{
		// 効果音のフェードが終了した
		conductor.trigger('sefade' + id);
	}

    function onSESoundBufferStop(id) {
		// 効果音の再生が終了した
		conductor.trigger('sestop' + id);
		if (typeof this.seStopHandler != "undefined") {
			seStopHandler(id);
        }
	}

	function waitSEFade(elm)
	{
		var id = +elm.buf;
		var buf = se[id];
		if(!buf.inFading) return 0; // フェード中でなければそのまま戻る
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				buf.stopFade();
				return 0; // スキップ中の場合はフェードを停止させて返る
			}
			conductor.wait(%[
				click : function (id)
				{
					se[id].stopFade(); // フェードを終了する
				} incontextof this,

				click_arg : id, // ハンドラへの引数

				'sefade'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'sefade'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				'sefade'+id =>
					function (id)
					{
						// やることなし
					} incontextof this,

				'sefade'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		return -2;
	}

	function waitSEStop(elm)
	{
		var id = +elm.buf;
		var buf = se[id];
		if(!buf.canWaitStop()) return 0; // 終了を待てなければそのまま返る
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				buf.stop();
				return 0; // スキップ中の場合は再生を停止させて返る
			}
			conductor.wait(%[
				click : function (id)
				{
					se[id].stop(); // 再生を終了する
				} incontextof this,

				'click_arg' => id, // ハンドラへの引数

				'sestop'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'sestop'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				'sestop'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'sestop'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		return -2;
	}

	//--------------------------------------------------------- ムービー関連 --

	function onMovieStop(id)
	{
		// ムービーの再生が終了した
		conductor.trigger('moviestop'+id);
	}

	function waitMovieStop(elm)
	{
		var id = +elm.slot;

		// ムービーの再生終了を待つ
		if(!movies[id].canWaitStop) return 0; // ムービー再生終了を待てなければそのまま戻る
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				movies[id].stop();
				return 0; // スキップ中の場合は再生を停止させて返る
			}
			conductor.wait(%[
				click : function (id)
				{
					movies[id].stop(); // 再生を終了する
				} incontextof this,

				'click_arg' => id, // ハンドラへの引数

				'moviestop'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'moviestop'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				'moviestop'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'moviestop'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		return -2;
	}

	function onMoviePeriod(id,type)
	{
		// ムービーのピリオドイベントが発生した
		if( isLeavePeriodEvent != false )
		{
			holdPeriodEventQueue.add( 'movieperiod'+id+'_'+type );
		}
		else
		{
			conductor.trigger('movieperiod'+id+'_'+type);
		}
	}

	function waitMoviePeriod(elm)
	{
		isWaitPeriodEvent = true;
		waitedPeriodEventStorageName = conductor.curStorage;
	
		var id = +elm.slot;

		stablePosibility = true;

		if( holdPeriodEventQueue.count > 0 )
		{
			var		triggered = false;
			for( var i = 0; i < holdPeriodEventQueue.count; i++ )
			{
				if( elm.for !== void )
				{
					if( elm.for == 'loop' )
					{
						if( ('movieperiod'+id+'_'+perLoop) == holdPeriodEventQueue[i] )
							triggered = true;
					}
					else if( elm.for == 'period' )
					{
						if( ('movieperiod'+id+'_'+perPeriod) == holdPeriodEventQueue[i] )
							triggered = true;
					}
					else if( elm.for == 'prepare' )
					{
						if( ('movieperiod'+id+'_'+perPrepare) == holdPeriodEventQueue[i] )
							triggered = true;
					}
					else if( elm.for == 'segLoop' )
					{
						if( ('movieperiod'+id+'_'+perSegLoop) == holdPeriodEventQueue[i] )
							triggered = true;
					}
					else
					{
						triggered == true;
					}
				}
				else
				{
					triggered == true;
				}
			}
			holdPeriodEventQueue.clear();
			if( triggered == true )
			{
				isWaitPeriodEvent = false;
				return 0;
			}
		}

		// ムービーのピリオドイベントを待つ
		if(!movies[id].canWaitStop) return 0; // ムービーが再生中でなければそのまま戻る
		if( elm.for !== void )
		{
			if( elm.for == 'loop' )
			{
				conductor.wait(%[
					'movieperiod'+id+'_'+perLoop => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
					'movieperiod'+id+'_arg' => id // ハンドラへの引数
					]);
			}
			else if( elm.for == 'period' )
			{
				conductor.wait(%[
					'movieperiod'+id+'_'+perPeriod => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
					'movieperiod'+id+'_arg' => id // ハンドラへの引数
					]);
			}
			else if( elm.for == 'prepare' )
			{
				conductor.wait(%[
					'movieperiod'+id+'_'+perPrepare => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
					'movieperiod'+id+'_arg' => id // ハンドラへの引数
					]);
			}
			else if( elm.for == 'segLoop' )
			{
				conductor.wait(%[
					'movieperiod'+id+'_'+perSegLoop => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
					'movieperiod'+id+'_arg' => id // ハンドラへの引数
					]);
			}
			else
			{
				return 0; // 引数が変
			}
		}
		else
		{
			conductor.wait(%[
				'movieperiod'+id+'_'+perLoop => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
				'movieperiod'+id+'_'+perPeriod => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
				'movieperiod'+id+'_'+perPrepare => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
				'movieperiod'+id+'_'+perSegLoop => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
				'movieperiod'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		notifyStable();
		return -2;
	}

    // ------------------------------------------------------ 改行特殊制御モード

    var lineMode;    // 改行処理モード
    var crAfterName; // 名前の後に改行をいれるか
    var erAfterPage; // 改ページ直後に画面消去するか
    var noCrOnce;    // 改行処理を１回なしにする
    var noErOnce;    // 画面消去処理を１回なしにする
    var autoIndent;  // 「『で自動的にインデントする
    var afterPage;   // 改ページ直後
    var emptyLine;     // まだ行が空
    var prevEmptyLine; // 前の空行状態

    var nameMode;    // 名前処理モード
    var afterName;   // 名前処理の直後
    var nameStr;     // 現在の名前
    var nameDisp;    // 現在の表示名
    
    /**
     * @param lineMode
     * 0: 通常
     * 1:行単位で [p]
     * 2:行単位で [l] 手動で [p]
     * 3:行単位で [l] 空行で [p]
     * 4:改行は無視。空行で [p]
     * 5:改行は [r] 。空行で [p]
     */
    function setLineMode(lineMode) {
        if (lineMode === void) {
            //dm("ラインモード:なし");
            mainConductor.ignoreCR = global.ignoreCR;
            this.lineMode = 0;
        } else if (lineMode == "page") {
            //dm("ラインモード:page");
            mainConductor.ignoreCR  = false;
            afterPage = true;
            emptyLine = true;
            prevEmptyLine = true;
            this.lineMode = 1;
        } else if (lineMode == "line") {
            //dm("ラインモード:line");
            mainConductor.ignoreCR  = false;
            afterPage = true;
            emptyLine = true;
            prevEmptyLine = true;
            this.lineMode = 2;
        } else if (lineMode == "vn") {
            //dm("ラインモード:vn");
            mainConductor.ignoreCR  = false;
            afterPage = true;
            emptyLine = true;
            prevEmptyLine = true;
            this.lineMode = 3;
        } else if (lineMode == "tex") {
            //dm("ラインモード:tex");
            mainConductor.ignoreCR  = false;
            afterPage = true;
            emptyLine = true;
            prevEmptyLine = true;
            this.lineMode = 4;
        } else if (lineMode == "free") {
            //dm("ラインモード:free");
            mainConductor.ignoreCR  = false;
            afterPage = true;
            emptyLine = true;
            prevEmptyLine = true;
            this.lineMode = 5;
        }
    }

    /**
     * @param erAfterPage ページ待ち直後に画面消去
     */
    function setErAfterPage(erAfterPage) {
        this.erAfterPage = erAfterPage;
    }

    /**
     * @param crAfterName 名前の後に改行をいれるかどうか
     */
    function setCrAfterName(crAfterName) {
        this.crAfterName = crAfterName;
        afterName = false;
    }

    /**
     * @param autoIndent 名前直後の「『で自動的にインデント処理
     */
    function setAutoIndent(autoIndent) {
        this.autoIndent = autoIndent;
    }
    
    /**
     * 自動ラベルモードの既読処理
     */
    function incAutoLabel() {
		if (autoLabelMode) {
			if (currentRecordName != "") {
				var label = "auto" + currentRecordName;
				if (sflags[label] === void || sflags[label] < autoLabelCount) {
					sflags[label] = autoLabelCount;
				}
            }
        }
    }
    
    /**
     * 自動ラベリング設定
     */
    function setAutoLabel() {
        if (autoLabelMode) {
            incAutoLabel();
            autoLabelCount++;
            // 自動ラベル処理をコンダクタにわりこませる
            insertTag("autolabel");
        }
    }

	function addTag(cd, name, elm) {
        var e = %[];
        if (elm !== void) {
            (Dictionary.assign incontextof e)(elm, false);
        }
        e.tagname = name if name !== void;
		cd.pendings.add(e);
    }
	
    /**
     * 画面消去処理の挿入
     */
    function entryEr() {
        if (emptyLine && !erAfterPage) {
            if (!noErOnce) {
                tagHandlers.er(%[]);
            }
            noErOnce = false;
        }
    }

    /**
     * 指定したタグを次回に割り込み実行させる
     */
    function insertTag(name, elm) {
        var e = %[];
        if (elm !== void) {
            (Dictionary.assign incontextof e)(elm, false);
        }
        e.tagname = name if name !== void;
        conductor.pendings.insert(0, e);
    }

    // パース処理用
	var voiceMap;
	var voiceDefault;

	function parseParse(cd, elm) {
		voiceMap = %[];
		voiceDefault = +elm.voice;
		addTag(cd, "parse");
    }

	var reNumber = new RegExp("^[0-9][0-9]*$");

	function parseVoice(cd, elm) {
		var info = voiceMap[elm.name];
		if (info == void) {
			info = %[];
			voiceMap[elm.name] = info;
		}					
		if (elm.ignore) {
			info.strVoice = "ignore";
		} else {
			if (reNumber.test(elm.voice)) {
				// 数値指定の場合
				if (elm.once || elm.replace) {
					info.strVoice = elm.voice;
				} else {
					info.voice = +elm.voice;
				}
			} else {
				info.strVoice = elm.voice;
			}
		}
		info.incVoice = elm.incvoice || elm.replace;
	}
	
    function parseCh(cd, elm, voiceMode) {

		// 名前表示専用処理
		//【キャラクタ名/表示名】を検出して名前表示処理を実行する
		if (nameMode > 0) {
			// 既に名前表示ロジックに入ってる
            // ここでは emptyLine の状態はありえない
			if (elm.text == "】") {
				nameMode = 0;
				//dm("名前処理:" + nameStr + ":" + nameDisp);
				if (voiceMode) {
					var info = voiceMap[nameStr];
					if (info == void) {
						info = %[];
						voiceMap[nameStr] = info;
					}					
					var voice;
					if (info.strVoice !== void) {
						voice = info.strVoice;
						info.strVoice = void;
					} else {
						if (info.voice === void) {
							info.voice = voiceDefault;
						}
						voice = info.voice;
						info.incVoice = true;
					}
					if (info.incVoice) {
						if (info.voice >= 0) {
							info.voice++;
						}
						info.incVoice = void;
					}
					//dm("ボイス展開:" + nameStr + ":" + voice);
					if (voice !== void) {
						addTag(cd, "dispname", %[ name:nameStr, disp:nameDisp, voice:voice]);
					} else {
						addTag(cd, "dispname", %[ name:nameStr, disp:nameDisp]);
                    }
                } else {
                    addTag(cd, "dispname", %[ name:nameStr, disp:nameDisp]);
                }
                afterName = true;
				return;
            } else {
				if (nameMode == 1) {
					if (elm.text == "/") {
                        nameMode = 2;
                        return 0;
                    } else {
                        nameStr += elm.text;
                    }
                } else {
                    nameDisp += elm.text;
                }
            }
            return;
		} else if (emptyLine) {
			// 行頭での処理
			// ラインモード処理
			var erflag;
			// テキストクリア処理
			switch (lineMode) {
			case 1:
				erflag = true;
				break;
			case 2:
			case 3:
			case 5:
				if (afterPage) {
					erflag = true;
				} else {
					addTag(cd, "r");
				}
				break;
			case 4:
				if (afterPage) {
					erflag = true;
				}
				break;
			}
			if (erflag && !erAfterPage) {
				addTag(cd, "er");
			}
			if (elm.text == "【") {
                nameMode = 1;
                nameStr  = "";
                nameDisp = "";
                return;
            } else {
                // 名前指定がない場合はパラメータなしで名前処理を呼び出す
                if (!afterName && (lineMode < 3 || prevEmptyLine)) {
					addTag(cd, "dispname");
					afterName = true;
                }
            }
        }
        
        // 文字登録
		addTag(cd, "ch", elm);
        emptyLine = false;
		afterPage = false;

        // 自動インデント処理
        if (autoIndent && afterName && (elm.text == "「" || elm.text == "『")) {
			addTag(cd, "indent");
        }
        afterName = false;

        return;
    };

	function parseR(cd, elm)
	{
		if (!elm.eol) {
			addTag(cd, "r", elm);
			return;
		}

		// 改行効果を一度だけ無視させる
        if (noCrOnce) {
            noCrOnce = false;
            prevEmptyLine = emptyLine;
            emptyLine = true;
            return 0;
        }

		switch (lineMode) {
        case 1:
            //dm("page:改行");
            nameMode = 0;
            if (emptyLine) {
                prevEmptyLine = emptyLine;
                return 0; // 空行は無視する
            } else {

                // 名前の直後の改行は無視する
                if (!(crAfterName && afterName)) {
                    prevEmptyLine = emptyLine;
                    emptyLine = true;
					addTag(cd, "p", elm);
                    return 0;
                }
            }
            break;
        case 2:
            //dm("line:改行");
            nameMode = 0;
            if (emptyLine) {
                prevEmptyLine = emptyLine;
                return 0; // 空行は無視する
            } else {

                // 名前の直後の改行は無視する
                if (!(crAfterName && afterName)) {
                    prevEmptyLine = emptyLine;
                    emptyLine = true;
                    // ボイス待ちする [l] + 行終了後処理呼び出し
                    elm.voicewait = true;
					addTag(cd, "l", elm);
					addTag(cd, "afterline");
                    return 0;
                }
            }
            break;
        case 3:
            //dm("vn:改行");
            nameMode = 0;
            if (emptyLine) {
                if (!prevEmptyLine) {
                    // 最初の空行で改ページ
                    prevEmptyLine = emptyLine;
					parseP(cd, elm);
                    return 0;
                } else {
                    // そうでない空行は無視する
                    prevEmptyLine = emptyLine;
                    return 0;
                }
            } else {
                // 名前の直後の改行は無視する
                if (!(crAfterName && afterName)) {
                    prevEmptyLine = emptyLine;
                    emptyLine = true;
                    elm.voicewait = true;
					addTag(cd, "l", elm);
					addTag(cd, "afterline");
                    return 0;
                }
            }
            break;

        case 4:
        case 5:
            //dm("tex/free:改行");
            nameMode = 0;
            if (emptyLine) {
                if (!prevEmptyLine) {
                    // 最初の空行で改ページ
                    prevEmptyLine = emptyLine;
					parseP(cd, elm);
                    return 0;
                } else {
                    // そうでない空行は無視する
                    prevEmptyLine = emptyLine;
                    return 0;
                }
            } else {
                // 名前の直後の改行は無視する
                if (!(crAfterName && afterName)) {
                    prevEmptyLine = emptyLine;
                    emptyLine = true;
                    return 0;
                }
            }
        }
        return 0;
	}

    function parseP(cd, elm) {
		addTag(cd, "p", elm);
		afterPage = true;
		emptyLine = true;
    }

	var extractTags = %[
	parse:parseParse incontextof this,
	ch:parseCh incontextof this,
	r:parseR incontextof this,
	voice:parseVoice incontextof this,
	p:parseP incontextof this
		];
	
    /*
     * タグ展開処理
     * lineMode に応じて特殊なタグ展開を行う
     */
	function checkTagExtract(cd, elm, voiceMode) {
		if (lineMode != 0 ) {
			var func = extractTags[elm.tagname];
			if (func !== void) {
				func(cd, elm, voiceMode);
				return true;
			}
        }
        return false;
    }

	//------------------------------------------------------- タグハンドラ群 --
    
	function getHandlers()
	{
		return %[ // 辞書配列オブジェクト

		/*
			タグハンドラ群は、名前とそれに対応する関数のペアを列挙するもので、
			関数名 : function(elm)
			{
				// 関数の中身
			} incontextof this,
			の書式を用いる。ただし、関数名が予約語の場合は、「関数名 : 」ではなく
			「"関数名" => 」を用いる。
			incontextof this は、関数が正しく このクラスの
			オブジェクトのコンテキスト上で動くようにするために必要。
		*/

	//--------------------------------------- タグハンドラ群(メッセージ操作) --
    parse : function(elm)
    {
        // 特殊パース処理
        conductor.parseAll();
        return 0;
	} incontextof this,

    voice : function(elm)
    {
        // 無視
        return 0;
	} incontextof this,

    ch : function(elm)
    {
        if (lineMode) {
			// 表示処理
            if (setCurrentMessageLayerVisible(true)) {
                return -3;
            }
        }

        // 文字表示
		var acs = actualChSpeed;
		if(updateBeforeCh)
		{
			if(acs) { updateBeforeCh--; return -5; } else { updateBeforeCh--; }
		}
		var text = elm.text;
		if(currentWithBack) current.comp.processCh(text);
		if(current.processCh(text))
		{
			return showPageBreakAndClear();
		}
		if(historyWriteEnabled) historyLayer.store(text);
		if(autoWCEnabled)
		{
			// 自動ウェイト
			var ind;
			if((ind = autoWCChars.indexOf(text)) != -1)
			{
				return int(acs * autoWCWaits[ind]);
			}
		}
		return acs;
	} incontextof this,

    dispname : function(elm)
    {
		// 表示処理
		if (setCurrentMessageLayerVisible(true)) {
			return -3;
		}

		if (elm !== void) {
            var name = elm.disp !== void ? elm.disp : elm.name;
            if (name !== void) {
                return tagHandlers.ch(%["text" => "【" + elm.name + "】"]);
            }
        }
        return 0;
	} incontextof this,

	graph : function(elm)
	{
		// グラフィックを文字として表示
		var acs = actualChSpeed;
		if(updateBeforeCh)
		{
			if(acs) { updateBeforeCh--; return -5; } else { updateBeforeCh--; }
		}
		if(currentWithBack) current.comp.processGraph(elm);
		if(current.processGraph(elm))
		{
			return showPageBreakAndClear();
		}
		if(historyWriteEnabled && elm.alt !== void) historyLayer.store(elm.alt);
		return acs;
	} incontextof this,

	hch : function(elm)
	{
		// 縦中横
		var acs = actualChSpeed;
		if(updateBeforeCh)
		{
			if(acs) { updateBeforeCh--; return -5; } else { updateBeforeCh--; }
		}
		var text = elm.text;
		var expand = elm.expand !== void && +elm.expand;
		if(currentWithBack) current.comp.putHorizonCh(text, expand);
		if(current.putHorizonCh(text, expand))
		{
			return showPageBreakAndClear();
		}
		if(historyWriteEnabled) historyLayer.store(text);
		return acs;
	} incontextof this,

    linemode : function(elm) {
        setLineMode(elm.mode);
        return 0;
    } incontextof this,

    craftername : function(elm) {
        setCrAfterName(elm.mode);
        return 0;
    } incontextof this,

    erafterpage : function(elm) {
        setErAfterPage(elm.mode);
        return 0;
    } incontextof this,

    nor : function(elm) {
        noCrOnce = true;
        return 0;
    } incontextof this,

    noer : function(elm) {
        noErOnce = true;
        return 0;
    } incontextof this,
                  
    autoindent : function(elm) {
        setAutoIndent(elm.mode);
        return 0;
    } incontextof this,
                  
    autolabelmode : function(elm) {
        autoLabelMode = elm.mode;
        autoLabelType = elm.type;
        return 0;
    } incontextof this,

	r : function(elm)
    {
        // 改行
        if(historyWriteEnabled) historyLayer.reline();
        if(currentWithBack) current.comp.processReturn();
        if(current.processReturn())
        {
            var ret = showPageBreakAndClear();
            // 改行はpendingしない
            if(ret == -5)
                ret = -4;
            else if(ret == -3)
                ret = -2;
            return ret;
        }
        return actualChSpeed;
    } incontextof this,

	ruby : function(elm)
	{
		// 次の文字に対するルビ設定
		if(currentWithBack) current.comp.setRuby(elm.text);
		current.setRuby(elm.text);
		return 0;
	} incontextof this,

	font : function(elm)
	{
		// フォント設定
		if(currentWithBack) current.comp.setFont(elm);
		current.setFont(elm);
		return 0;
	} incontextof this,

	deffont : function(elm)
	{
		// デフォルトのフォント設定
		if(currentWithBack) current.comp.setDefaultFont(elm);
		current.setDefaultFont(elm);
		return 0;
	} incontextof this,

	resetfont : function(elm)
	{
		// フォントのリセット
		if(currentWithBack) current.comp.resetFont();
		current.resetFont();
		return 0;
	} incontextof this,

	style : function(elm)
	{
		// スタイル設定
		if(currentWithBack) current.comp.setStyle(elm);
		current.setStyle(elm);
		return 0;
	} incontextof this,

	defstyle : function(elm)
	{
		// デフォルトのスタイル設定
		if(currentWithBack) current.comp.setDefaultStyle(elm);
		current.setDefaultStyle(elm);
		return 0;
	} incontextof this,

	resetstyle : function(elm)
	{
		// スタイルのリセット
		if(currentWithBack) current.comp.resetStyle();
		current.resetStyle();
		return 0;
	} incontextof this,

	link : function(elm)
	{
		// ハイパーリンクの開始
		if(currentWithBack) current.comp.beginHyperLink(elm);
		current.beginHyperLink(elm);
		return 0;
	} incontextof this,

	endlink : function(elm)
	{
		// ハイパーリンクの終了
		if(currentWithBack) current.comp.endHyperLink(elm);
		current.endHyperLink(elm);
		return 0;
	} incontextof this,

	button : function(elm)
	{
		// グラフィカルボタン
		if(currentWithBack) current.comp.addButton(elm);
		current.addButton(elm);
		return 0;
	} incontextof this,

	edit : function(elm)
	{
		// 単一行編集
		if(currentWithBack) current.comp.addEdit(elm);
		current.addEdit(elm);
		return 0;
	} incontextof this,

	checkbox : function(elm)
	{
		// チェックボックス
		if(currentWithBack) current.comp.addCheckBox(elm);
		current.addCheckBox(elm);
		return 0;
	} incontextof this,

	slider : function(elm)
	{
		// スライダ
		if(currentWithBack) current.comp.addSlider(elm);
		current.addSlider(elm);
		return 0;
	} incontextof this,
                  
	commit : function(elm)
	{
		// フォーム要素のコミット
		current.commit();
		return 0;
	} incontextof this,

    sysbutton : function(elm)
    {
        // システムボタンの追加
        if (currentWithBack) current.comp.addSystemButton(elm);
        current.addSystemButton(elm);
        return 0;
    } incontextof this,

    csysbutton : function(elm)
    {
        // システムボタンの消去
        if (currentWithBack) current.comp.clearSystemButtons();
        current.clearSystemButtons(elm);
        return 0;
    } incontextof this,

    timeout : function(elm)
    {
        // タイムアウト処理の登録(カレントのみ)
        current.addTimeout(elm);
        return 0;
    } incontextof this,

    ctimeout : function(elm)
    {
        // タイムアウト処理の解除（カレントのみ）
        current.clearTimeout();
        return 0;
    } incontextof this,

    wheel : function(elm)
    {
        // ホイール処理の登録(カレントのみ)
        current.addWheel(elm);
        return 0;
    } incontextof this,

    cwheel : function(elm)
    {
        // ホイール処理の解除（カレントのみ）
        current.clearWheel();
        return 0;
    } incontextof this,
                  
    click : function(elm)
    {
        // クリック処理の登録(カレントのみ)
        current.addClick(elm);
        return 0;
    } incontextof this,

    afterline : function(elm)
    {
        // ラインモードで行終了時に呼び出される処理
        return 0;
    } incontextof this,

	l : function(elm)
	{
		// 行クリック待ち
		return showLineBreak(elm);
	} incontextof this,

    afterpage : function(elm) {
        // ページ処理完了後ハンドラ
        return 0;
    } incontextof this,

	p : function(elm)
	{
        // 自動ラベルモードは p タグにおいて有効

		if (!(erAfterPage && noErOnce)) {
			// 改ページ後消去が無効の場合は自動セーブしない
			// 選択肢などの前処理の部分で意味がある
			setAutoLabel();
		}

        if (lineMode == 2 || lineMode == 3) {
            afterPage = true;
            if (emptyLine) {
                return 0;
            }
            emptyLine = true;
        } else if (lineMode == 4 || lineMode == 5) {
            afterPage = true;
            emptyLine = true;
        }

        // 自動インデント解除
        if (autoIndent) {
            tagHandlers.endindent();
        }

        // ページクリック待ち
        if(historyWriteEnabled) historyLayer.reline();

        var ret = showPageBreak(elm);

        // ページ終了後に呼ばれるタグ
        insertTag("afterpage");
        
        // ページ待ち後に消去を強制投入
        if (erAfterPage) {
            if (!noErOnce) {
                insertTag("er", %[all:true]);
            }
            noErOnce = false;
        }

        return ret;

	} incontextof this,

	current : function(elm)
	{
		// 操作対象のメッセージレイヤの指定
		setCurrentMessageLayer(elm);
		return 0;
	} incontextof this,

	position : function(elm)
	{
		// メッセージレイヤの位置、属性を設定
		getMessageLayerObjectFromElm(elm).setPosition(elm);
		return 0;
	} incontextof this,

	uiload : function(elm)
	{
		// メッセージレイヤにUIパーツを一括で読み込む
        if (elm.storage !== void) {
            global.uiload(getMessageLayerObjectFromElm(elm), elm);
        } else {
            error("uiload:ファイルが指定されていません");
        }
		return 0;
	} incontextof this,

	sysuiload : function(elm)
	{
		// メッセージレイヤにUIパーツを一括で読み込む
        if (elm.storage !== void) {
            global.uiloadSystem(getMessageLayerObjectFromElm(elm), elm);
        } else {
            error("uiload:ファイルが指定されていません");
        }
		return 0;
	} incontextof this,

	ct : function(elm)
	{
		// メッセージレイヤのリセット(すべてのメッセージレイヤのクリアと
		// current のリセット)
		if(historyWriteEnabled) historyLayer.repage();
		clearMessageLayers(true);
		return 0;
	} incontextof this,

	cm : function(elm)
	{
		// メッセージレイヤのリセットを行うが、ct のように
		// current のリセットは行わないもの
		if(historyWriteEnabled) historyLayer.repage();
		clearMessageLayers(false);
		return 0;
	} incontextof this,

	er : function(elm)
	{
        // 現在のメッセージレイヤのクリア
		if(historyWriteEnabled) historyLayer.repage();
		if(currentWithBack) current.comp.clear(elm.all);
		current.clear(elm.all);
		return 0;
	} incontextof this,

	indent : function(elm)
	{
		// インデントの設定
		if(currentWithBack) current.comp.setIndent();
		current.setIndent();
		if(historyWriteEnabled) historyLayer.beginIndent();
		return 0;
	} incontextof this,

	endindent : function(elm)
	{
		// インデントの解除
		if(currentWithBack) current.comp.resetIndent();
		current.resetIndent();
		if(historyWriteEnabled) historyLayer.endIndent();
		return 0;
	} incontextof this,

	delay : function(elm)
	{
		// 文字表示速度の指定
		setDelay(elm);
		return 0;
	} incontextof this,

	nowait : function(elm)
	{
		// 一時的にノーウェイトで実行
		enterNoWait();
		return 0;
	} incontextof this,

	endnowait : function(elm)
	{
		// nowait の解除
		leaveNoWait();
		return 0;
	} incontextof this,

	locate : function(elm)
	{
		// 文字表示位置を指定
		if(currentWithBack) current.comp.locate(elm.x, elm.y);
		current.locate(elm.x, elm.y);
		return 0;
	} incontextof this,

	glyph : function(elm)
	{
		// クリック待ち記号を指定
		current.setGlyph(elm);
		return 0;
	} incontextof this,

	locklink : function(elm)
	{
		// リンクのロック
		lockMessageLayerSelProcess();
		return 0;
	} incontextof this,

	unlocklink : function(elm)
	{
		// リンクのアンロック
		unlockMessageLayerSelProcess();
		return 0;
	} incontextof this,

	//----------------------------------------- タグハンドラ群(システム操作) --

	loadplugin : function(elm)
	{
		// プラグインの読み込み
		Plugins.link(elm.module);
        if (debugLevel >= tkdlSimple)
            dm("プラグインを読み込みました : " + elm.module);
		return 0;
	} incontextof this,

	title : function(elm)
	{
		// タイトルの設定
		setTitle(elm.name);
		return 0;
	} incontextof this,

	s : function(elm)
	{
        // 実行停止
		stablePosibility = true;
		cancelSkip();
		if(!usingExtraConductor) incRecordLabel(true);
		inSleep = true;
		if(recordHistoryOfStore == 2) // 2 : 選択肢 ( @s タグ ) ごと
			setToRecordHistory();
		notifyStable();

        // メッセージレイヤタイムアウト呼び出し開始
        current.startTimeout();

        return -1;
	} incontextof this,

	clickskip : function(elm)
	{
        // クリックスキップの設定
		clickSkipEnabled = +elm.enabled;
		return 0;
	} incontextof this,

	nextskip : function(elm)
	{
		// 次の選択肢(/未読)まで進むの設定
		nextSkipEnabled = +elm.enabled;
		return 0;
	} incontextof this,

	cancelskip : function(elm)
	{
		// スキップの解除
		cancelSkip();
        setMenuAccessibleAll();
		return 0;
	} incontextof this,

	cancelautomode : function(elm)
	{
		// 「自動的に読み進む」の解除
		cancelAutoMode();
        setMenuAccessibleAll();
		return 0;
	} incontextof this,

	resetwait : function(elm)
	{
		// 時間原点の設定
		resetWait();
		return 0;
	} incontextof this,

	wait : function(elm)
	{
		// ウェイト
		return doWait(elm);
	} incontextof this,

	wc : function(elm)
	{
		// 指定文字分のウェイト
		return doWaitCh(elm);
	} incontextof this,

	waitclick : function(elm)
	{
		// クリックを待つ
		return waitClick(elm);
	} incontextof this,

	rclick : function(elm)
	{
		// 右クリックの動作設定
		setRightClickOptions(elm);
		return 0;
	} incontextof this,

	history : function(elm)
	{
		// メッセージ履歴レイヤの設定
		setHistoryOptions(elm);
		return 0;
	} incontextof this,

	clearhistory : function(elm)
	{
        // メッセージ履歴レイヤの消去
        historyLayer.clear();
        historyOfStore.clear();
		nextRecordHistory = false;
        return 0;
	} incontextof this,
                  
	showhistory : function(elm)
	{
		// メッセージ履歴レイヤの表示
		return showHistoryByScenario(elm);
	} incontextof this,

	hr : function(elm)
	{
		// メッセージ履歴レイヤに改行を出力
		if(historyWriteEnabled)
		{
			if(elm.repage !== void && +elm.repage)
				historyLayer.repage();
			else
				historyLayer.reline();
		}
		return 0;
	} incontextof this,

	hact : function(elm)
	{
		// メッセージ履歴にアクションを設定
		if(historyWriteEnabled)
			historyLayer.setNewAction(elm.exp);
		return 0;
	} incontextof this,

	endhact : function(elm)
	{
		// メッセージ履歴のアクションをクリア
		if(historyWriteEnabled)
			historyLayer.clearAction();
		return 0;
	} incontextof this,

	hidemessage : function(elm)
	{
		// メッセージを一時的に隠す
		return hideMessageLayerByScenario(elm);
	} incontextof this,

	quake : function(elm)
	{
		// 揺れ
		doQuake(elm);
		return 0;
	} incontextof this,

	stopquake : function(elm)
	{
		// 揺れの停止
		stopQuake();
		return 0;
	} incontextof this,

	wq : function(elm)
	{
		// 揺れの停止を待つ
		return waitQuake(elm);
	} incontextof this,

	autowc : function(elm)
	{
		// 自動ウェイト
		setAutoWait(elm);
		return 0;
	} incontextof this,

	cursor : function(elm)
	{
		// マウスカーソルの変更
		setCursor(elm);
		return 0;
	} incontextof this,

	close : function(elm)
	{
		// ウィンドウを閉じる
		closeByScript(elm);
		return -2;
	} incontextof this,

	copybookmark : function(elm)
	{
		// 栞をコピー
		copyBookMark(+elm.from, +elm.to);
		return 0;
	} incontextof this,

	erasebookmark : function(elm)
	{
		// 栞を削除
		eraseBookMark(+elm.place);
		return 0;
	} incontextof this,

	disablestore : function(elm)
	{
		// 栞を一時的に使用不可に
		tempDisableStore(elm);
		return 0;
	} incontextof this,

	store : function(elm)
	{
		// 栞の使用不可・使用可を設定する
		setStoreEnabled(+elm.enabled);
		return 0;
	} incontextof this,

	load : function(elm)
	{
		// 栞の読み込み
		if(elm.ask !== void && +elm.ask)
			loadBookMarkWithAsk(+elm.place);
		else
			loadBookMark(+elm.place);
		return -4;
	} incontextof this,

	save : function(elm)
	{
		// 栞の読み込み
		if(elm.ask !== void && +elm.ask)
			saveBookMarkWithAsk(+elm.place);
		else
			saveBookMark(+elm.place);
		return -4;
	} incontextof this,

	startanchor : function(elm)
	{
		// 「最初に戻る」の使用不可・使用可を設定する
		setStartAnchorEnabled(elm.enabled === void || +elm.enabled);
		return 0;
	} incontextof this,

	gotostart : function(elm)
	{
		// 「最初に戻る」
		if(elm.ask !== void && +elm.ask)
			goToStartWithAsk();
		else
			goToStart();
		return -4;
	} incontextof this,

	goback : function(elm)
	{
		// 通過記録を戻る
		if(elm.ask !== void && +elm.ask)
			goBackHistory(true);
		else
			goBackHistory(false);
		return -4;
	} incontextof this,

	record : function(elm)
	{
		// 通過記録をする
		setToRecordHistory();
		return 0;
	} incontextof this,

	tempsave : function(elm)
	{
		// 状態のメモリへの保存
		tempSave(+elm.place);
		return 0;
	} incontextof this,

	tempload : function(elm)
	{
		// 状態のメモリへの保存
		tempLoad(+elm.place, elm);
			//elm.se === void || +elm.se, elm.bgm === void || +elm.bgm,
			//elm.backlay !== void && +elm.backlay);
		return 0;
	} incontextof this,

	mappfont : function(elm)
	{
		// レンダリング済みフォントを現在のフォントにマッピング
		mapPrerenderedFont(elm.storage);
		return 0;
	} incontextof this,

	locksnapshot : function(elm)
	{
		// 画面のスナップショットをロックする
		lockSnapshot();
		return 0;
	} incontextof this,

	unlocksnapshot : function(elm)
	{
		// 画面のスナップショットのロックを解除する
		unlockSnapshot();
		return 0;
	} incontextof this,

	//------------------------------------------- タグハンドラ群(レイヤ操作) --

	image : function(elm)
	{
		// 画像読み込み
		updateBeforeCh = 1;
		var start = System.getTickCount();
		getLayerFromElm(elm).loadImages(elm);
        if (debugLevel >= tkdlVerbose)
            dm(elm.storage + " の読み込みに " + (System.getTickCount() - start) + "ms かかりました");
		return 0;
	} incontextof this,

	img : function(elm)
	{
		// 画像読み込み(imageとおなじ)
		updateBeforeCh = 1;
		var start = System.getTickCount();
		getLayerFromElm(elm).loadImages(elm);
        if (debugLevel >= tkdlVerbose)
            dm(elm.storage + " の読み込みに " + (System.getTickCount() - start) + "ms かかりました");
		return 0;
	} incontextof this,

	pimage : function(elm)
	{
		// 部分追加画像読み込み
		getLayerFromElm(elm).loadPartialImage(elm);
		return 0;
	} incontextof this,

	ptext : function(elm)
	{
		// 背景/前景レイヤへの文字描画
		getLayerFromElm(elm).drawReconstructibleText(elm);
		return 0;
	} incontextof this,

    clearlayers : function(elm) {
        updateBeforeCh = 1;
        var base;
        if (elm.page == "back") {
            base   = back;
        } else {
            base   = fore;
        }
        base.base.freeImage(elm);
        base.stage.freeImage(elm);
        base.stage.visible = false;
        base.event.freeImage(elm);
        base.event.visible = false;
        for(var i = base.layers.count-1; i >= 0; i--) {
            base.layers[i].freeImage(elm);
            base.layers[i].visible = false;
        }
        for(var i = base.messages.count-1; i >= 0; i--) {
            base.messages[i].clear(true);
            base.messages[i].visible = false;
        }
        // 選択肢窓消去
        hideSelect();
        hideMapSelect();
        hideTransLayer();
        return 0;
    } incontextof this,

    syncmsg : function(elm) {
        //dm("メッセージ窓シンクロ");
        // メッセージ窓だけ表から裏にコピー
        var messages = fore.messages;
        for(var i = messages.count-1; i >= 0; i--) messages[i].assignComp();
        return 0;
    } incontextof this,
                  
	freeimage : function(elm)
	{
		// 画像のクリア
		updateBeforeCh = 1;
		getLayerFromElm(elm).freeImage(elm);
		return 0;
	} incontextof this,

	animstart : function(elm)
	{
		// アニメーションの開始
		updateBeforeCh = 1;
		getLayerFromElm(elm).startAnim(elm);
		return 0;
	} incontextof this,

	animstop : function(elm)
	{
		// アニメーションの停止
		updateBeforeCh = 1;
		getLayerFromElm(elm).stopAnim(+elm.seg);
		return 0;
	} incontextof this,

	wa : function(elm)
	{
		// アニメーションの停止待ち
		return waitAnimation(elm);
	} incontextof this,

	mapimage : function(elm)
	{
		// クリッカブルマップの領域画像を読み込む
		getLayerFromElm(elm).loadProvinceImage(elm.storage);
		return 0;
	} incontextof this,

	mapaction : function(elm)
	{
		// クリッカブルマップの領域アクション定義を読み込む
		getLayerFromElm(elm).loadProvinceActions(elm.storage);
		return 0;
	} incontextof this,

	mapdisable : function(elm)
	{
		// クリッカブルマップを無効にする
		getLayerFromElm(elm).clearProvinceActions();
		return 0;
	} incontextof this,

	backlay : function(elm)
	{
		// レイヤを裏画面にコピー
		updateBeforeCh = 1;
		backupLayer(elm, true);
		return 0;
	} incontextof this,

	forelay : function(elm)
	{
		// レイヤを表画面にコピー
		updateBeforeCh = 1;
		backupLayer(elm, false);
		return 0;
	} incontextof this,

	copylay : function(elm)
	{
		// 同種のレイヤ同士のコピー
		updateBeforeCh = 1;
		copyLayer(elm);
		return 0;
	} incontextof this,

	layopt : function(elm)
	{
		// レイヤのオプションを設定
		updateBeforeCh = 1;
        getLayerFromElm(elm).setOptions(elm);
		return 0;
	} incontextof this,

    laylevel : function(elm)
    {
        updateBeforeCh = 1;
        var base = (elm.page == 'back') ? back : fore;
        toLevel(elm.layer, elm.level, base);
        return 0;
	} incontextof this,

    layfront : function(elm)
    {
        updateBeforeCh = 1;
        var base = (elm.page == 'back') ? back : fore;
        toFront(elm.layer, base);
        return 0;
	} incontextof this,

    layback : function(elm)
    {
        updateBeforeCh = 1;
        var base = (elm.page == 'back') ? back : fore;
        toBack(elm.layer, base);
        return 0;
	} incontextof this,
                  
	trans : function(elm)
	{
        // トランジションの開始
		var layer = getLayerPageFromElm(elm, false);
		if (layer == fore.base)  {
			if (selectShowing) {
				selectLayer.setParent(back.base, 1000000);
			}
			if (mapSelectShowing) {
				mapSelectLayer.setParent(back.base, 1000000);
			}
		}
		layer.beginTransition(elm);
		return 0;
	} incontextof this,

	wt : function(elm)
	{
        // トランジションを待つ
		return waitTransition(elm);
	} incontextof this,

	stoptrans : function(elm)
	{
		// トランジションを停止する
		stopAllTransitions();
		return 0;
	} incontextof this,

	move : function(elm)
	{
		// 自動移動の開始
		getLayerFromElm(elm).beginMove(elm);
		return 0;
	} incontextof this,

	wm : function(elm)
	{
		//  自動移動を待つ
		return waitMove(elm);
	} incontextof this,

	stopmove : function(elm)
	{
		// 自動移動を停止する
		stopAllMoves();
		return 0;
	} incontextof this,

	laycount : function(elm)
	{
		updateBeforeCh = 1;
		allocateCharacterLayers(+elm.layers) if elm.layers !== void;
		allocateMessageLayers(+elm.messages) if elm.messages !== void;
		return 0;
	} incontextof this,

    // アクション開始
    action : function(elm)
    {
		var target;
		if (elm.layer !== void) {
			target = getLayerFromElm(elm);
		} else if (typeof elm.target == "Object") {
			target = elm.target;
		} else if (typeof elm.target == "String") {
			target = Scripts.eval(elm.target);
		}
		if (typeof target == "Object") {
			var action;
			if (elm.action !== void) {
				// 直接アクション構造が指定されている場合
				action = elm.action;
			} else {
				action = %[];
				// アクション構造をパラメータから生成
				(Dictionary.assign incontextof action)(elm);
				delete action.tagname;
				delete action.layer;
				delete action.page;
				delete action.target;
			}
			if (target instanceof "GraphicLayerEx") {
				target.beginAction(action, elm.hide);
			} else {
				beginAction(target, action, onActionCompleted);
			}
		} else {
			error("アクションはオブジェクトに指定する必要があります");
		}
		return 0;
    } incontextof this,

    // アクション停止
	stopaction : function(elm)
	{
        updateBeforeCh = 1;
        var target;
		if (elm.layer !== void) {
			target = getLayerFromElm(elm);
		} else if (typeof elm.target == "Object") {
			target = elm.target;
		} else if (typeof elm.target == "String") {
			target = Scripts.eval(elm.target);
		}
		if (target !== void) {
			if (typeof target == "Object") {
				stopAction(target);
			} else {
				dm("アクションはオブジェクトに指定する必要があります");
			}
		} else {
			stopAllActions();
			if (typeof stopActionHandler != "undefined") {
				stopActionHandler();
			}
		}
        return 0;
	} incontextof this,

	wact : function(elm)
	{
        var target;
		if (elm.layer !== void) {
			target = getLayerFromElm(elm);
		} else if (typeof elm.target == "Object") {
			target = elm.target;
		} else if (typeof elm.target == "String") {
			target = Scripts.eval(elm.target);
		}
		if (target !== void) {
			if (typeof target == "Object") {
				return waitAction(target, elm.canskip);
			} else {
				dm("アクション待ちはオブジェクトに指定する必要があります");
			}
		} else {
			return waitAllAction(elm.canskip);
		}
		return 0;
	} incontextof this,
                  
	//------------------------------ タグハンドラ群(効果音・BGM・ビデオ操作) --

	playbgm : function(elm)
	{
        // BGM の演奏
		bgm.play(elm);
        clearBgmStop();
        clearBgmLabel();
        return 0;
	} incontextof this,

	stopbgm : function(elm)
	{
		// BGM の停止
		bgm.stop();
		return 0;
	} incontextof this,

	pausebgm : function(elm)
	{
		// BGM の一時停止
		bgm.pause();
		return 0;
	} incontextof this,

	resumebgm : function(elm)
	{
		// BGM の再開
		bgm.resume();
		return 0;
	} incontextof this,

	fadeinbgm : function(elm)
	{
		// BGM のフェードイン
		bgm.fadeIn(elm);
		return 0;
	} incontextof this,

	fadeoutbgm : function(elm)
	{
		// BGM のフェードアウト
		bgm.fadeOut(elm);
		return 0;
	} incontextof this,

	fadepausebgm : function(elm)
	{
		// BGM のフェードポーズ
		bgm.fadePause(elm);
		return 0;
	} incontextof this,
                  
	fadebgm : function(elm)
	{
		// BGM の指定音量までのフェード
		bgm.fade(elm);
		return 0;
	} incontextof this,

	xchgbgm : function(elm)
	{
		// BGM の入れ替え/クロスフェード
		bgm.exchange(elm);
        clearBgmStop();
        clearBgmLabel();
		return 0;
	} incontextof this,

	bgmopt : function(elm)
	{
		// BGM のオプション設定
		bgm.setOptions(elm);
		return 0;
	} incontextof this,

    setbgmstop : function(elm)
	{
		// BGM の終了時コールバックの登録
        setBgmStop(elm);
        return 0;
	} incontextof this,

    clearbgmstop : function(elm)
	{
		// BGM の終了時コールバックの削除
        clearBgmStop();
        return 0;
	} incontextof this,

    setbgmlabel : function(elm) {
        // BGM のラベル時コールバックの登録
        setBgmLabel(elm);
        return 0;
    } incontextof this,

    clearbgmlabel : function(elm)
	{
        // BGM のラベル時コールバックの削除
        clearBgmLabel();
        return 0;
	} incontextof this,
                  
	wb : function(elm)
	{
		// BGM のフェード終了待ち
		return waitBGMFade(elm);
	} incontextof this,

	wl : function(elm)
	{
		// BGM の再生終了待ち
		return waitBGMStop(elm);
	} incontextof this,

	playse : function(elm)
	{
        // 効果音の再生
		se[+elm.buf].play(elm);
		return 0;
	} incontextof this,

	stopse : function(elm)
	{
		// 効果音の停止
		se[+elm.buf].stop();
		return 0;
	} incontextof this,

	fadeinse : function(elm)
	{
		// 効果音のフェードイン再生
		se[+elm.buf].fadeIn(elm);
		return 0;
	} incontextof this,

	fadeoutse : function(elm)
	{
		// 効果音のフェードアウト
		se[+elm.buf].fadeOut(elm);
		return 0;
	} incontextof this,

	fadese : function(elm)
	{
		// 効果音のフェード
		se[+elm.buf].fade(elm);
		return 0;
	} incontextof this,

	seopt : function(elm)
	{
		// 効果音のフェード
		se[+elm.buf].setOptions(elm);
		return 0;
	} incontextof this,

	wf : function(elm)
	{
		// 効果音のフェード終了待ち
		return waitSEFade(elm);
	} incontextof this,

	ws : function(elm)
	{
		// 効果音の再生終了待ち
		return waitSEStop(elm);
	} incontextof this,

	video : function(elm)
	{
		// ムービーのオプションを設定する
		movies[+elm.slot].setOptions(elm);
		return 0;
	} incontextof this,

	playvideo : function(elm)
	{
		// ムービーを再生する
		movies[+elm.slot].play(elm.storage);
		return 0;
	} incontextof this,

	stopvideo : function(elm)
	{
		// ムービーを停止する
		movies[+elm.slot].stop();
		return 0;
	} incontextof this,

	openvideo : function(elm)
	{
		// ムービー再生の準備をする
		movies[+elm.slot].open(elm.storage);
		return 0;
	} incontextof this,

	wv : function(elm)
	{
		// ムービーの再生終了を待つ
		return waitMovieStop(elm);
	} incontextof this,

// Start: Add: T.Imoto
	wp : function(elm)
	{
		// ムービーのピリオドイベントを待つ
		return waitMoviePeriod(elm);
	} incontextof this,

	pausevideo : function(elm)
	{
		movies[+elm.slot].pause();
		return 0;
	} incontextof this,

	resumevideo : function(elm)
	{
		movies[+elm.slot].resume();
		return 0;
	} incontextof this,

	preparevideo : function(elm)
	{
		movies[+elm.slot].prepare();
		return 0;
	} incontextof this,

	rewindvideo : function(elm)
	{
		movies[+elm.slot].rewind();
		return 0;
	} incontextof this,

	videolayer : function(elm)
	{
		movies[+elm.slot].storeLayer( elm.layer, elm.page, elm.channel );
		movies[+elm.slot].setVideoLayer(getLayerFromElm(elm),elm);
		return 0;
	} incontextof this,

	clearvideolayer : function(elm)
	{
		movies[+elm.slot].cancelLayer( elm.channel );
		movies[+elm.slot].setVideoLayer(null,elm);
		return 0;
	} incontextof this,

	videosegloop : function(elm)
	{
		movies[+elm.slot].setSegment(elm);
		return 0;
	} incontextof this,

	cancelvideosegloop : function(elm)
	{
		movies[+elm.slot].cancelSegmentLoop();
		return 0;
	} incontextof this,

	videoevent : function(elm)
	{
		movies[+elm.slot].setPeriod(elm);
		return 0;
	} incontextof this,

	cancelvideoevent : function(elm)
	{
		movies[+elm.slot].cancelPeriodEvent();
		return 0;
	} incontextof this,
// End: Add: T.Imoto

	//--------------------------------------- タグハンドラ群(変数・TJS 操作) --

	eval : function(elm)
	{
		// 式の評価
		Scripts.eval(elm.exp);
		return 0;
	} incontextof this,

	trace : function(elm)
	{
		// 式のトレース表示
		var exp = elm.exp;
		var result = Scripts.eval(exp);
        
        if (result instanceof "Dictionary") {
            dm("▼[trace] expression=\"" + exp + "\"");
            var names = [];
            names.assign(result);
            for (var i=0; i<names.count; i+= 2) {
                var name = names[i];
                var value = names[i+1];
                dm("▼[trace] name=\"" + name + "\" type of value=" + typeof value + 
                   " value=" + value);
            }
        } else if (result instanceof "Array") {
            dm("▼[trace] expression=\"" + exp +  "\"");
            for (var i=0; i<result.count; i++) {
                var value = result[i];
                dm("▼[trace] idx=\"" + i + "\" type of value=" + typeof value + 
                   " value=" + value);
            }
        } else {
            dm("▼[trace] expression=\"" + exp + "\" type of result=" + typeof result + 
               " result=" + result);
        }
		return 0;
	} incontextof this,

	input : function(elm)
	{
		// 文字列の入力
		inputString(elm);
		return 0;
	} incontextof this,

	clearsysvar : function(elm)
	{
		// システム変数のクリア
		clearSystemVariables();
		return 0;
	} incontextof this,

	clearvar : function(elm)
	{
		// ゲーム変数のクリア
		clearVariables();
		return 0;
	} incontextof this,

	clearplaytime : function(elm)
	{
        // プレイ時間のクリア
		clearPlayTime();
		return 0;
	} incontextof this,

	waittrig : function(elm)
	{
		// トリガを待つ
		return waitTrigger(elm);
	} incontextof this,

	//----------------------------------------- タグハンドラ群(選択肢) --

    seladd : function(elm)
    {
        addSelect(elm);
        return 0;
	} incontextof this,

    select : function(elm)
    {
		if (selectLayer.msgoff && setCurrentMessageLayerVisible(false)) {
            // 処理待ち
            return -3;
        }

		f.selectDoneFlag = true;

        if (recordHistoryOfStore == 3) // 2 : 選択肢 ( @s タグ ) ごと
            setToRecordHistory();

        selectPrevAutoMode = autoMode;
        selectPrevSkipMode = skipMode;
        if (skipMode < 7) {
            cancelSkip();
        }
        cancelAutoMode();
        
        stablePosibility = true;
        notifyStable();
        
        f.selDoneStorage = elm.storage if elm.storage !== void;
        f.selDoneTarget  = elm.target  if elm.target  !== void;

        showSelect();

        conductor.sleep();
        conductor.interrupt();
        setMenuAccessibleAll();
        return -1;
	} incontextof this,

	selopt : function(elm)
	{
		setSelectOptions(elm);
		return 0;
	} incontextof this,

	seldone : function(elm)
	{
        if (f.selDoneStorage != "" || f.selDoneTarget != "") {
            process(f.selDoneStorage, f.selDoneTarget);
        } else {
            return tagHandlers.s(elm);
        }
		return 0;
	} incontextof this,

	doneselect : function(elm)
	{
        hideSelect();
        afterSelect();
        setMenuAccessibleAll();
		return 0;
	} incontextof this,

	//----------------------------------------- タグハンドラ群(選択肢) --

    mselinit : function(elm)
    {
        initMapSelect();
        return 0;
	} incontextof this,

    mselbutton : function(elm)
    {
        addMapSelectButton(elm);
        return 0;
	} incontextof this,

    mselpos : function(elm)
    {
        addMapSelectPosition(elm);
        return 0;
	} incontextof this,

    mseladd : function(elm)
    {
        addMapSelect(elm);
        return 0;
	} incontextof this,

    mselect : function(elm)
    {
        if (mapSelectLayer.msgoff && setCurrentMessageLayerVisible(false)) {
            // 処理待ち
            return -3;
        }

        if (recordHistoryOfStore == 3) // 2 : 選択肢 ( @s タグ ) ごと
            setToRecordHistory();

        selectPrevAutoMode = autoMode;
        selectPrevSkipMode = skipMode;
        if (skipMode < 7) {
            cancelSkip();
        }
        cancelAutoMode();

        stablePosibility = true;
        notifyStable();

        showMapSelect();

        conductor.sleep();
        conductor.interrupt();
		setMenuAccessibleAll();
        return -1;
	} incontextof this,

	mselopt : function(elm)
	{
        setMapSelectOptions(elm);
		return 0;
	} incontextof this,

	donemapselect : function(elm)
	{
        hideMapSelect();
        afterSelect();
        setMenuAccessibleAll();
		return 0;
	} incontextof this,

	//----------------------------------------- タグハンドラ群(特殊分岐処理) --

	next : function(elm)
	{
		if ((elm.storage !== void || elm.target !== void) && (elm.eval === void || elm.eval == "" || Scripts.eval(elm.eval))) {
			kag.process(elm.storage, elm.target);
		}
		return 0;
	} incontextof this,
				  
	//----------------------------------------- タグハンドラ群(特殊スキップ処理) --

    beginskip : function(elm)
	{
        // 現在のスキップモードを記録
        if (prevSkipMode !== void) {
            throw new Exception("beginskipは入れ子できません!!!");
        } else {
            prevSkipMode = skipMode;
            if (skipMode) {
                // 既にスキップしてた場合は停止できないスキップ状態にする
                skipMode = 6;
            }
        }
        return 0;
	} incontextof this,

    endskip : function(elm)
	{
        if (prevSkipMode == 0) {
            cancelSkip();
        } else {
            skipMode = prevSkipMode;
        }
        prevSkipMode = void;
        return 0;
	} incontextof this,

	//----------------------------------------------- 自動ラベル処理 --

    autolabel : function(elm)
	{
        // 自動ラベル処理用特殊タグ
        // 通常の KAG からよぶことはない。
        // 改ページ処理によって行頭に擬似的に挿入される
        switch (autoLabelType) {
        case 0:
            // 間接ラベル方式で保存
            conductor.callLabel("");
            conductor.loadScenario("autolabel.ks");
            conductor.goToLabel("*autoLabelLabel");
            break;
        case 1:
            // 行指定モードで保存処理
			pushHistoryOfStore();
			storeFlags(true);
			storeLabelPassed = true;
			if(!(allskip || getCurrentRead()) && skipMode < 4) {
				cancelSkip(); // 未読なのでスキップを停止
			}
			setMenuAccessibleAll();
			break;
        }
        return 0;
	} incontextof this,

	//----------------------------------------------- 回想モード --

    recollection : function(elm)
	{
        startRecollection(elm);
        return 0;
	} incontextof this,

    stoprecollection : function(elm)
    {
        stopRecollection(elm);
        return 0;
    } incontextof this,
                  
    endrecollection : function(elm)
	{
        return endRecollection();
	} incontextof this,

	//----------------------------------------------- レイヤトランジション --

	ltbegin : function(elm)
	{
		return layerTransBegin(elm);
	} incontextof this,

	ltend : function(elm)
	{
		return layerTransEnd(elm);
	} incontextof this,
                  
	//----------------------------------------------- タグハンドラ群の終わり --

		interrupt : function(elm) { return -2; } incontextof this ];
	}

	//------------------------------------------------------ 特殊変数処理 --
    // システム画面用に簡易参照できるメソッド・プロパティを追加

    /**
     * BGM 有効値の設定
     * true / false
     */
    property bgmenable {
        getter() {
            if (scflags.bgm !== void && scflags.bgm.enable !== void) {
                return scflags.bgm.enable;
            }
            return true;
        }
        setter(v) {
            if (scflags.bgm === void) {
                scflags.bgm = %[];
            }
            scflags.bgm.enable = v;
            bgm.restoreSystemState(scflags);
        }
    }
    
    /**
     * BGM ボリューム値の設定
     * 100段階指定
     */
    property bgmvolume {
        getter() {
            //dm("bgmVolume 取得");
            if (scflags.bgm !== void && scflags.bgm.globalVolume !== void) {
                return scflags.bgm.globalVolume / 1000;
            }
            return 100;
        }
        setter(v) {
            if (scflags.bgm === void) {
                scflags.bgm = %[];
            }
            scflags.bgm.globalVolume = v * 1000;
            bgm.restoreSystemState(scflags);
        }
    }

    /**
     * BGM 有効値の設定
     * true / false
     */
    property seenable {
        getter() {
            if (scflags.se !== void && scflags.se[0] !== void && scflags.se[0].enable !== void) {
                return scflags.se[0].enable;
            }
            return true;
        }
        setter(v) {
            if (scflags.se === void) {
                scflags.se = %[];
            }
            for(var i = 0; i<numSEBuffers+1; i++) {
                if (scflags.se[i] === void) {
                    scflags.se[i] = %[];
                }
                scflags.se[i].enable = v;
                se[i].restoreSystemState(scflags);
            }
        }
    }
    
    /**
     * SE ボリューム値の設定
     * 100段階設定
     */
    property sevolume {
        getter() {
            if (scflags.se !== void && scflags.se[0] !== void) {
                return scflags.se[0].globalVolume / 1000;
            }
            return 100;
        }
        setter(v) {
            if (scflags.se === void) {
                scflags.se = %[];
            }
            for(var i = 0; i<numSEBuffers+1; i++) {
                if (scflags.se[i] === void) {
                    scflags.se[i] = %[];
                }
                scflags.se[i].globalVolume = v * 1000;
                se[i].restoreSystemState(scflags);
            }
        }
    }

    /**
     * ボイス有効値の設定
     * true / false
     */
    property voiceenable {
        getter() {
            if (scflags.voice !== void && scflags.voice.enable !== void) {
                return scflags.voice.enable;
            }
            return true;
        }
        setter(v) {
            if (scflags.voice === void) {
                scflags.voice = %[];
            }
            scflags.voice.enable = v;
        }
    }
    
    /**
     * ボイスの代表ボリューム
     * 100段階設定
     */
    property voicevolume {
        getter() {
            if (scflags.voice !== void && scflags.voice.globalVolume !== void) {
                return scflags.voice.globalVolume / 1000;
            }
            return 100;
        }
        setter(v) {
            if (scflags.voice === void) {
                scflags.voice = %[];
            }
            scflags.voice.globalVolume = v * 1000;
        }
    }

    /**
     * 指定された名前のキャラのボイスが有効かどうか
     */
    function getVoiceOn(name) {
        //dm("ボイス有効確認:" + name);
        if (name === void) {
            name = "etc";
        }
        if (scflags.voiceon !== void) {
            if (scflags.voiceon[name] !== void) {
                return scflags.voiceon[name];
            }
        }
        return true;
    }

    /**
     * 指定された名前のキャラのボイスを有効にする
     */
    function setVoiceOn(name, on=true) {
        if (name === void) {
            name = "etc";
        }
        if (scflags.voiceon === void) {
            scflags.voiceon = %[];
        }
        scflags.voiceon[name] = on;
    }

    /**
     * 指定された名前のキャラのボイスを有効にする
     */
    function getVoiceVolume(name) {
        if (name === void) {
            name = "etc";
        }
        if (scflags.voice !== void && 
            scflags.voice[name] !== void) {
            return scflags.voice[name] / 1000;
        }
        return voicevolume;
    }
    
    /**
     * 指定された名前のキャラのボイスを有効にする
     */
    function setVoiceVolume(name, vol) {
        if (name === void) {
            name = "etc";
        }
        if (scflags.voice === void) {
            scflags.voice = %[];
        }
        scflags.voice[name] = vol * 1000;
    }

    /**
     * テキスト速度制御
     * 0〜10 で指定 (10が最速)
     */
    property textspeed {
        getter() {
            return 10 - (userChSpeed / (chSpeeds.slow / 10));
        }
        setter(v) {
            userChSpeed = (10 - v) * (chSpeeds.slow / 10);
            if (userChSpeed <= chSpeeds.fast) {
                if (typeof this.chFastMenuItem != "undefined") {
                    this.chFastMenuItem.checked = true;
                }
            } else if (userChSpeed <= chSpeeds.normal) {
                if (typeof this.chNormalMenuItem != "undefined") {
                    this.chNormalMenuItem.checked = true;
                }
            } else {
				if (typeof this.chSlowMenuItem != "undefined") {
                    this.chSlowMenuItem.checked = true;
                }
            }
        }
    }

    /**
     * 自動再生時待ち時間制御
     * 0〜10で指定 (10が最速）
     */
    property autospeed {
        getter() {
            return 10 - (autoModePageWait / (autoModePageWaits.slow / 10));
        }
        setter(v) {
            autoModePageWait = (int)((10 - v) * (autoModePageWaits.slow / 10));
            autoModeLineWait = (int)((10 - v) * (autoModeLineWaits.slow / 10));
            if (autoModePageWait <= autoModePageWaits.fast) {
                if (typeof this.autoModeFastMenuItem != "undefined") {
                    this.autoModeFastMenuItem.checked = true;
                }
            } else if (autoModePageWait <= autoModePageWaits.faster) {
                if (typeof this.autoModeFasterMenuItem != "undefined") {
                    this.autoModeFasterMenuItem.checked = true;
                }
            } else if (autoModePageWait <= autoModePageWaits.medium) {
                if (typeof this.autoModeMediumMenuItem != "undefined") {
                    this.autoModeMediumMenuItem.checked = true;
                }
            } else if (autoModePageWait <= autoModePageWaits.slower) {
                if (typeof this.autoModeSlowerMenuItem != "undefined") {
                    this.autoModeSlowerMenuItem.checked = true;
                }
            } else {
                if (typeof this.autoModeSlowMenuItem != "undefined") {
                    this.autoModeSlowMenuItem.checked = true;
                }
            } 
        }
    }

	function updateEffectButton() {
		if (noeffect) {
			if (typeof this.noeffectMenuItem != "undefined") {
				this.noeffectMenuItem.checked = true;
			}
		} else {
			if (typeof this.effectMenuItem != "undefined") {
				this.effectMenuItem.checked = true;
			}
		}
	}
	
    /**
     * 描画速度 (トランジションの再生倍率を指定する）
     */
    property drawspeed {
        getter() {
            if (scflags.drawspeed === void) {
                return 1.0;
            }
            return scflags.drawspeed;
        }
        setter(v) {
			scflags.drawspeed = v;
			updateEffectButton();
        }
    }
    
    /**
     * エフェクトの有効・無効（トランジション補正と連動）
     */
    property noeffect {
        getter() {
            if (scflags.drawspeed === void) {
                return false;
            }
            return scflags.drawspeed == 0;
        }
        setter(v) {
            if (v) {
                scflags.drawspeed = 0;
			} else {
				delete scflags.drawspeed;
			}
			updateEffectButton();
        }
    }

    /**
     * ボイスの再生倍速
     */
    property voicespeed {
        getter() {
            if (scflags.voicespeed === void) {
                return 1.0;
            }
            return scflags.voicespeed;
        }
        setter(v) {
            scflags.voicespeed = v;
        }
    }
    
	function onVoiceSpeedMenuItemClick(sender)
	{
		sender.checked = true;
        voicespeed = sender.speed;
        if (typeof updateVoice !== "undefined") {
            updateVoice();
        }
    }

    // ----------------------------------------------------------
    // エラーログ処理
    // ----------------------------------------------------------

    // デバッグレベル初期値
    var _debugLevel = tkdlNone;
    
    /**
     * デバッグレベル
     */
    property debugLevel {
        setter(v) {
            _debugLevel = v;
            if (mainConductor !== void) {
                mainConductor.debugLevel = v;
                extraConductor.debugLevel = v;
            }
        }
        getter() {
            return _debugLevel;
        }
    }

	function onDebugLevelNoneMenuItemClick(sender)
	{
        debugLevel = tkdlNone;
        if(typeof this.debugLevelNoneMenuItem != "undefined")
            debugLevelNoneMenuItem.checked = true;
        saveSystemVariables();
	}

	function onDebugLevelSimpleMenuItemClick(sender)
	{
        debugLevel = tkdlSimple;
        if(typeof this.debugLevelSimpleMenuItem != "undefined")
            debugLevelSimpleMenuItem.checked = true;
        saveSystemVariables();
	}

    function onDebugLevelVerboseMenuItemClick(sender)
	{
        debugLevel = tkdlVerbose;
        if(typeof this.debugLevelVerboseMenuItem != "undefined")
            debugLevelVerboseMenuItem.checked = true;
        saveSystemVariables();
	}
    
	var logMode = false;
	var cmdLog = [];
	var imageLog = [];
	var soundLog = [];
	var voiceLog = [];

    function error(msg) {
        if (debugLevel >= tkdlSimple) dm(msg);
    }
    
    function errorLine(target, msg) {
		msg = "%s:%s: %s".sprintf(conductor.curStorage, conductor.curLine, msg);
		if (debugLevel >= tkdlSimple) dm(msg);
		if (logMode) {
			target.add(msg);
		}
    }

    /**
	 * 未知の命令
     */
	function errorCmd(msg) {
		errorLine(cmdLog, msg);
    }

	
    /**
     * 画像ファイルがロードできない場合
     */
    function errorImage(msg) {
        errorLine(imageLog, msg);
    }

    /**
     * ボイスファイルがロードできない場合
     */
    function errorSound(msg) {
        errorLine(soundLog, msg);
    }

    /**
     * ボイスファイルがロードできない場合
     */
    function errorVoice(msg) {
        errorLine(voiceLog, msg);
    }

    /**
     * ログを初期化する
     */
    function initLog() {
		cmdLog.clear();
		imageLog.clear();
        soundLog.clear();
        voiceLog.clear();
    }

    /**
     * ログを出力する
     */
    function outputLog() {
        if (logMode) {
			cmdLog.save(Debug.logLocation + "/cmderror.log");
			imageLog.save(Debug.logLocation + "/imageerror.log");
            soundLog.save(Debug.logLocation + "/sounderror.log");
            voiceLog.save(Debug.logLocation + "/voiceerror.log");
            initLog();
        }
    }

    // -------------------------------------------------------------
    
    /**
     * デバッグ窓表示内容の更新
     */
    function updateDebugInfo() {
        if (_debugwin !== void && debugwin.visible) {
			var title = "%06d:%s %s".sprintf(conductor.runLine, conductor.curStorage, conductor.runLabel);
			debugwin.fillRect(0, 0, debugwin.width, debugwin.height, 0xa0000000);
			debugwin.drawText(10, 10, title , 0xffffff);
			debugwin.drawText(10, 30, conductor.runLineStr, 0xffffff);
        }
    }

    /**
     * デバッグ窓の ON/OFF
     */
    function onDebugWinMenuItemClick(sender)
	{
        debugwin.visible = !debugwin.visible;
        if(typeof this.debugWinMenuItem != "undefined")
            debugWinMenuItem.checked = debugwin.visible;
        if (debugwin.visible) {
            updateDebugInfo();
        }
        saveSystemVariables();
	}

    // -------------------------------------------------------------

    // 外部制御機構
    var debugControl;

    // デバッグ制御可能かどうかの判定
    function canDebugControl() {
        if (debugControl === void) {
            if (typeof global.wmrStart != "undefined") {
                wmrStart(this);
                debugControl = true;
            } else {
                debugControl = false;
            }
        }
		//dm("デバッグ制御判定:" + debugControl);
        return debugControl;
    }

    // 外部制御
    function onCopyData(msg) {
        if (debugControl) {
            // タブ区切り
            var args = msg.split("\t");
            if (autoLabelSaveMode) {
                if (args[0] == "jump") {
                    try {
                        loadBookMarkFromFile(getBookMarkFileNameAtLabel(args[1], args[2]));
                        if (args[3] == "next") {
                            skipToLabel();
                        }
                    } catch (e) {
                        System.inform("該当ファイル＆ラベルはロードできませんでした " + args[1] + ":" + args[2]);
                    }
                }
            }
        }
    }
    
    // -------------------------------------------------------------
    
    // 全鑑賞モード （一部システムがフラグとしてのみ利用）
    var allseen = false;
}


// TJS スクリプトはここで終わり
"
END_OF_TJS_SCRIPT
# "; /*

# assign でコピーすべき変数の再生成を行う perl スクリプト

open FH, "MainWindow.tjs" or die;
undef($/);
$content = <FH>;

$list_store = '';
$list_restore = '';
while($content =~ /\/\*C\*\/var\s+(\w+)/gs)
{
	$list_store .= "\t\tf.$1 = $1;\n";
	$list_restore .= "\t\t$1 = f.$1 if f.$1 !== void;\n";
}

$content =~
s/\t\t\/\/ \[start_store_vars\]\n.*?\t\t\/\/ \[end_store_vars\]/\t\t\/\/ \[start_store_vars\]\n$list_store\t\t\/\/ \[end_store_vars\]/s;
$content =~
s/\t\t\/\/ \[start_restore_vars\]\n.*?\t\t\/\/ \[end_restore_vars\]/\t\t\/\/ \[start_restore_vars\]\n$list_restore\t\t\/\/ \[end_restore_vars\]/s;

open FH, ">MainWindow.tjs" or die;
print FH $content;


# */

