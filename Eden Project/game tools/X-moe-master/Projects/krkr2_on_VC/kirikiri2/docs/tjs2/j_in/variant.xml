<?xml version="1.0" encoding="Shift_JIS" ?>
<doc>
<title>tTJSVariant 型</title>

<para>
<ptitle>tTJSVariant とは</ptitle>
　tTJSVariant 型は、TJS2 における「変数」のデータを扱う型です。<r/>
　tTJSVariant 型は内部型をもっていて、一つの型で void(未定義)、オブジェクト、整数、実数、文字列、オクテット列を表すことができます。<r/>
　また、演算に関してはこれらの内部型の変換を自動的に扱います。<r/>
</para>



<para>
<ptitle>tTJSVariantType</ptitle>
　tTJSVariant の内部型を表す列挙型です。tTJSVariant::<kw>Type</kw> メソッドで取得することができます。<r/>
<r/>
<dl>

<dt><kw>tvtVoid</kw></dt>
<dd>
　void型です。tTJSVariant 型を引数無しのコンストラクタで構築した場合はこの型になります。nullではありません。
</dd>

<dt><kw>tvtObject</kw></dt>
<dd>
　オブジェクト型です。null の場合はこの内部型になります。
</dd>

<dt><kw>tvtString</kw></dt>
<dd>
　文字列型です。
</dd>

<dt><kw>tvtOctet</kw></dt>
<dd>
　オクテット列型です。
</dd>

<dt><kw>tvtInteger</kw></dt>
<dd>
　整数型です。tTVInteger 型の数値を保持します。
</dd>

<dt><kw>tvtReal</kw></dt>
<dd>
　実数型です。tTVReal 型の数値を保持します。
</dd>
</dl>

</para>


<para>
<ptitle>オブジェクト参照</ptitle>
　内部型のうち、オブジェクトは参照カウンタ方式による管理を行います。<r/>
　tTJSVariant 自体は参照カウンタの管理を自動的に行いますが、tTJSVariant から <link href="interface"/> を取得する各メソッドや、tTJSVariantClosure 型を取得するメソッドからオブジェクトへのポインタを取り出したあとの、参照カウンタの管理には関知しないので注意してください。<r/>
</para>



<para>
<ptitle>オブジェクト型</ptitle>
　<kw>tTJSVariantClosure</kw> 型は、tTJSVariant 内部でオブジェクトを保持している型です。この型には iTJSDispatch2 インターフェースを２つ保持する機構があり、一つはオブジェクトそのもの、もう一つはそのオブジェクトが実行されるコンテキストの情報を持っています。<r/>
　tTJSVariantClosure 型は iTJSDispatch2 インターフェースが持っている各メソッドを持っています。tTJSVariantClosure 経由でこれらのメソッドにアクセスすれば、実行コンテキストを正しく処理することができます。<r/>
<r/>
　tTJSVariantClosure 型を tTJSVariant 型から取り出すために tTJSVariant::<kw>AsObjectClosure</kw> と tTJSVariant::<kw>AsObjectClosureNoAddRef</kw> の２つがあります。前者はオブジェクトの参照カウンタをインクリメントしますが、後者はインクリメントしません。<r/>
　tTJSVariantClosure 型は参照カウンタを自動的に管理する機構を持たないため、tTJSVariantClosure 型を tTJSVariant 型から取り出した後は参照カウンタの管理に注意する必要があります。<r/>
</para>



<para>
<ptitle>文字列型</ptitle>
　TJS2 の文字列は参照カウンタ方式で管理されていて、単純なコピーなどでは文字列の参照カウンタが増えるだけで文字列の実体は複製されません。<r/>
　tTJSVariantString 型は、tTJSVariant 型と <kw>tTJSString</kw> 型で使われる、文字列を管理するための型です。tTJSVariantString 型を tTJSVariant 型から取り出すには tTJSVariant::<kw>AsString</kw> を用いることができます (このメソッドは参照カウンタをインクリメントします)。ただし、tTJSVariantString 型自体は参照カウンタを自動的に管理する機構を持っていないため、tTJSVariantString を使うときは注意が必要です。<r/>
　tTJSString 型ならば参照カウンタを管理できるので、tTJSString 型に変換するのが楽でしょう ( tTJSVariant は tTJSString との変換演算子が定義されています )。<r/>
</para>


<para>
<ptitle>オクテット列型</ptitle>
　TJS2 のオクテット列も文字列型同様、参照カウンタ方式で管理されています。<r/>
　<kw>tTJSVariantOctet</kw> 型は、オクテット列を管理するための型です。この型も tTJSVariantString や tTJSVariantClosure 同様、参照カウンタを管理するための機構を持ってないので注意してください。tTJSVariantOctet 型を tTJSVariant 型から取り出すには tTJSVariant::<kw>AsOctet</kw> (参照カウンタをインクリメントする)、tTJSVariant::<kw>AsOctetNoAddRef</kw> (参照カウンタをインクリメントしない) を用いることができます。<r/>
</para>



<para>
<ptitle>変換</ptitle>
　tTJSVariant には様々な変換演算子やコンストラクタが定義されているので、プリミティブ型のように扱うことができます。<r/>
　上記のように、参照カウンタで管理される型との変換を行う場合は十分に注意する必要があります。<r/>
</para>


<para>
<ptitle>演算</ptitle>
　様々な演算子がオーバーロードされているので、演算に関してもプリミティブ型同様に行うことができます。演算の過程で必要になるような型変換などは自動的に処理されます。<r/>
</para>


</doc>
