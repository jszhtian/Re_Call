// pad テスト


Debug.console.visible = true;

class MainWindow extends Window // メインウィンドウクラス
{
	var layer;
	var pointlayer;
	var timer;

	function MainWindow()
	{
		// MainWindow コンストラクタ
		super.Window();

		borderStyle = bsSingle;
		setInnerSize(640, 480);

		caption = System.title = "JoyPadテスト";

		// プライマリレイヤを作成
		add(layer = new Layer(this, null));
		layer.setSize(innerWidth, innerHeight);

		// 位置表示用レイヤを作成
		add(pointlayer = new Layer(this, layer));
		with(pointlayer)
		{
			.setSize(10, 10);
			.fillRect(0, 0, 10, 10, 0xff0000);
			.setPos(320 - 5, 240 - 5);
			.type = ltCoverRect;
			.opacity = 128;
			.hint = "パッドのキーを押すとこれが移動します";
			.hitType = htMask;
			.hitThreshold = 0;
			.cursor = crCross;
			.visible = true;
		}

		// タイマーを作成
		add(timer = new Timer(this));
		with(timer)
		{
			.interval = 200;
			.enabled = true;
		}

		// 表示状態に
		visible = true;
	}

	function finalize()
	{
		super.finalize(...);
	}


	function draw(code, pos, state)
	{
		switch(code)
		{
		case VK_PADLEFT:
			layer.drawText(10, pos, "L", state?0xff0000:0, , false);
			break;
		case VK_PADRIGHT:
			layer.drawText(20, pos, "R", state?0xff0000:0, , false);
			break;
		case VK_PADUP:
			layer.drawText(30, pos, "U", state?0xff0000:0, , false);
			break;
		case VK_PADDOWN:
			layer.drawText(40, pos, "D", state?0xff0000:0, , false);
			break;
		case VK_PAD1:
			layer.drawText(50, pos, "1", state?0xff0000:0, , false);
			break;
		case VK_PAD2:
			layer.drawText(60, pos, "2", state?0xff0000:0, , false);
			break;
		case VK_PAD3:
			layer.drawText(70, pos, "3", state?0xff0000:0, , false);
			break;
		case VK_PAD4:
			layer.drawText(80, pos, "4", state?0xff0000:0, , false);
			break;
		case VK_PAD5:
			layer.drawText(90, pos, "5", state?0xff0000:0, , false);
			break;
		case VK_PAD6:
			layer.drawText(100, pos, "6", state?0xff0000:0, , false);
			break;
		case VK_PAD7:
			layer.drawText(110, pos, "7", state?0xff0000:0, , false);
			break;
		case VK_PAD8:
			layer.drawText(120, pos, "8", state?0xff0000:0, , false);
			break;
		case VK_PAD9:
			layer.drawText(130, pos, "9", state?0xff0000:0, , false);
			break;
		case VK_PAD10:
			layer.drawText(140, pos, "10", state?0xff0000:0, , false);
			break;
		case VK_PADANY:
			layer.drawText(160, pos, "A", state?0xff0000:0, , false);
			break;
		}
	}

	function action(ev)
	{
		// イベント集約ハンドラ
		var type = ev.type;
		var target = ev.target;
		if(type == 'onKeyDown')
		{
			Debug.message("onKeyDown : %02X %02X".sprintf(ev.key, ev.shift));
			switch(ev.key)
			{
			case VK_PADUP:
				pointlayer.top -= 2; break;
			case VK_PADDOWN:
				pointlayer.top += 2; break;
			case VK_PADLEFT:
				pointlayer.left -= 2; break;
			case VK_PADRIGHT:
				pointlayer.left += 2; break;
			}
			draw(ev.key, 10, true);
		}
		else if(type == 'onKeyUp')
		{
			Debug.message("onKeyUp : %02X %02X".sprintf(ev.key, ev.shift));
			draw(ev.key, 10, false);
		}
		else if(type == 'onTimer')
		{
			draw(VK_PADLEFT   , 30, System.getKeyState(VK_PADLEFT   , true));
			draw(VK_PADRIGHT  , 30, System.getKeyState(VK_PADRIGHT  , true));
			draw(VK_PADUP     , 30, System.getKeyState(VK_PADUP     , true));
			draw(VK_PADDOWN   , 30, System.getKeyState(VK_PADDOWN   , true));
			draw(VK_PAD1      , 30, System.getKeyState(VK_PAD1      , true));
			draw(VK_PAD2      , 30, System.getKeyState(VK_PAD2      , true));
			draw(VK_PAD3      , 30, System.getKeyState(VK_PAD3      , true));
			draw(VK_PAD4      , 30, System.getKeyState(VK_PAD4      , true));
			draw(VK_PAD5      , 30, System.getKeyState(VK_PAD5      , true));
			draw(VK_PAD6      , 30, System.getKeyState(VK_PAD6      , true));
			draw(VK_PAD7      , 30, System.getKeyState(VK_PAD7      , true));
			draw(VK_PAD8      , 30, System.getKeyState(VK_PAD8      , true));
			draw(VK_PAD9      , 30, System.getKeyState(VK_PAD9      , true));
			draw(VK_PAD10     , 30, System.getKeyState(VK_PAD10     , true));
			draw(VK_PADANY    , 30, System.getKeyState(VK_PADANY    , true));

			draw(VK_PADLEFT   , 50, System.getKeyState(VK_PADLEFT   , false));
			draw(VK_PADRIGHT  , 50, System.getKeyState(VK_PADRIGHT  , false));
			draw(VK_PADUP     , 50, System.getKeyState(VK_PADUP     , false));
			draw(VK_PADDOWN   , 50, System.getKeyState(VK_PADDOWN   , false));
			draw(VK_PAD1      , 50, System.getKeyState(VK_PAD1      , false));
			draw(VK_PAD2      , 50, System.getKeyState(VK_PAD2      , false));
			draw(VK_PAD3      , 50, System.getKeyState(VK_PAD3      , false));
			draw(VK_PAD4      , 50, System.getKeyState(VK_PAD4      , false));
			draw(VK_PAD5      , 50, System.getKeyState(VK_PAD5      , false));
			draw(VK_PAD6      , 50, System.getKeyState(VK_PAD6      , false));
			draw(VK_PAD7      , 50, System.getKeyState(VK_PAD7      , false));
			draw(VK_PAD8      , 50, System.getKeyState(VK_PAD8      , false));
			draw(VK_PAD9      , 50, System.getKeyState(VK_PAD9      , false));
			draw(VK_PAD10     , 50, System.getKeyState(VK_PAD10     , false));
		}
		else if(type == 'onMouseEnter' && target == this)
		{
//			Debug.message("enter");
		}
		else if(type == 'onMouseLeave' && target == this)
		{
//			Debug.message("leave");
		}
	}


}

var win = new MainWindow();
