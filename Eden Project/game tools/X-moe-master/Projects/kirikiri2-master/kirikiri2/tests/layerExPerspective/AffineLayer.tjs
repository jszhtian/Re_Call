/* ---------------------------------------------------------------
 * アフィン状態を保持できるレイヤ
 * loadImages または assignImages で割り当てた画像を回転・拡大指定して表示できる。
 * 回転・拡大指定を行なった場合、ぼかしなどの他の画像面の操作は
 * キャンセルされるので注意が必要である。
 *
 * 以下の操作は読み込まれている内部画像に対して作用する
 * colorRect()
 * copyRect()
 * drawText()
 * fillRect()
 * flipLR()
 * loadImages()
 * assignImages()
 * operateRect();
 * operateStretch();
 * setPos();
 * setSize();
 * setSizeToImageSize();
 * setImageSize();
 * setImagePos();
 *
 */
class AffineLayer extends Layer {

    var _image;    ///< イメージ画像ロード用
    var _afn_offx; ///< アフィン変換中心座標X
    var _afn_offy; ///< アフィン変換中心座標Y 
    var _rotate;   ///< 回転角度
    var _zoomx;    ///< X方向ズーム値
    var _zoomy;    ///< Y方向ズーム値

    var _rotateX;  ///< X軸回転
    var _rotateZ;  ///< Z軸回転

    var _doOffset; ///< オフセット変換実行
    var _doAffine; ///< アフィン変換実行
    var _ax;       ///< アフィン変換後X位置補正
    var _ay;       ///< アフィン変換後Y位置補正

    var _act_x;    ///< アクション系モジュール用座標補正
    var _act_y;    ///< アクション系モジュール用座標補正

    // 原点X
    property originX {
        setter(value) {
            this._originX = value;
        }
        getter() {
            if (this._originX != void) {
                return this._originX;
            } else {
                if (window.originX != void) {
                    return window.originX;
                } else {
                    // 画面中央
                    return window.width / 2;
                }
            }
        }
    }

    // 原点Y
    property originY {
        setter(value) {
            this._originY = value;
        }
        getter() {
            if (this._originY != void) {
                return this._originY;
            } else {
                if (window.originY != void) {
                    return window.originY;
                } else {
                    // 画面下端
                    return window.height;
                }
            }
        }
    }

    


    // 原点Z
    property originZ {
    }

    // 消失点X
    property crossX {
    }

    // 消失点Y
    property crossX {
    }

    // 消失点Z
    property crossX {
    }

    
    
    
    function AffineLayer(win,par=null) {
        super.Layer(win,par);
        _image = new global.Layer(win,this);
        _afn_offx = AFFINEOFFSET_CENTER;
        _afn_offy = AFFINEOFFSET_CENTER;
        _doAffine = false;
        _doOffset = false;
        reset();
    }
    
    /**
     * ファイナライザのっとり
     */
    function finalize() {
        invalidate _image;
        super.finalize();
    }
    
    /**
     * オフセット位置の再計算指示
     */
    function calcOffset() {
        _doOffset = true;
        callOnPaint = true;
    }
    
    /**
     * アフィンの再計算指示
     */
    function calcAffine() {
        _doAffine = true;
        _doOffset = true;
        callOnPaint = true;
    }
    
    /**
     * 初期化処理
     * 登録済み画像の状態に戻す
     */
    function reset() {
        _rotate = 0;
        _rotatex = 0;
        _rotatey = 0;
        _zoomx = 100;
        _zoomy = 100;
        _act_x = 0;
        _act_y = 0;
        calcAffine();
    }

    /**
     * 画像のコピー(Layerの機能をオーバライド)
     * @param src コピー元のレイヤ
     */
    function assignImages(src) {
        _image.assignImages(src);
        reset();
    }

    function colorRect(left, top, width, height, value, opa=255) {
        _image.colorRect(left, top, width, height, value, opa);
        calcAffine();
    }

    function copyRect(dleft, dtop, src, sleft, stop, swidth, sheight) {
        _image.copyRect(dleft, dtop, src, sleft, stop, swidth, sheight);
        calcAffine();
    }

    function drawText(x, y, text, color, opa=255, aa=true, shadowlevel=0, shadowcolor=0x000000, shadowwidth=0, shadowofsx=0, shadowofsy=0) {
        _image.drawText(x, y, text, color, opa, aa, shadowlevel, shadowcolor, shadowwidth, shadowofsx, shadowofsy);
        calcAffine();
    }

    function fillRect(left, top, width, height, value) {
        _image.fillRect(left, top, width, height, value);
        calcAffine();
    }

    function flipLR() {
        _image.flipLR();
        calcAffine();
    }

    function flipUD() {
        _image.flipUD();
        calcAffine();
    }

    /**
     * 現在の表示状態で内部イメージを初期化する
     */
    function initImages() {
        _image.assignImages(this);
    }
    
    /**
     * 画像の読み込み(Layerの機能をオーバライド)
     * @param image 読み込む画像ストレージ
     * @param colorKey 読み込む画像のカラーキー
     * @return タグ情報の辞書配列
     */
    function loadImages(image,colorKey=clNone) {
        _image.loadImages(image,colorKey);
        reset();
    }

    function operateRect(dleft, dtop, src, sleft, stop, swidth, sheight, mode=omAuto, opa=255) {
        _image.operateRect(dleft, dtop, src, sleft, stop, swidth, sheight, mode, opa);
        calcAffine();
    }

    function operateStretch(dleft, dtop, dwidth, dheight, src, sleft, stop, swidth, sheight, mode=omAuto, opa=255, type=stNearest) {
        _image.operateStretch(dleft, dtop, dwidth, dheight, src, sleft, stop, swidth, sheight, mode, opa, type);
        calcAffine();
    }
    
    property left {
        setter(v) {
            _image.left = v;
            calcOffset();
        }
        getter() {
            return _image.left;
        }
    }
    
    property top {
        setter(v) {
            _image.top = v;
            calcOffset();
        }
        getter() {
            return _image.top;
        }
    }

    property width {
        setter(v) {
            _image.width = v;
            calcOffset();
        }
        getter() {
            return _image.width;
        }
    }
    
    property height {
        setter(v) {
            _image.height = v;
            calcOffset();
        }
        getter() {
            return _image.height;
        }
    }

    /**
     * 配置位置指定
     */
    function setPos(l, t, w, h) {
        _image.setPos(l,t,w,h);
        calcOffset();
    }

    /**
     * サイズの指定(Layerの機能をオーバライド)
     * @param w 横幅
     * @param h 縦幅
     */
    function setSize(w, h) {
        _image.setSize(w, h);
    }

    /**
     * サイズをイメージにあわせる(Layerの機能をオーバライド)
     */
    function setSizeToImageSize() {
        _image.setSizeToImageSize();
    }

    property imageLeft {
        setter(v) {
            _image.imageLeft = v;
            calcOffset();
        }
        getter() {
            return _image.imageLeft;
        }
    }
    
    property imageTop {
        setter(v) {
            _image.imageTop = v;
            calcOffset();
        }
        getter() {
            return _image.imageTop;
        }
    }

    property imageWidth {
        setter(v) {
            _image.imageWidth = v;
            calcOffset();
        }
        getter() {
            return _image.imageWidth;
        }
    }
    
    property imageHeight {
        setter(v) {
            _image.imageHeight = v;
            calcOffset();
        }
        getter() {
            return _image.imageHeight;
        }
    }

    /**
     * 配置位置指定
     */
    function setImagePos(l, t, w, h) {
        _image.setImagePos(l,t,w,h);
        calcOffset();
    }

    /**
     * サイズの指定(Layerの機能をオーバライド)
     * @param w 横幅
     * @param h 縦幅
     */
    function setImageSize(w, h) {
        _image.setImageSize(w, h);
    }
    
    /**
     * アフィン変換のオフセット基準を指定
     * @param x オフセット位置X
     * @param y オフセット位置Y
     * AFFINEOFFSET_CENTER/TOP/BOTTOM/RIGHT/LEFT が指定可能。デフォルトは AFFINEOFFSET_CENTER
     */
    function setAffineOffset(x,y) {
        _afn_offx = x;
        _afn_offy = y;
        calcAffine();
    }
    
    /**
     * ペイント前処理
     */
    function onPaint() {
        super.onPaint(...);
        if (_doAffine || _doOffset) {
            if (_doAffine) {
                
                if (_rotate == 0 && _rotatex == 0 && _rotatey == 0 && _zoomx == 100 && _zoomy == 100) {

                    //Debug.message("no affine:" + width + ":" + height);
                    _ax = 0;
                    _ay = 0;
                    super.assignImages(_image);
                    super.setSizeToImageSize();

                } else {

                    // ４隅の座標を決定
                    var w, h;
                    switch (_afn_offx) {
                    case AFFINEOFFSET_CENTER: w = _image.width/2; break;
                    case AFFINEOFFSET_LEFT:   w = 0;              break;
                    case AFFINEOFFSET_RIGHT:  w = _image.width;   break;
                    default:                  w = _afn_offx;      break;
                    }
                    switch (_afn_offy) {
                    case AFFINEOFFSET_CENTER: h = _image.height/2; break;
                    case AFFINEOFFSET_TOP:    h = 0;               break;
                    case AFFINEOFFSET_BOTTOM: h = _image.height;   break;
                    default:                  h = _afn_offy;       break;
                    }

                    // 拡大値
                    var stepx, stepy;
                    stepx = _zoomx/100.0;
                    stepy = _zoomy/100.0;

                    var rad, sn, cs;
                    var dxh, dxv, dyh, dyv, dxd, dyd;
                    
                    // Z軸の回転処理
                    if (_rotate != 0) {
                        rad = (Math.PI * _rotate)/180.0;
                        sn = Math.sin(rad);
                        cs = Math.cos(rad);
                        dxh =  stepx*cs;
                        dxv =  stepx*sn;
                        dyh = -stepy*sn;
                        dyv =  stepy*cs;
                    } else {
                        dxh = stepx;
                        dxv = 0;
                        dyh = 0;
                        dyv = stepy;
                    }

                    if (_rotatex == 0 && _rotatey == 0) {
                        
                        //Debug.message("do affine");

                        // 更新エリア4隅の座標を求める
                        var x = new Array();
                        var y = new Array();
                        var x0 = x[0] = Math.round((-w)*dxh+(-h)*dxv+w);
                        var y0 = y[0] = Math.round((-w)*dyh+(-h)*dyv+h);
                        x[1] = Math.round((_image.width-w)*dxh+(_image.height-h)*dxv+w);
                        y[1] = Math.round((_image.width-w)*dyh+(_image.height-h)*dyv+h);
                        x[2] = Math.round((-w)*dxh+(_image.height-h)*dxv+w);
                        y[2] = Math.round((-w)*dyh+(_image.height-h)*dyv+h);
                        x[3] = Math.round((_image.width-w)*dxh+(-h)*dxv+w);
                        y[3] = Math.round((_image.width-w)*dyh+(-h)*dyv+h);
                        
                        // 最大値と最小値を取得
                        for (var i=3; i>0; i--) {
                            for (var j=0; j<i; j++) {
                                if ( x[j]>x[j+1] ) { x[j] <-> x[j+1]; }
                                if ( y[j]>y[j+1] ) { y[j] <-> y[j+1]; }
                            }
                        }
                        
                        // 座標補正
                        // 最大値と最小値でできる四角形を返す
                        _ax = x[0];
                        _ay = y[0];
                        
                        //Debug.message(dxh,dyh,dxv,dyv);
                        
                        w = x[3] - x[0];
                        h = y[3] - y[0];
                        if (w == 0 || h == 0) {
                            super.fillRect(0,0,super.width,super.height,neutralColor);
                        } else {
                            // 画像コピー
                            super.setImageSize(w, h);
                            super.setSize(w, h);
                            var tx = x0 - x[0];
                            var ty = y0 - y[0];
                            super.affineCopy(_image,0,0,_image.width,_image.height,true,dxh,dyh,dxv,dyv,tx,ty,stCubic|stRefNoClip,true);
                            //affineCopy(_image,0,0,_image.width,_image.height,true,dxh,dyh,dxv,dyv,tx,ty,stNearest,true);
                        }

                    } else {

                        // 透視変形処理の実行
                        // Debug.message("do perspective");

                        // X軸の回転
                        if (_rotatex != 0) {
                            rad = (Math.PI * _rotatex)/180.0;
                            sn = Math.sin(rad);
                            cs = Math.cos(rad);
                            dxd = dxv * sn;
                            dxv = dxv * cs;
                            dyd = dyv * sn;
                            dyv = dyv * cs;
                        } else {
                            dxd = 0;
                            dyd = 0;
                        }

                        if (_rotatey != 0) {
                            
                            // Y方向の回転
                            rad = (Math.PI * _rotatey)/180.0;
                            sn = Math.sin(rad);
                            cs = Math.cos(rad);

                            var dxh_ =  dxh * cs + dxd * sn;
                            dxd      = -dxh * sn + dxd * cs;
                            dxh      = dxh_;

                            var dyh_ =  dyh * cs + dyd * sn;
                            dyd      = -dyh * sn + dyd * cs;
                            dyh      = dyh_;
                        }
                        

                        // 更新エリア4隅の座標を求める
                        var x0 = (-w)*dxh + (-h)*dyh+w;
                        var y0 = (-w)*dxv + (-h)*dyv+h;
                        var z0 = (-w)*dxd + (-h)*dyd;
                        
                        var x1 = (_image.width-w)*dxh+(_image.height-h)*dyh+w;
                        var y1 = (_image.width-w)*dxv+(_image.height-h)*dyv+h;
                        var z1 = (_image.width-w)*dxd+(_image.height-h)*dyd;

                        var x2 = (-w)*dxh+(_image.height-h)*dyh+w;
                        var y2 = (-w)*dxv+(_image.height-h)*dyv+h;
                        var z2 = (-w)*dxd+(_image.height-h)*dyd;

                        var x3 = (_image.width-w)*dxh+(-h)*dyh+w;
                        var y3 = (_image.width-w)*dxv+(-h)*dyv+h;
                        var z3 = (_image.width-w)*dxd+(-h)*dyd;

                        // 透視変換


                        
                        // 最大最小取得用
                        var x = new Array();
                        var y = new Array();
                        x[0] = x0;
                        y[0] = y0;
                        x[1] = x1;
                        y[1] = y1;
                        x[2] = x2:
                        y[2] = y2:
                        x[3] = x3;
                        y[3] = y3;
                        for (var i=3; i>0; i--) {
                            for (var j=0; j<i; j++) {
                                if ( x[j]>x[j+1] ) { x[j] <-> x[j+1]; }
                                if ( y[j]>y[j+1] ) { y[j] <-> y[j+1]; }
                            }
                        }
                    
                        // 座標補正
                        // 最大値と最小値でできる四角形を返す
                        _ax = x[0];
                        _ay = y[0];
                        w = x[3] - x[0];
                        h = y[3] - y[0];
                        if (w == 0 || h == 0) {
                            super.fillRect(0,0,super.width,super.height,neutralColor);
                        } else {
                            // 画像コピー
                            super.setImageSize(w, h);
                            super.setSize(w, h);
                            super.perspectiveCopy(_image,
                                                  0,0,_image.width,_image.height,
                                                  x0 - _ax,
                                                  y0 - _ay,
                                                  x1 - _ax,
                                                  y1 - _ay,
                                                  x2 - _ax,
                                                  y2 - _ay,
                                                  x3 - _ax,
                                                  y3 - _ay);
                        }
                    }
                }
                _doAffine = false;
            }
            if (_doOffset) {
                super.setPos(_image.left + _ax + _act_x, _image.top + _ay + _act_y);
                _doOffset = false;
            }
        }
    }
    
    /// 回転量（度）
    property rotate {
        setter(v) {
            _rotate = v;
            calcAffine();
        }
        getter() {
            return _rotate;
        }
    }

    /// X軸回転量（度）
    property rotatex {
        setter(v) {
            _rotatex = v;
            calcAffine();
        }
        getter() {
            return _rotatex;
        }
    }

    /// Y軸回転量（度）
    property rotatey {
        setter(v) {
            _rotatey = v;
            calcAffine();
        }
        getter() {
            return _rotatey;
        }
    }

    /// ズームX（％指定）
    property zoomx {
        setter(v) {
            _zoomx = v;
            calcAffine();
        }
        getter() {
            return _zoomx;
        }
    }
    
    /// ズームY（％指定）
    property zoomy {
        setter(v) {
            _zoomx = v;
            calcAffine();
        }
        getter() {
            return _zoomy;
        }
    }

    // ズーム（％指定）
    property zoom {
        setter(v) {
            _zoomx = v;
            _zoomy = v;
            calcAffine();
        }
    }

    /**
     * ズーム量を指定する
     * @param zx 横ズーム
     * @parma zy 縦ズーム。省略すると横と同じ値
     */
    function setZoom(zx, zy=void) {
        //Debug.message("setZoom:" + zx + ":" + zy);
        if (zy == void) {
            zy = zx;
        }
        _zoomx = zx;
        _zoomy = zy;
        calcAffine();
    }
    
    /**
     * アクション用移動差分指定
     * @param x アクション移動差分X方向
     * @param y アクション移動差分Y方向
     */
    function setActionOffset(x, y) {
        this._act_x = x;
        this._act_y = y;
        calcOffset();
    }
};

// 定数定義
AffineLayer.AFFINEOFFSET_CENTER = -100000;
AffineLayer.AFFINEOFFSET_TOP    = -100001;
AffineLayer.AFFINEOFFSET_BOTTOM = -100002;
AffineLayer.AFFINEOFFSET_RIGHT  = -100001;
AffineLayer.AFFINEOFFSET_LEFT   = -100002;
