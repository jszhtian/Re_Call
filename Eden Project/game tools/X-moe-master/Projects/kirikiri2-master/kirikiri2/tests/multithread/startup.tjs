class TestApp extends Window
{
  var rootLayer;
  var testLayer;
  var blackLayer;
  var whiteLayer;
  var timer;
  var result = [];
  var benchWidth, benchHeight;
  var request = [], requestCount;

  function TestApp {
    super.Window();

    caption = "multi thread test app";
    borderStyle = bsSingle;
    setInnerSize(641, 641);
    setPos(100, 100);

    rootLayer = new Layer(this, null);
    rootLayer.setSize(innerWidth, innerHeight);
    rootLayer.hasImage = false;
    rootLayer.visible = true;

    testLayer = new Layer(this, rootLayer);
    testLayer.setSize(innerWidth, innerHeight);
    testLayer.visible = true;

    blackLayer = new Layer(this, rootLayer);
    blackLayer.setSize(innerWidth, innerHeight);
    blackLayer.fillRect(0, 0, innerWidth, innerHeight, 0xFF000000);

    whiteLayer = new Layer(this, rootLayer);
    whiteLayer.setSize(innerWidth, innerHeight);
    whiteLayer.fillRect(0, 0, innerWidth, innerHeight, 0xFFFFFFFF);

    add(rootLayer);

    visible = true;

    result.add('method, thread num, pixel num, time(msec)');

    timer = new Timer(this, "bench");
    timer.interval = 1000;
    timer.enabled = true;
  }

  function bench {
    timer.enabled = false;

    combinationBench(FillBench);
    combinationBench(FillColorBench1);
    combinationBench(FillColorBench2);
    combinationBench(BlendColorBench1);
    combinationBench(BlendColorBench2);
    combinationBench(BlendColorBench3);
    combinationBench(RemoveConstOpacityBench1);
    combinationBench(RemoveConstOpacityBench2);
    combinationBench(FillMaskBench);
    combinationBench(CopyRectBench);
    var modeList = [
                    omPsNormal,
                    omPsAdditive,
                    omPsSubtractive,
                    omPsMultiplicative,
                    omPsScreen,
                    omPsOverlay,
                    omPsHardLight,
                    omPsSoftLight,
                    omPsColorDodge,
                    omPsColorDodge5,
                    omPsColorBurn,
                    omPsLighten,
                    omPsDarken,
                    omPsDifference,
                    omPsDifference5,
                    omPsExclusion,
                    omAdditive,
                    omSubtractive,
                    omMultiplicative,
                    omDodge,
                    omDarken,
                    omLighten,
                    omScreen,
                    omAlpha,
                    omAddAlpha,
                    omOpaque
    ];
    modeList.sort();
    for (var i = 0; i < modeList.count; i++) {
      combinationBench(BltBench, modeList[i]);
    }
    combinationBench(AffineBltBench);

    requestCount = 0;

    System.addContinuousHandler(doBench);
  }

  function doBench {
    var req = request[requestCount];
    System.drawThreadNum = req[2];
    benchWidth = req[3];
    benchHeight = req[4];
    req[0](req[1]);

    if (++requestCount >= request.count) {
      result.save(System.dataPath + "result.csv");
      System.removeContinuousHandler(doBench);
      System.exit();
    } 
  }

  function combinationBench(func, arg) {
    benchWidth = 640;
    for (benchHeight = 20; benchHeight <= 640; benchHeight += 20) {
      request.add([ func, arg, 1, benchWidth, benchHeight ]);
      request.add([ func, arg, System.processorNum, benchWidth, benchHeight ]);
    }
  }

  function BltBench(om) {
    caption = "testing Blt%d %dx%d pixel %d threads (%d/%d).".sprintf(om, benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.operateRect(0, 0, blackLayer, 0, 0, benchWidth, benchHeight, om);
      testLayer.operateRect(0, 0, whiteLayer, 0, 0, benchWidth, benchHeight, om);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('Blt%d, %d, %d, %d'.sprintf(om, System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function CopyRectBench {
    caption = "testing CopyRect %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.copyRect(0, 0, blackLayer, 0, 0, benchWidth, benchHeight);
      testLayer.copyRect(0, 0, whiteLayer, 0, 0, benchWidth, benchHeight);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('CopyRect, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function FillBench {
    caption = "testing Fill %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.fillRect(0, 0, benchWidth, benchHeight, 0xFF000000);
      testLayer.fillRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('Fill, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function FillColorBench1 {
    caption = "testing FillColor1 %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    testLayer.face = dfOpaque;
    testLayer.holdAlpha = true;
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.fillRect(0, 0, benchWidth, benchHeight, 0xFF000000);
      testLayer.fillRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF);
    }
    var diffTick = System.getTickCount() - beginTick;
    testLayer.face = dfAlpha;
    testLayer.holdAlpha = false;
    result.add('FillColor1, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function FillColorBench2 {
    caption = "testing FillColor2 %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    testLayer.face = dfOpaque;
    testLayer.holdAlpha = true;
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFF000000, 128);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF, 128);
    }
    var diffTick = System.getTickCount() - beginTick;
    testLayer.face = dfAlpha;
    testLayer.holdAlpha = false;
    result.add('FillColor2, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function BlendColorBench1 {
    caption = "testing BlendColor1 %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFF000000, 255);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF, 255);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('BlendColor1, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function BlendColorBench2 {
    caption = "testing BlendColor2 %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFF000000, 128);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF, 128);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('BlendColor2, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function BlendColorBench3 {
    caption = "testing BlendColor3 %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    testLayer.face = dfAddAlpha;
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFF000000, 255);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF, 255);
    }
    var diffTick = System.getTickCount() - beginTick;
    testLayer.face = dfAlpha;
    result.add('BlendColor3, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function RemoveConstOpacityBench1 {
    caption = "testing RemoveConstOpacity1 %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFF000000, -255);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF, -255);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('RemoveConstOpacity1, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function RemoveConstOpacityBench2 {
    caption = "testing RemoveConstOpacity2 %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFF000000, -128);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF, -128);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('RemoveConstOpacity2, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function FillMaskBench {
    caption = "testing FillMask %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    testLayer.face = dfMask;
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0, 255);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 255, 255);
    }
    var diffTick = System.getTickCount() - beginTick;
    testLayer.face = dfAlpha;
    result.add('FillMask, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function AffineBltBench {
    caption = "testing AffineBlt %dx%d pixel %d threads (%d/%d).".sprintf(benchWidth, benchHeight, System.drawThreadNum, requestCount, request.count);
    testLayer.setClip(0, 0, benchWidth, benchHeight);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      var angle = i * Math.PI * 2 / 1000;
      var si = Math.sin(angle), cs = Math.cos(angle);
      var cx = benchWidth / 2, cy = benchHeight / 2;
      var a = cs, b = -si, c = si, d = cs;
      var e = -a * cx - c * cy + cx, f = -b * cx - d * cy + cy;
      testLayer.affineCopy(blackLayer, 0, 0, benchWidth, benchHeight, true, a, b, c, d, e, f, stNearest, true);
      testLayer.affineCopy(whiteLayer, 0, 0, benchWidth, benchHeight, true, a, b, c, d, e, f, stNearest, true);
    }
    var diffTick = System.getTickCount() - beginTick;
    testLayer.setClip();
    result.add('AffineBlt, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }
};


Debug.startLogToFile(true);

global.app = new TestApp();

