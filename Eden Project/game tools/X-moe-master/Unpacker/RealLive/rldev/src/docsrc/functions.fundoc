%@ Input file for mkfundoc, which generates some rather hairy LaTeX/HEVEA code
%@ to work round different deficiencies in their implementations of the
%@ Listings package.
%@
%@ Format:
%@   @fun/name,name2.../ - index named functions at this point (no spaces!)
%@   @def/stuff.../
%@      print stuff as a function definition.
%@      <param> for parameter, [param] for optional parameter.
%@   @and/morestuff~{\ldots~}/
%@      use @def for first, @and for subsequent blocked definitions
%@   @{, @}
%@      use around the explanation
%@
%@   @ref{name}, @refnp{name} - reference name, with and without parens
%@   <name> - \metavar{name} with _ automatically escaped

\lchapter{The Kepago/RealLive API}\label{chapter:functions}

\lsection{Introduction}

  First, an important note: parts of the \reallive\ interpreter are documented
  within this chapter.  If looking up individual functions, you should also make
  sure you read the introductions to each section and subsection, where general
  issues relating to functions of each type are explained.  This is particularly
  important for the sections on graphics (\ref{sec:graphics}) and objects
  (\ref{sec:objects}), since in those sections many functions whose names and
  properties can be derived trivially from other functions are not explicitly
  documented (for example, the function @ref{recCopy} is documented, but the
  function @ref{grpCopy} is not documented explicitly because its existence and
  exact behaviour are both made clear by the existence of @ref{recCopy}).

  While most of the functions documented here are internal \reallive\ functions
  exposed by the Kepago/\reallive\ API, you should bear in mind that this API
  differs in some places from the underlying system.  In addition to having a
  number of additional functions implemented in Kepago, it also introduces a
  number of abstractions, such as representing multiple definitions with
  optional parameters and single result parameters as return values, which mean
  that the function definitions here do not have a 1:1 correspondance with the
  bytecode they represent.  If you're doing bytecode-level hacking, or compiler
  or interpreter development, you should use this document as a reference only
  in conjunction with \file{reallive.kfn}, \file{system.kh}, \file{rlapi.kh},
  and the \compiler\ source code.

  The accuracy of the information in this chapter is not guaranteed.  The API is
  based on reverse-engineering; my information is therefore limited to what
  I and others have been able to deduce from the bytecode of official
  \reallive\ games and by experimentation.  Since no official documentation has
  been used, it is likely that I have misinterpreted the effects of many
  functions, and I know for certain that there are over a hundred more that I
  have not exposed or documented at all.

  Where differences in behaviour or availability relating to the version of the
  interpreter in use are known, they are documented here.  Since most of my
  testing has been done with \reallive, the \avgns\ data here are seriously
  incomplete, and I have not even attempted to note differences in
  \file{xclannad}'s behaviour, given the unfinished state of that program at the
  time of writing.

  The definition format should be self-evident.  Return value types are given
  after the function; `store' denotes a function that modifies \lstinline|store|
  (and can therefore be used with or without an assignment to an integer
  variable).  Where multiple related functions have identical parameters and
  return types, all but the first in a group are given `\ldots' in place of the
  parameter list.

\lsection{Duplicates}

  A number of functions, such as @ref{load}, have what seem to be duplicates
  with different opcodes but apparently identical behaviour.  These duplicates
  have been given names with integer suffixes, such as \lstinline|load2|, and
  are not otherwise documented here.  If you encounter one, refer to the base
  function, and if you wish to know which functions I have designated thus,
  refer to \file{reallive.kfn}.  I would be particularly interested if anyone
  were able to tell me about any differences in behaviour between functions I
  have grouped in this way.

\lsection{Compatibility}

  From time to time, changes are made to the API which break
  backwards-compatibility with existing code.
  
  Functions are initially deprecated; they are removed altogether only after
  a subsequent incompatible change.  Functions that have been removed from
  the API can be found in the compatibility header \texttt{compat.kh}.  By
  default, loading this header does absolutely nothing: you must define
  a symbol to indicate how old an API you need compatibility for:  
  \begin{lstlisting}
    #define PRE_121  // reverse changes made in version 1.21
    #define PRE_120  // reverse changes made in version 1.20
    #define PRE_103  // reverse changes made in version 1.03
  \end{lstlisting}
  \noindent This is a crutch. You should update your code to the current API
  rather than relying on \texttt{compat.kh}.
  
  You can also gain access to compatibility wrappers for a few functions from 
  the old Kepago/AVG32 API by defining \lstinline|KPACAPI| before loading this 
  header.  This may be useful if you are writing code that will be shared 
  between \reallive\ and AVG32 projects.

%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Compiler functions}

\subsection{Initialisation}

@fun/rlcInit/
@def/rlcInit()/
@{
  Call this function at the start of your program to initialise the
  Kepago/\reallive\ runtime library.  It should be called once, and only once,
  when the interpreter is first launched.

  Many programs will not require any initialisation, but in these cases no code 
  is generated for this function, and programs which do require initialisation 
  will function unpredictably without it.  In particular, programs using the 
  Textout or rlBabel libraries (see \ref{lib:rlBabel}) \emph{must} be 
  initialised using this function.  
@}

@fun/rlcSetAllocation/
@def/rlcSetAllocation(<iarray>, <ifirst>, <ilast>, <sfirst>, <slast>)/
@{
  Sets memory allocation parameters (see \ref{sec:allocation}).

  <iarray> selects a memory space to use for integer allocation.  It should have
  one of the following values:

  \begin{tabular}{r@@{\hs}l}
  \texttt{MEMARR\_A} & Use the range \texttt{A}[<ifirst>]\ldots\texttt{A}[<ilast>] \\
  \texttt{MEMARR\_B} & Use the range \texttt{B}[<ifirst>]\ldots\texttt{B}[<ilast>] \\
  \texttt{MEMARR\_C} & Use the range \texttt{C}[<ifirst>]\ldots\texttt{C}[<ilast>] \\
  \texttt{MEMARR\_D} & Use the range \texttt{D}[<ifirst>]\ldots\texttt{D}[<ilast>] \\
  \texttt{MEMARR\_E} & Use the range \texttt{E}[<ifirst>]\ldots\texttt{E}[<ilast>] \\
  \texttt{MEMARR\_F} & Use the range \texttt{F}[<ifirst>]\ldots\texttt{F}[<ilast>]
  \end{tabular}

  <ifirst>, <ilast>, <sfirst>, and <slast> should be constant integers in the
  range 0\ldots{}1999.  The first two have the meaning indicated in the table
  above, and the last two define the range in the \texttt{S}[] array used to
  allocate string variables.

  This function should either be included in a project header file or called at
  the top of every scenario in any project that requires variables in the default
  ranges (\texttt{C[0]}\ldots\texttt{C[1999]}, \texttt{S[1900]}\ldots\texttt{S[1999]})
  not be treated as unused.

  As an example, the defaults can be restored with the call
  \begin{lstlisting}
    rlcSetAllocation(MEMARR_C, 0, 1999, 1900, 1999)
  \end{lstlisting}
@}

\subsection{Symbolic manipulation}

The macros and intrinsic functions described in this subsection are expanded at
compile-time; they can be used in conditional compilation, or to track compiler
state.  I don't know if they'll be particularly useful outside the specialised
cases they were implemented for.

@fun/defined?/
@def/defined?(<symbols>~{\ldots~}): integer constant/
@{
  Expands to 1 if all the symbols given are present in the symbol table when the
  macro is parsed, or 0 if any of them is not.

  \lstinline|#ifdef Foo| is literally a shorthand for
  \lstinline|#if defined?(Foo)|.
@}

@fun/default/
@def/default(<symbol>, <expr>): expression/
@{
  If <symbol> is defined, expands to <symbol>, otherwise expands to <expr>.
  <expr> does not have to be a constant expression.
@}

@fun/constant?/
@def/constant?(<exprs>~{\ldots~}): integer constant/
@{
  Takes a list of expressions, and expands to 1 if they are all constant
  expressions (see \ref{constexprs}), or 0 otherwise.
@}

@fun/const_eq?/
@def/const_eq?(<expr>, <const>): integer constant/
@{
  Expands to 1 if <expr> is constant and equal to <const>.

  This is useful when compiling conditionally:
  \begin{lstlisting}
    #if foo == 1 // ERROR if foo is not constant
      // do stuff
    #endif
    #if const_eq?(foo, 1) // Never an error
      // do same stuff but safely
    #endif
  \end{lstlisting}
@}

@fun/__empty_string?/
@def/__empty_string?(<string>): integer constant/
@{
  The present Kepago implementation does not permit comparison of strings, even
  constant strings, in constant expressions.  This macro can be used instead to
  determine at compile-time whether a string constant is equal to the empty
  string or not, which is the most useful case.
@}

@fun/rlc_parse_string/
@def/rlc_parse_string(<string>): statements or expression/
@{
  Passes the constant string <string> to the \compiler\ parser.  If the call is
  within an expression, <string> must represent a complete expression; if the
  call is as a statement, <string> must represent one or more complete
  statements.  The parsed code will replace the call in the AST.

  The use of this function can be considered `deep magic'.  If you find yourself
  considering it, think very hard about whether you really want to do whatever
  it is you're attempting.
@}

\subsection{Compile-time \gameexe\ access}

It can be useful to include data from \gameexe\ in your programs, and,
in the absence of any way to read it at runtime, compile-time access is usually
acceptable.  If you rely on these functions, ensure that the \gameexe{}
\compiler\ uses for the data is the same as the one you ship.

@fun/in_gameexe?/
@def/in_gameexe?(<key>): integer constant/
@{
  Expands to 1 if the variable <key> is defined in \gameexe, or 0 if
  it is not.
@}

@fun/gameexe/
@def/gameexe(<key>, [index], [default]): expression/
@{
  Expands (at compile-time) to the value bound to <key> in \gameexe.

  <key> should be a string constant.  You can include or omit the initial \#
  character as you wish, and keys are not case-sensitive.

  For keys with multiple values (such as @iref{CANCELCALL}), the value
  returned is specified by <index>, which defaults to 0 (the first value).

  If <default> is given, it is returned when <key> is not found in
  \gameexe.  It has no default value: if <key> is not found when
  <default> is not given, an error is reported instead.
@}

\lsection{Flow control}

\subsection{Termination}

@fun/end/
@def/end()/
@{
  Exits the interpreter.
@}

@fun/halt/
@def/halt()/
@{
  Abnormal termination.  \reallive\ halts without exiting, to permit debugging.
@}

\subsection{Inter-scenario jumps}\index[concept]{scenarios}

@fun/jump/
@def/jump(<scenario>, [entrypoint])/
@{
  Jumps to <entrypoint> in <scenario>.  If <entrypoint> is not given,
  it defaults to 0.

  Entry points are defined with the \dirref{entrypoint} directive.
@}

@fun/farcall/
@def/farcall(<scenario>, [entrypoint])/
@{
  Pushes the current location onto the call stack, then jumps to to <entrypoint>
  in <scenario>.  Call @ref{rtl} to return from the call.
@}

@fun/rtl/
@def/rtl()/
@{
  Returns from the most recent @ref{farcall} call.

  Note that @refnp{gosub}/@ref{ret} and @ref{farcall}/@ref{rtl} calls share
  the same call stack, so they must be paired properly.  An error occurs if you
  call @ref{rtl} when the top of the call stack is a @refnp{gosub} call.
@}

@fun/farcall_with/
@def/farcall_with(<scenario>, <entrypoint>, <parameter>~{\ldots~}): store/
@{
  \minver{function}{1.3}

  As @ref{farcall}, but passes parameters to the called scenario.  Each
  <parameter> is placed in the next available call variable (see
  \ref{sec:callvars}) of the appropriate type.  It probably follows
  that up to 40 integer and 3 string parameters can be passed.
@}

@fun/farcall_with/
@def/farcall_with([value])/
@{
  As @ref{rtl}, with an extension: if <value> is supplied, and the caller was 
  @ref{farcall_with}, then <value> is placed in \lstinline|store| and used as 
  the return value of the @ref{farcall_with} call.
@}

@fun/ReturnMenu/
@def/ReturnMenu()/
@{
  Returns to the main menu.  This function is equivalent to
  \lstinline|jump(menu)|, where <menu> is defined by @iref{SEEN_MENU} in
  \gameexe.
@}

@fun/MenuReturn/
@def/MenuReturn()/
@{
  Similar to @ref{ReturnMenu}, but the screen fades out first.  This is the
  function called when you select syscom 28 ``Return to menu'' from the system
  command menu.
@}

@fun/rtlButton,rtlCancel,rtlSystem/
@def/rtlButton()/
@and/rtlCancel()/
@and/rtlSystem()/
@{
  These appear to behave identically to @ref{rtl}.

  @ref{rtlButton} is used in \opus{Princess Bride} to return from the handling
  routines for extra window buttons (as defined with @iref{WBCALL} in
  \gameexe), and @ref{rtlCancel} is used in \opus{Clannad} to return
  from the in-game menu (as defined with @iref{CANCELCALL}).
@}

\subsection{Local jumps}

@fun/goto/
@def/goto @label/
@{
  Jumps to the label \lstinline|@label| in the current scenario. See section
  \ref{sec:labels} for details on labels.
@}

@fun/gosub/
@def/gosub @label/
@{
  Pushes the current location onto the call stack, then jumps to the label
  \lstinline|@label| in the current scenario.  Call @ref{ret} to resume
  execution at the next statement.
@}

@fun/ret/
@def/ret()/
@{
  Returns from the most recent @refnp{gosub} call.

  Note that @refnp{gosub}/@ref{ret} and @ref{farcall}/@ref{rtl} calls share
  the same call stack, so they must be paired properly.  An error occurs if you
  call @ref{ret} when the top of the call stack is a @ref{farcall} call.
@}

@fun/gosub_with/
@def/gosub_with (<parameter>~{\ldots~}) @label: store/
@{
  \minver{function}{1.3}

  As @ref{gosub}, but passes parameters to the called subroutine.  Each
  <parameter> is placed in the next available call variable (see
  \ref{sec:callvars}) of the appropriate type.  It probably follows
  that up to 40 integer and 3 string parameters can be passed.
@}

@fun/ret_with/
@def/ret_with([value])/
@{
  As @ref{ret}, but with an extension: if <value> is supplied, and the caller 
  was @ref{gosub_with}, then <value> is placed in \lstinline|store| and used as 
  the return value of the @ref{gosub_with} call.
@}

@fun/goto_if,goto_unless/
@def/goto_if (<condition>) @label/
@and/goto_unless (<condition>) @label/
@{
  Conditional equivalents of @refnp{goto}: @ref{goto_if} jumps to
  \lstinline|@label| if the value of <condition> is non-zero, and
  @ref{goto_unless} jumps if it is zero.

  @ref{goto_if} is not available in all interpreter versions.
@}

@fun/gosub_if,gosub_unless/
@def/gosub_if (<condition>) @label/
@and/gosub_unless (<condition>) @label/
@{
  These are to @refnp{gosub} as @ref{goto_if} and @ref{goto_unless} are to
  @refnp{goto}.
@}

@fun/goto_on,gosub_on/
@def/goto_on (<expr>) { @label0, @label1, ~{\ldots~}, @labeln }/
@and/gosub_on~{\ldots~}/
@{
  Table jumps.  <expr> is evaluated, and control passed to the corresponding
  label in the list, counting from 0.  If <expr> falls outside the valid range,
  no jump takes place, and execution continues from the next statement instead.

  @ref{goto_on} uses @refnp{goto} to jump, and @ref{gosub_on} uses
  @refnp{gosub}.

  The maximum table size is unknown; I have successfully generated tables with
  5,000 entries.  Lookups should be O(1) for any sane implementation.
@}

@fun/goto_case,gosub_case/
@def/goto_case (<expr>) { <val1>: @label1; <val2>: @label2; ~{\ldots~}; <_>: @default }/
@and/gosub_case~{\ldots~}/
@{
  Conditional table jumps.  <expr> is evaluated, and compared to <val1>, <val2>,
  etc.\ in turn, and control passes to the label associated with the first
  matching value.

  The default case is indicated with <_>.  This must always be present, and it
  must always be last.  It is used if no other value matches.

  @ref{goto_case} uses @refnp{goto} to jump, and @ref{gosub_case} uses
  @refnp{gosub}.

  As with @ref{goto_on}, the maximum number of cases is unknown, but definitely
  exceeds 5,000.  It is likely that these functions do not scale so well,
  however.  If the implementation is naive, lookups will be O(n).
@}

\subsection{Call stack and execution state}

@fun/SceneNum/
@def/SceneNum(): store/
@{
  Returns the index of the current scenario.
@}

@fun/CallStackSize/
@def/CallStackSize(): store/
@{
  Returns the current length of the call stack.
@}

@fun/CallStackPop/
@def/CallStackPop([count])/
@{
  Removes the top <count> entries from the call stack (the default is 1).
@}

@fun/CallStackTrunc/
@def/CallStackTrunc(<length>)/
@{
  Truncates the call stack by discarding all but the last <length> entries.
  That is, \lstinline|CallStackTrunc(len)| is equivalent to
  \lstinline|CallStackPop(CallStackSize - len)|.
@}

@fun/CallStackClear/
@def/CallStackClear()/
@{
  Removes all entries from the call stack.
@}

@fun/CallStackNop/
@def/CallStackNop([count])/
@{
  Adds <count> dummy calls to the top of the call stack.  (It's not clear why
  you would ever want to.)
@}

\subsection{Interrupts}

Version 1.3.1 introduces a mechanism for calling a subroutine repeatedly in the
background.  The functions in this section are not available in versions prior
to this.  (The mechanism seems to have been introduced in 1.2.9, but I have
not yet got it working in any of the 1.2.9 interpreters I have.)

Such subroutines should be defined by their own entrypoints.  There
are certain limitations in the functions that can be used in them.  Translated
roughly from the information screen relating to them:

* Objects and memory can be modified, and jumps and calls are permitted.  However,
the screen cannot be rendered to directly.  (It appears that offscreen
DCs can be written to, and possibly DC 0 provided that no redraw is required?)

* The keyboard, mouse, and timer status may be queried, but functions which
pause first (like @ref{GetClick}) or modify the stored status (like
@ref{FlushClick}) are not supported.  (This restriction seems to have been lifted
as of 1.3.2)

* The effect of the DISP command [possibly @ref{refresh}, this needs testing]
is changed.  Since interrupt procedures are actually triggered by DISP calls
in the first place, a DISP call has the same effect as @ref{yield}, i.e.\ it
returns from the interrupt.

* Various other commands are also permitted, basically those that do not cause
the interpreter to break out of the event loop.  Pauses, wipes, text display,
and selection commands are right out.

Note that as of version 1.3.2 this mechanism was still marked as experimental;
you should probably treat it with caution.  Note also that I have not tested
these functions much, so this documentation is probably even less reliable.

@fun/SetInterrupt/
@def/SetInterrupt(<scenario>, <entrypoint>)/
@{
  Sets an interrupt on the given entrypoint.  If I understand the above
  correctly, this will be called every frame, or every time @ref{refresh} is
  called.
@}

@fun/ClearInterrupt/
@def/ClearInterrupt()/
@{
  Clears a previously set interrupt.
@}

@fun/yield/
@def/yield()/
@{
  Returns from an interrupt handler.  Call this instead of @ref{rtl}.
@}


%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Variable manipulation}

\subsection{Integers}\index[concept]{variables!integers}

@fun/rnd/
@def/rnd([min], <max>): store/
@{
  Returns a random integer between <min> and <max> inclusive; <min> defaults to
  0 if not given.
@}

@fun/min/
@def/min(<a>, <b>): store/
@{
  Returns the lesser of <a> and <b>.  This function can be included in constant
  expressions if both parameters are constant.
@}

@fun/max/
@def/max(<a>, <b>): store/
@{
  Returns the greater of <a> and <b>.  This function can be included in constant
  expressions if both parameters are constant.
@}

@fun/constrain/
@def/constrain(<min>, <x>, <max>): store/
@{
  If $min \leqslant x \leqslant max$, returns <x>; otherwise returns whichever
  of <min> or <max> is closer to <x>.  This function can be included in constant
  expressions if all three parameters are constant.
@}

@fun/pcnt/
@def/pcnt(<numerator>, <denominator>): store/
@{
  Returns the percentage of <denominator> represented by <numerator>,
  i.e.\ $\frac{numerator}{denominator} \times 100$
@}

@fun/sign/
@def/sign(<val>): store/
@{
  If <val> is positive, returns $1$; if it is negative, $-1$; if it is zero, $0$.

  This function can be included in constant expressions if <val> is constant.
@}

@fun/abs/
@def/abs(<val>): store/
@{
  Returns $\left|val\right|$.

  This function can be included in constant expressions if <val> is constant.
@}

@fun/modulus/
@def/modulus(<x1>, <y1>, <x2>, <y2>): store/
@{
  Returns the Euclidean distance between $(x_{1}, y_{1})$ and $(x_{2}, y_{2})$.
@}

@fun/power/
@def/power(<base>, [exponent]): store/
@{
  Returns $base^{exponent}$.  If <exponent> is not given, it defaults to 2.

  This function can be included in constant expressions if both parameters are constant.
@}

@fun/sin,cos/
@def/sin(<angle>, [divisor]): store/
@and/cos~{\ldots~}/
@{
  Returns the sine or cosine of <angle> (measured in degrees), multiplied by
  32640.  If <divisor> is given, the return value is divided by it.
@}

@fun/angle/
@def/angle(<x1>, <y1>, <x2>, <y2>): store/
@{
  Returns the angle of the line between $(x_{1}, y_{1})$ and $(x_{2}, y_{2})$.
  The return value is measured in degrees, such that 0$^\circ$ is a line
  oriented vertically upwards.
@}

@fun/index_series/
@def/index_series(<index>, <offset>, <init>, [{<start>, <end>, <endval>, [mode]}~{\ldots~}]): store/
@{
  \minver{function}{1.2.6}

  Returns $f(index + offset)$, where $f()$ is a function I do not fully understand

  It is easiest to describe in terms of a graph plotting the values of $y = f(x)$.
  In the basic case where no ranges $(start, end, endval, mode)$ are provided,
  $f(x) = init$ for all values of $x$.  If a single range is provided with $mode = 0$,
  then
    $$ f(x \leqslant start) = init $$
    $$ f(x > end) = endval $$
    $$ f(start < x \leqslant end) = init + (endval - init) \frac{x - start}{end - start} $$
  Things get complicated when $mode \neq 0$ and when more than one range is provided.
  When more than one range is provided, then, roughly speaking, the value of $init$ for
  each range is taken to be the $endval$ of the previous range.

  When $mode$ is 1 or 3, the range describes an accelerating curve, and when $mode$ is
  2 or 4 it describes a decelerating curve.  I have not attempted to deduce formulae
  for these yet.

  When two ranges overlap, they appear to cancel out in some way; I have not managed to
  work out precisely what's happening in these cases.

  If anyone can figure out the exact function used here, or can write a better explanation,
  I would be only too glad to hear from them.

  As an example:
  \begin{lstlisting}
    for (int input = 0, entry) (input <= 10) (input += 1):
      entry = index_series(input, 0, 5, {0, 5, 10}, {8, 10, 0})
      itoa_s(input, 2) + ', ' + itoa_s(entry, 2)
      par;
    pause
  \end{lstlisting}
  \noindent produces the output
  \begin{lstlisting}
     0,  5
     1,  6
     2,  7
     3,  8
     4,  9
     5, 10
     6, 10
     7, 10
     8, 10
     9,  5
    10,  0
  \end{lstlisting}
@}


\subsection{Arrays}

@fun/array?/
@def/array? (<symbols>~{\ldots~}): integer constant/
@{
  Intrinsic macro: expands to 1 if all <symbols> are arrays, 0 otherwise.
@}

@fun/length/
@def/length (<array>): integer/
@{
  Returns the length of <array>, which must be an array variable.
@}


\subsection{Integer blocks}

@fun/setarray,setarray_stepped/
@def/setarray(<origin>, <values>~{\ldots~})/
@and/setarray_stepped(<origin>, <step>, <values>~{\ldots~})/
@{
  Sets a block of integers, starting with <origin>, to the given values.
  <values> is an arbitrary number of integer expressions, each of which is
  assigned in turn to the next variable.

  Note that despite the functions' names, <origin> may not be an array variable.
  To fill an array $arr$, pass $arr$[0] for <origin> instead.

  With @ref{setarray_stepped}, <step> is added to the address of the current
  variable after each assignment to find the next variable to use.  A <step> of
  1 produces behaviour identical to @ref{setarray}.
@}

@fun/setrng,setrng_stepped/
@def/setrng(<array>, [value])/
@and/setrng(<first>, <last>, [value])/
@and/setrng_stepped(<origin>, <step>, <count>, [value])/
@{
  Sets a block of integers to <value>.  The default value, when none is given,
  is 0.  @ref{setrng} modifies all variables between <first> and <last>
  inclusive, or all members of <array>; @ref{setrng_stepped} modifies <count>
  variables, taking every <step>th variable from <origin>.  In other words, the
  following commands are equivalent:
  \begin{lstlisting}
    setrng(arr, 1)
    setrng(arr[0], arr[length(arr) - 1], 1)
    setrng_stepped(arr[0], 1, length(arr), 1)
  \end{lstlisting}
@}

@fun/cpyrng/
@def/cpyrng(<source>, <dest>, <count>)/
@{
  Copies a block of values of length <count> from <source> to <dest>.  The
  function appears to succeed even if the ranges overlap.
@}

@fun/cpyvars/
@def/cpyvars(<dest>, <offset>, <source>~{\ldots~})/
@{
  Fills consecutive variables, starting with <dest>, with values drawn from
  the list <source>; the value read in each case is the variable at the
  address of the corresponding element in <source> adjusted by the given
  offset.
  
  The above is probably unclear, but examples should explain adequately:
  \begin{lstlisting}
    cpyvars(arr[0], 0, a, b, c, d, e, f)
  \end{lstlisting}
  \noindent is the same as
  \begin{lstlisting}
    setarray(arr[0], a, b, c, d, e, f)
  \end{lstlisting}
  \noindent with the exception that <a> etc. must be variables; and
  \begin{lstlisting}
    cpyvars(arr[3], 2, foo[3], bar[2], baz[1])
  \end{lstlisting}
  \noindent is equivalent to
  \begin{lstlisting}
    arr[3] = foo[5]
    arr[4] = bar[4]
    arr[5] = baz[3]
  \end{lstlisting}
@}

@fun/sum/
@def/sum(<first>, <last>): store/
@{
  Returns the sum of the contents of the block of variables between <first> and
  <last> inclusive.

  For example:
  \begin{lstlisting}
    int arr[10] = 2
    x = sum(arr[0], arr[9]) // x = 20
  \end{lstlisting}
@}

@fun/sums/
@def/sums({<first>, <last>}~{\ldots~}): store/
@{
  Returns the combined sum of all the ranges given.

  For example:
  \begin{lstlisting}
    int arr[10] = 2
    x = sum({arr[0], arr[3]}, {arr[4], arr[9]}) // x = 20
  \end{lstlisting}
@}

\subsection{Strings}\index[concept]{variables!strings}

@fun/strused/
@def/strused(<var>): store/
@{
  Returns 0 if the string variable <var> is empty, otherwise 1.
@}

@fun/strlen/
@def/strlen(<var>): store/
@{
  Returns the length of <var>.  Double-byte characters are counted as two bytes.
@}

@fun/strcharlen/
@def/strcharlen(<var>): store/
@{
  Returns the number of characters in <var>.  Double-byte characters are counted
  as one character.
@}

@fun/strcpy/
@def/strcpy(<dest>, <source>, [count])/
@{
  Copies the first <count> characters of <source> into the variable <dest>.
  <source> may be a string literal or \dirref{res} directive as well as a string
  variable.  If <count> is omitted, the whole string is copied.

  In most circumstances, it is clearer to write
  \begin{lstlisting}
    s = r + 'foo'
  \end{lstlisting}
  \noindent than
  \begin{lstlisting}
    strcpy(s, r + 'foo')
  \end{lstlisting}
@}

@fun/strcat/
@def/strcat(<dest>, <source>)/
@{
  Appends <source> to the variable <dest>.

  As with @ref{strcpy}, it is usually clearer and more efficient to write
  \begin{lstlisting}
    s += r
    s += 'foo'
  \end{lstlisting}
  \noindent than
  \begin{lstlisting}
    strcat(s, r + 'foo')
  \end{lstlisting}
@}

@fun/strclear/
@def/strclear(<first>, [last])/
@{
  Empties the given string variable.

  If <last> is given, the whole range from <first> to <last> will be emptied.
  If <first> is an array, <last> must not be given, and the whole array will be
  emptied.
@}

@fun/strtrunc/
@def/strtrunc(<var>, <length>)/
@{
  Truncates <var> such that its length does not exceed <length> characters.
@}

@fun/stralloc/
@def/stralloc(<var>, <length>)/
@{
  Allocates memory for <var> such that its length is greater than or equal to
  <length> characters.  Any existing value is lost.  The new value is undefined.
  
  The main purpose of this function is to ensure that extension DLLs can write 
  to string variables safely.  There is no way to determine the \emph{capacity} 
  (as distinct from length) of a string: therefore it may be necessary to call 
  this function to ensure that the string has at least the required capacity 
  before calling the DLL, or risk an access violation if it did not.  
@}

@fun/strsub,strrsub/
@def/strsub(<source>, <offset>, [length]): string/
@and/strrsub~{\ldots~}/
@{
  Returns <length> characters from <offset> in <source>.  If <length> is not
  given, the remainder of the string is returned.

  For @ref{strsub}, the offset is calculated from the start of the string. For
  @ref{strrsub}, it is counted backwards from the end. In both cases, the
  substring extends forwards from <offset>, and the count is based on whole
  characters, not bytes.

  To return all characters to the left of a given index, you can use the long
  form of @ref{strcpy} instead.
@}

@fun/strpos/
@def/strpos(<string>, <substring>): store/
@{
  Returns the offset of the first instance of <substring> in <string>, or -1
  if <substring> is not found.
@}

@fun/strlpos/
@def/strlpos(<string>, <substring>): store/
@{
  As @ref{strpos}, but returns the offset of the last instance of <substring>. 
  If <substring> appears only once, or not at all, in <string>, the behaviour is 
  identical with that of <strpos>.
@}

@fun/strcmp/
@def/strcmp(<a>, <b>): store/
@{
  Compares <a> and <b>.  Returns $0$ if they are equivalent, $-1$ if <a> would be
  sorted before <b>, and $1$ if <b> would be sorted before <a>.
  The sort order is that of JIS~X~0208.

  You may prefer to use an expression form rather than this function:
  \begin{lstlisting}
    a == b  ^\textit{equals}^  strcmp(a, b) == 0
    a > b   ^\textit{equals}^  strcmp(a, b) > 0
    a <= b  ^\textit{equals}^  strcmp(a, b) <= 0
  \end{lstlisting}
  \noindent and so on.
@}

@fun/Uppercase,Lowercase/
@def/Uppercase([source]): string/
@and/Lowercase~{\ldots~}/
@{
  Modifies the case of ASCII characters in <source>.  <source> is optional; if
  it is not supplied, the current contents of the variable to which the result
  is assigned are used.  That is to say,
  \begin{lstlisting}
    str foo = Uppercase('foo')
  \end{lstlisting}
  \noindent and
  \begin{lstlisting}
    str foo = 'foo'
    foo = Uppercase
  \end{lstlisting}
  \noindent are equivalent.

  These functions do not affect full-width letters.
@}

@fun/hantozen,zentohan/
@def/hantozen([source]): string/
@and/zentohan~{\ldots~}/
@{
  As @ref{Uppercase}, but affecting character width rather than case.
  @ref{hantozen} converts half-width ASCII and katakana characters to their
  full-width equivalents, and @ref{zentohan} performs the opposite
  transformation.
@}

@fun/itoa,itoa_s,itoa_w,itoa_ws/
@def/itoa(<value>, [length]): string/
@and/itoa_s~{\ldots~}/
@and/itoa_w~{\ldots~}/
@and/itoa_ws~{\ldots~}/
@{
  Converts the integer <value> into a decimal representation.  The optional
  parameter <length> specifies a minimum length for the result.

  The result is right-aligned and (if shorter than <length>) padded with zeroes
  (for @ref{itoa} and @ref{itoa_w}) or spaces (for @ref{itoa_s} and
  @ref{itoa_ws}).  If <value> is negative, a minus sign is prepended, which is
  not included in <length>.  Finally, if the function called was @ref{itoa_w}
  or @ref{itoa_ws}, the return value is converted to full-width characters, so
  that <length> in this case refers to characters, \emph{not} bytes.

  For example, \lstinline|itoa_s(-1, 3)| returns
  \ifhevea\lstinline|'-  1'|\else\lstinline[showstringspaces=true]|'-  1'|\fi.
@}

@fun/digits/
@def/digits(<value>): store/
@{
  Returns the number of digits in the decimal representation of <value>.  This
  is the length of the string that would be generated by an @ref{itoa} call with
  <length> set to 1, excluding any minus sign.
@}

@fun/digit/
@def/digit(<value>, <dest>, <n>): store/
@{
  Sets the variable <dest> to equal the <n>th digit from the right in the
  decimal representation of <value>, and returns the total number of digits in
  the number.

  @ref{digit} can be defined in terms of other functions: for example,
  \begin{lstlisting}
    x = digit(a, y, b)
  \end{lstlisting}
  \noindent is equivalent to
  \begin{lstlisting}
    y = strrsub(itoa(a), b, 1)
    x = digits(a)
  \end{lstlisting}
@}

@fun/atoi/
@def/atoi(<string>): store/
@{
  Returns the value of the integer represented by <string>, or 0 if <string>
  does not represent an integer.  Leading whitespace is ignored, as is anything
  following the last decimal digit.
@}

@fun/intout,strout/
@def/intout(<value>)/
@and/strout(<string>)/
@{
  Function forms of the control codes \ccref{i} and \ccref{s}.  You should use
  the control codes for preference, as the functions will not be taken into
  account by \compiler's lineation routine.
@}

\subsection{Name variables}\index[concept]{name variables}\index[concept]{variables!name variables}

@fun/GetName,GetLocalName/
@def/GetName(<index>): string/
@and/GetLocalName~{\ldots~}/
@{
  Returns the <index>$^{th}$ name variable of the appropriate type.  See section
  \ref{sec:namevars} for details.
@}

@fun/SetName,SetLocalName/
@def/SetName(<index>, <string>)/
@and/SetLocalName~{\ldots~}/
@{
  Sets the <index>$^{th}$ name variable of the appropriate type to <string>.  See
  section \ref{sec:namevars} for details.
@}

%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Input}

\subsection{Selections}

@fun/select,select_s,select_w/
@def/select(<options>~{\ldots~}): store/
@and/select_s~{\ldots~}/
@and/select_w [window] (<options>~{\ldots~}): store/
@{
  The @ref{select} family of functions are the primary interface between player
  and game in a standard visual-novel-style work.  They present a set of
  options.  The return value is a zero-based integer indicating the option
  selected, or a negative value indicating an error.

  The difference between the three variants is the manner in which the options
  are presented:
  \begin{itemize}
  \item @ref{select} displays them in the normal text window; unlike the AVG32
    equivalent, it appears \emph{not} to break them into columns if there are
    too many options to fit in the window, so use with care.
  \item @ref{select_s} displays them as a series of buttons, formatted
    according to the settings of the @iref{SELBTN} variables in
    \gameexe.  This is the command used to display F\umac ko's ``donna
    itazura wo?'' selections in \opus{Clannad}.
  \item @ref{select_w} displays them in a separate selection window, which
    automatically expands to fit the number of options.

    The window specifier <window> is an integer, enclosed in square brackets,
    which can optionally come between @ref{select_w} and its parameter list.
    This selects the window to use for the options.  It must be defined with
    @iref{WINDOW}, and @irefs{WINDOW}{SELCOM_USE} must be set for it.  If
    <window> is omitted, the value of @iref{DEFAULT_SEL_WINDOW} is used.
  \end{itemize}

  <options> is a list of strings, with a special extension.  Each string can
  optionally be preceded by an effect specifier, which is a semicolon-delimited
  list of effects terminated with a colon.  Each effect, in turn, is a combination
  of a function and an optional condition.  The recognised functions are:

  \begin{itemize}
  \item @def/hide/
    The option is not presented at all, although a return value is still allocated
    for it.  This is probably only meaningful with conditions.
  \item @dev/blank/
    A blank, non-selectable line is presented in place of the option.
  \item @def/colour(<colour>)/
    Displays the option in the given colour, which is an index to @iref{COLOR_TABLE}
    in \gameexe.
  \item @def/title([colour])/
    Disables the option. If <colour> is specified, it has the same effect as the
    \texttt{colour} function as well.
  \item @def/cursor(<index>)/
    Displays an icon next to the option when it is highlighted.  The icon chosen
    is defined by @iref{CURSOR}.<index> in \gameexe.
  \end{itemize}

  A condition is added by following the function with \lstinline|if| and then an 
  expression; the effect will be applied only if the expression evaluates to a 
  non-zero value.

  For example, you might write a simple main menu like this:
  \begin{lstlisting}
    repeat
      case
        select_w (
          'New game',
          title if LatestSave < 0: 'Load game',
          hide if !game_finished: 'Omake',
          'Exit'
        )
      of 0 // 'New game' selected
        jump(game_start_scenario)
      of 1 // 'Load game' selected
        menu_load
        break
      of 2 // 'Omake' selected
        farcall(omake_scenario)
        break
      other // 'Exit' selected (or an error occurred)
        end
      ecase
    till 0
  \end{lstlisting}
@}

@fun/ReturnPrevSelect/
@def/ReturnPrevSelect()/
@{
  Jumps back to the previous @ref{select}, @ref{select_w}, or @ref{select_s}
  call.
@}

\subsection{Text boxes}\index[concept]{input!keyboard}

@fun/CreateInput/
@def/CreateInput(<index>, <x>, <y>, <width>, <height>, <fontsize>, <br>, <bg>, <bb>, <fr>, <fg>, <fb>)/
@{
  Creates a text input box identified as <index>.  The box covers the area
  (<x>,~<y>)-(<x>~+~<width>,~<y>~+~<height>), has a background colour defined by
  the RGB triplet (<br>,~<bg>,~<bb>), and the font it uses is <fontsize> pixels
  high and coloured (<fr>,~<fg>,~<fb>).
@}

@fun/CloseInput,CloseAllInputs/
@def/CloseInput(<index>)/
@and/CloseAllInputs()/
@{
  @ref{CloseInput} deletes the indexed input box; @ref{CloseAllInputs} deletes
  all open input boxes.
@}

@fun/FocusInput/
@def/FocusInput(<index>)/
@{
  Sets the keyboard focus to input box <index>.
@}

@fun/SetInput/
@def/SetInput(<index>, <text>)/
@{
  Sets the contents of input box <index> to <text>.
@}

@fun/GetInput/
@def/GetInput(<index>): string/
@{
  Returns the contents of input box <index> as a string.
@}

\subsection{Mouse input}\index[concept]{input!mouse}

@fun/GetClick/
@def/GetClick(<x>, <y>): store/
@{
  Waits for a click, then fills the variables <x> and <y> with the current
  location of the mouse cursor, and returns a value indicating which mouse
  button was pressed:

  \begin{tabular}{r@@{\hs}l}
  \textbf{1}  & left button \\
  \textbf{0}  & neither \\
  \textbf{-1} & right button
  \end{tabular}
@}

@fun/WaitClick/
@def/WaitClick(<time>, <x>, <y>): store/
@{
  A cross between @ref{GetClick} and @ref{waitC}.  Waits up to <time> ms; when 
  the time runs out, or sooner if the player clicks, fills <x> and <y> with the 
  location of the mouse cursor and returns a value as for @ref{GetClick}.
@}

@fun/GetCursorPos/
@def/GetCursorPos(<x>, <y>, @[<button1>, <button2>@])/
@{
  Fills the variables <x> and <y> with the current location of the mouse cursor;
  if variables <button1> and <button2> are provided, they are additionally
  filled with the current status of each mouse button.

  \index[concept]{mouse buttons}
  The following values are used to indicate a button's status:

  \begin{tabular}{r@@{\hs}l}
  \textbf{0} & unpressed \\
  \textbf{1} & being pressed \\
  \textbf{2} & pressed and released
  \end{tabular}
@}

@fun/FlushClick/
@def/FlushClick()/
@{
  Resets each mouse button's status to 0.
@}

@fun/SetCursorPos/
@def/SetCursorPos(<x>, <y>)/
@{
  Moves the cursor to ($x$, $y$).
@}


\subsection{Keyboard input}\index[concept]{input!keyboard}

@fun/CtrlPressed/
@def/CtrlPressed(): store/
@{
  Returns 1 if the Control key is pressed, 0 otherwise.  \reallive\ seems to
  interpret the AltGr key as another Control key.
@}

@fun/ShiftPressed/
@def/ShiftPressed(): store/
@{
  Returns 1 if the Shift key is pressed, 0 otherwise.
@}

@fun/CtrlKeySkip,CtrlKeySkipOn,CtrlKeySkipOff/
@def/CtrlKeySkip(): store/
@and/CtrlKeySkipOn()/
@and/CtrlKeySkipOff()/
@{
  If the `Control-key skip' flag is enabled, holding Control will fast-forward
  through pauses and text display, even if the text in question has not been
  viewed previously.  @ref{CtrlKeySkip} returns the current value of the flag,
  while the other two functions turn it on and off respectively.

  The default can be set in \gameexe\ with the @iref{CTRL_USE} variable.
@}

@fun/KeyMouseOn,KeyMouseOff/
@def/KeyMouseOn()/
@and/KeyMouseOff()/
@{
  Enables or disables the use of the cursor keys to move the mouse pointer.
@}

%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Text window controls}\index[concept]{windows}

\subsection{Pausing and breaking}

@fun/pause/
@def/pause()/
@{
  Pause between paragraphs of text, waiting for a mouse click.  While the game
  is paused, the text log can be viewed, text windows hidden, the menu displayed,
  games saved and loaded, etc.

  If @irefs{WINDOW}{R_COMMAND_MOD} is set to 0 for the active window, this function
  behaves identically to @ref{page}, i.e.\ the active text window is cleared
  when the game continues, and all other open text windows are closed.  If it is
  set to 1, @ref{pause} ends a paragraph rather than a page, inserts a line
  break instead of clearing the window, and leaves other text windows unmodified.
@}

@fun/pause_all/
@def/pause_all()/
@{
  As @ref{pause}, but other text windows are never closed when the game continues,
  regardless of @irefs{WINDOW}{R_COMMAND_MOD} settings.
@}

@fun/page/
@def/page()/
@{
  Pause between screens of text: as @ref{pause}, but when the game continues,
  the active text window is always cleared, and other windows always closed,
  regardless of the setting of @irefs{WINDOW}{R_COMMAND_MOD}.
@}

@fun/spause/
@def/spause()/
@{
  Pause within a paragraph of text: as @ref{pause}, but when the game continues,
  the active text window is not cleared, nor is a new line begun, and other open
  text windows are not affected.  This is the function equivalent to the control
  code \ccref{p}.
@}

@fun/br/
@def/br()/
@{
  Inserts a hard line break, preserving the current indentation level.  This is
  the function equivalent to the control code \ccref{n}.
@}

@fun/par/
@def/par()/
@{
  Inserts a hard line break, and resets indentation to zero.  This is the
  function equivalent to the control code \ccref{r}.
@}

\subsection{Moving text}

@fun/TextOffset,TextOffsetX,TextOffsetY/
@def/TextOffset(<x>, <y>)/
@and/TextOffsetX(<x>)/
@and/TextOffsetY(<y>)/
@{
  Move the text insertion point, i.e. the position relative to the text window
  at which the next character to be output will be printed, by $(x, y)$ pixels.

  These are the function equivalents to the control codes \ccref{mv},
  \ccref{mvx}, and \ccref{mvy}; see the descriptions of those for the precise
  semantics and applications.
@}

@fun/TextPos,TextPosX,TextPosY/
@def/TextPos(<x>, <y>/
@and/TextPosX(<x>)/
@and/TextPosY(<y>)/
@{
  As @ref{TextOffset} etc., except <x> and <y> are absolute rather than relative
  to the current insertion point.
@}

\subsection{Appearance}\index[concept]{windows!style}

@fun/TextWindow/
@def/TextWindow([index])/
@{
  Changes the active text window.  Text windows are defined with the
  @iref{WINDOW} variables in \gameexe.  If <index> is not given, resets
  it to the default, usually (always?) 0.
@}

@fun/GetWindowPos,GetDefaultWindowPos/
@def/GetWindowPos(<index>, <origin>, <x>, <y>)/
@and/GetWindowDefaultPos(<index>, <origin>, <x>, <y>)/
@{
  Fills the variables <origin>, <x>, and <y> with the current or default
  position of window <index>.

  As with the \gameexe\ setting @irefs{WINDOW}{POS}, <x> and <y> are the 
  absolute distance between an edge of the screen, determined by <origin>, and 
  the nearest edge of the window.  Values of <origin> are:

  \begin{tabular}{r@@{\hs}l}
  \textbf{0} & top and left  \\
  \textbf{1} & top and right \\
  \textbf{2} & bottom and left \\
  \textbf{3} & bottom and right
  \end{tabular}
@}

@fun/SetWindowPos,ResetWindowPos/
@def/SetWindowPos(<index>, <origin>, <x>, <y>)/
@and/ResetWindowPos(<index>)/
@{
  Set the position of window <index>, either to the given position
  (defined as for @ref{GetWindowPos}), or to the default defined in
  \gameexe.
@}

@fun/GetWakuAll,SetWakuAll/
@def/GetWakuAll(): store/
@and/SetWakuAll(<style>)/
@{
  Returns or modifies the current window decoration style.
@}

\index[concept]{windows!fonts}
@fun/FontColour,SetFontColour,SetFontColourAll/
@def/FontColour([text], [shadow])/
@and/SetFontColour~{\ldots~}/
@and/SetFontColourAll~{\ldots~}/
@{
  Sets the text foreground to the colour of index <text>, and the text shadow to
  colour <shadow>.  If only <text> is given, the default shadow colour is used,
  and if neither parameter is given, both colours are reset to their defaults.
  \begin{itemize}
  \item @ref{FontColour} is equivalent to the control code \ccref{c}, in
    that the colours are reset after the next @ref{pause} call.
  \item @ref{SetFontColour} modifies the colour permanently.
  \item @ref{SetFontColourAll} does the same for all windows at once.
  \end{itemize}
  \noindent
  There is no control code equivalent for either of these latter forms.
@}

@fun/FontSize,FontSizeAll/
@def/FontSize([size])/
@and/FontSizeAll~{\ldots~}/
@{
  Sets the font size to <size>, or to the default if <size> is not given.  The
  behaviour of @ref{FontSize} is identical to the control code \ccref{size}.
  @ref{FontSizeAll} does the same for all windows at once.
@}

\index[concept]{windows!attributes}
@fun/GetWindowAttr,DefWindowAttr,SetWindowAttr/
@def/GetWindowAttr(<r>, <g>, <b>, [alpha], [filter])/
@and/DefWindowAttr~{\ldots~}/
@{
  The parameters are integer variables, which are filled with the values of the
  window attributes: the RGB components of its background colour, the <alpha>
  value with which it is composited with the image behind, and a value <filter>
  which determines the composition mode: if it is 0, a subtractive filter is
  used, while if it is 1, a straightforward alpha filter is used.

  @ref{GetWindowAttr} returns the current values, while @ref{DefWindowAttr}
  returns the defaults, as defined in \gameexe\ with the variable
  @iref{WINDOW_ATTR}. (Note that there are also window-specific settings
  @irefs{WINDOW}{ATTR}, which will override the global settings on a window-by-window
  basis if the relevant @irefs{WINDOW}{ATTR_MOD} is 1.)
@}
@def/SetWindowAttr(<r>, <g>, <b>, [alpha], [filter])/
@{
  Modifies window attributes.  The parameters have the same meaning as in
  @ref{GetWindowAttr}, except that arbitrary integer expressions may be
  used.

  If no values are supplied for the <alpha> and <filter> parameters, those
  settings are not modified.
@}

@fun/WindowAttrR,WindowAttrG,WindowAttrB,WindowAttrA,WindowAttrF,DefWindowAttrR,DefWindowAttrG,DefWindowAttrB,DefWindowAttrA,DefWindowAttrF/
@def/WindowAttrR(): store/
@and/WindowAttrG~{\ldots~}/
@and/WindowAttrB~{\ldots~}/
@and/WindowAttrA~{\ldots~}/
@and/WindowAttrF~{\ldots~}/
@and/DefWindowAttrR~{\ldots~}/
@and/DefWindowAttrG~{\ldots~}/
@and/DefWindowAttrB~{\ldots~}/
@and/DefWindowAttrA~{\ldots~}/
@and/DefWindowAttrF~{\ldots~}/
@{
  Functions permitting direct access to current and default values of individual
  window attributes.  The code
  \begin{lstlisting}
    r = WindowAttrR
    g = WindowAttrG
    b = WindowAttrB
    a = WindowAttrA
    f = WindowAttrF
  \end{lstlisting}
  \noindent is equivalent to
  \begin{lstlisting}
    GetWindowAttr(r, g, b, a, f)
  \end{lstlisting}
@}

@fun/SetWindowAttrR,SetWindowAttrG,SetWindowAttrB,SetWindowAttrA,SetWindowAttrF/
@def/SetWindowAttrR(<r>)/
@and/SetWindowAttrG(<g>)/
@and/SetWindowAttrB(<b>)/
@and/SetWindowAttrA(<alpha>)/
@and/SetWindowAttrF(<filter>)/
@{
  Functions permitting direct modifications of individual window attributes.
@}

\subsection{Text speed}\index[concept]{windows!text speed}

@fun/FastText/
@def/FastText()/
@{
  Enables `fast text' mode: text is printed immediately, rather than one letter
  at a time, regardless of the message speed settings.
@}

@fun/NormalText/
@def/NormalText()/
@{
  Disables `fast text' mode.
@}

@fun/SetMessageNoWait,MessageNoWait,DefMessageNoWait/
@def/SetMessageNoWait(<flag>)/
@{
  Sets the internal `no wait' flag to <flag>.  If it is 1, text is printed
  without pausing between letters; if it is 0, the speed at which text is
  printed depends on the message speed setting.

  Note that this setting is independent of `fast text' mode.  The player can use
  the `no wait' flag to force text always to be printed at maximum speed, but
  they cannot use it to force text always to be printed slowly.
@}
@def/MessageNoWait(): store/
@and/DefMessageNoWait~{\ldots~}/
@{
  These return, respectively, the current and the default settings for the
  internal `no wait' flag.
@}

@fun/SetMessageSpeed,MessageSpeed,DefMessageSpeed/
@def/SetMessageSpeed(<speed>)/
@{
  Sets the message speed to <speed>, where 0 is practically instantaneous and
  255 is very slow.
@}
@def/MessageSpeed(): store/
@and/DefMessageSpeed~{\ldots~}/
@{
  These return, respectively, the current and the default settings for the
  message speed.
@}

\subsection{Clearing text windows}

@fun/msgHide/
@def/msgHide()/
@{
  Closes the active text window.
@}

@fun/msgHideAll/
@def/msgHideAll()/
@{
  Closes all open text windows.
@}

@fun/msgHideAllTemp/
@def/msgHideAllTemp()/
@{
  Hides all open text windows temporarily; they reappear unchanged when
  the next command operates on them.
@}

@fun/msgClear/
@def/msgClear()/
@{
  Empties, but does not remove, the active text window.
@}

@fun/msgClearAll/
@def/msgClearAll()/
@{
  Empties, but does not remove, all open text windows.
@}

\subsection{Window animations}

@fun/EnableWindowAnm,DisableWindowAnm/
@def/EnableWindowAnm(<window>)/
@and/DisableWindowAnm(<window>)/
@{
  Enable or disable opening and closing animations for <window>. Animations are 
  enabled by default. If they are disabled, windows appear and disappear 
  instantaneously.
@}

@fun/GetOpenAnmMod,GetCloseAnmMod,GetOpenAnmTime,GetCloseAnmTime/
@def/GetOpenAnmMod(<window>): store/
@and/GetCloseAnmMod~{\ldots~}/
@and/GetOpenAnmTime~{\ldots~}/
@and/GetCloseAnmTime~{\ldots~}/
@{
  Retrieve the current settings for window animations.  The initial values are
  defined in \gameexe\ with variables such as @irefs{WINDOW}{OPEN_ANM_MOD}:
  see \ref{sec:iniwindowanims} for details.
@}

@fun/SetOpenAnmMod,SetCloseAnmMod,SetOpenAnmTime,SetCloseAnmTime/
@def/SetOpenAnmMod(<window>, <mod>)/
@and/SetCloseAnmMod~{\ldots~}/
@and/SetOpenAnmTime(<window>, <ms>)/
@and/SetCloseAnmTime~{\ldots~}/
@{
  Modify the current settings for window animations.  See \ref{sec:iniwindowanims} 
  for valid parameters and their meanings.
@}

\subsection{Character portraits}

Character portraits are pictures attached to a text window (and therefore shown
and hidden with it), typically used to give the expressions of speaking
characters.  They are ordinary \file{g00} bitmaps, attached to the window by
being opened in a `face' slot; there are up to eight of these (although most
games use one at most), defined in \gameexe\ with the
@irefs{WINDOW}{FACE} variables.

@fun/FaceOpen/
@def/FaceOpen(<file>, [index])/
@{
  Loads <file> as a character portrait, displaying it as face <index>, or face 0
  if <index> is not given.
@}

@fun/FaceClear/
@def/FaceClear([index])/
@{
  Removes face <index>, or face 0 if <index> is not given.
@}

%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Sound}

\subsection{Sound settings}

@fun/SetSoundQuality,SoundQuality/
@def/SetSoundQuality(<setting>)/
@{
  Sets the sound quality, i.e.\ the sample size and frequency to use for all
  sound output.  Valid settings are:

  \begin{tabular}{r@@{\hs}c@@{\hs}r}
  \textbf{0} & 11 kHz & 8 bit  \\
  \textbf{1} & 11 kHz & 16 bit \\
  \textbf{2} & 22 kHz & 8 bit  \\
  \textbf{3} & 22 kHz & 16 bit \\
  \textbf{4} & 44 kHz & 8 bit  \\
  \textbf{5} & 44 kHz & 16 bit \\
  \textbf{6} & 48 kHz & 8 bit  \\
  \textbf{7} & 48 hKz & 16 bit
  \end{tabular}
@}
@def/SoundQuality(): store/
@{
  Returns the current sound quality.
@}

@fun/SetReduceDistortion,ReduceDistortion/
@def/SetReduceDistortion(<flag>)/
@and/ReduceDistortion(): store/
@{
  Set or get a flag of unknown meaning.  \reallive\ describes its function as
  ``enable this if you get distortion during sound playback''.
@}

\subsection{Music}\label{sec:musicfunctions}\index[concept]{music}\index[concept]{CD audio}

Music playback operates on `tracks', which are predefined in \gameexe\ with the
@iref{CDTRACK} and @iref{DSTRACK} variables.

@fun/SetBgmEnabled,BgmEnabled/
@def/SetBgmEnabled(<flag>)/
@{
  Set to 1 to enable music playback, or to 0 to disable it.
@}
@def/BgmEnabled(): store/
@{
  Returns 1 if music playback is enabled, or 0 otherwise.
@}

@fun/SetBgmVolMod,BgmVolMod/
@def/SetBgmVolMod(<level>)/
@{
  Sets the volume of music relative to other sound playback.  <level> should be
  between 0 and 255.
@}
@def/BgmVolMod(): store/
@{
  Returns the current music volume modifier.
@}

@fun/bgmPlay/
@def/bgmPlay(<track>, [fadein], [fadeout])/
@{
  Starts <track> playing.  If <fadein> is given, the track will fade in over
  <fadein> ms.  If <fadeout> is given, and another track was already playing,
  that track will simultaneously fade out over <fadeout> ms, otherwise it will
  be cut off immediately.

  The music is played in the background: control passes to the next statement
  immediately.
@}

@fun/bgmPlayEx/
@def/bgmPlayEx(<track>, [fadein], [fadeout])/
@{
  As @ref{bgmPlay}, but plays in the foreground rather than the background:
  that is, the call does not return until the track has finished playing.
@}

@fun/bgmLoop/
@def/bgmLoop(<track>, [fadein], [fadeout])/
@{
  As @ref{bgmPlay}, but rather than playing the track once, it is played
  repeatedly: each time it reaches the end, it returns to the loop position
  given in the track definition.
@}

@fun/bgmWait/
@def/bgmWait()/
@{
  If a music track is currently playing, waits for the current playthrough to
  end and then stops it.  The function does not return until the music has
  stopped.  In other words, this function converts a previous @ref{bgmPlay}
  or @ref{bgmLoop} call into a @ref{bgmPlayEx} call.
@}

@fun/bgmStatus/
@def/bgmStatus(): store/
@{
  Returns a value indicating the status of the music subsystem:
  
  \begin{tabular}{r@@{\hs}l}
  \textbf{0} & Idle \\
  \textbf{1} & Playing music \\
  \textbf{2} & Fading out music
  \end{tabular}
@}

@fun/bgmPlaying/
@def/bgmPlaying(): store/
@{
  Returns a value indicating whether the music subsystem is playing a
  track normally.  Equivalent to
  \begin{lstlisting}
    bgmStatus == 1
  \end{lstlisting}
@}

@fun/bgmStop/
@def/bgmStop()/
@{
  Stops any music that might have been playing.
@}

@fun/bgmFadeOut,bgmFadeOutEx/
@def/bgmFadeOut(<fadetime>)/
@and/bgmFadeOutEx([fadetime])/
@{
  Stops music by fading it out over <fadetime> ms.  @ref{bgmFadeOut} returns 
  immediately and fades the music out in the background; @ref{bgmFadeOutEx} 
  pauses the game while it fades and does not return until the music has 
  stopped.
@}

@fun/bgmRewind/
@def/bgmRewind()/
@{
  If a music track is currently playing, rewinds it to the beginning.
@}

@fun/bgmTimer/
@def/bgmTimer(): store/
@{
  If a music track is currently playing, returns the current position in
  the track, in ms, counting from the beginning of the track (not from
  when the track began playing: that is, the timer is reset each time a
  looping track restarts).
@}

@fun/bgmSetVolume,bgmVolume/
@def/bgmSetVolume(<level>, [fadetime])/
@{
  Sets the music volume to <level>, which should be between 0 and 255.  The
  actual volume used will be $$\frac{level \times mod_{bgm}}{255}$$ where
  $mod_{bgm}$ is the volume level controlled by @ref{SetBgmVolMod}.

  If <fadetime> is given, the volume will change smoothly, with the change
  taking <fadetime> ms, otherwise it will change instantly.
@}
@def/bgmVolume(): store/
@{
  Returns the music volume level.  (This is the value equivalent to the input
  to @ref{bgmSetVolume}, not the actual output volume, of course.)
@}

@fun/bgmMute,bgmUnMute/
@def/bgmMute([fadetime])/
@and/bgmUnMute~{\ldots~}/
@{
  Sets the music volume level to the minimum and maximum respectively.  That is
  to say,
  \begin{lstlisting}
    bgmMute(1000)   ^\textit{equals}^ bgmSetVolume(0, 1000)
    bgmUnMute(1000) ^\textit{equals}^ bgmSetVolume(255, 1000)
  \end{lstlisting}
@}

\subsection{Sound effects}

\index[concept]{sound!wave files}
Sound effects are played from standard \file{wav} files, which are referenced
directly by name (sans extension).

\index[concept]{sound!channels}
To permit multiple sound effects to be played simultaneously, the \reallive{}
system provides a number of channels: 16, plus eight more that can only be
accessed indirectly by @ref{wavPlay}.  Most sound effect functions therefore
take a parameter <channel>, which should be an integer between 0 and 15.  If a
new sound effect is ordered on a channel which is already playing one, the
previous sound is cancelled, so channels must be allocated carefully.

@fun/SetPcmEnabled,PcmEnabled/
@def/SetPcmEnabled(<flag>)/
@{
  Set to 1 to enable wave file playback, or to 0 to disable it.
@}
@def/PcmEnabled(): store/
@{
  Returns 1 if wave file playback is enabled, or 0 otherwise.
@}

@fun/SetPcmVolMod,PcmVolMod/
@def/SetPcmVolMod(<level>)/
@{
  Sets the volume of wave files relative to other sound playback.  <level>
  should be between 0 and 255.  This is a global setting affecting all
  channels.
@}
@def/PcmVolMod(): store/
@{
  Returns the current wave file volume modifier.
@}

@fun/wavPlay/
@def/wavPlay(<filename>, [channel], [fadein])/
@{
  Plays <filename>\file{.wav}.  If <fadein> is given, the sound effect fades in
  over <fadein> ms.

  The sound effect is played in the background; control passes to the next
  statement immediately.

  \index[concept]{sound!channels}
  Uniquely to this function, <channel> is optional.  If it is omitted, the sound
  effect is played back in one of 8 `general-purpose' channels, which are
  separate from the 16 normal channels.  These are controlled automatically,
  and cannot be operated on by most of the other functions in this section.
@}

@fun/wavPlayEx/
@def/wavPlayEx(<filename>, <channel>, [fadein])/
@{
  As @ref{wavPlay}, but control does not pass to the next statement until the
  sound effect has finished playing.
@}

@fun/wavLoop/
@def/wavLoop(<filename>, <channel>, [fadein])/
@{
  As @ref{wavPlay}, but rather than playing the track once, it is played
  repeatedly.
@}

@fun/wavWait/
@def/wavWait(<channel>)/
@{
  If a sound effect is currently playing in <channel>, waits for the current
  playthrough to end and then stops it.  The function does not return until the
  sound effect has stopped.  In other words, this function converts a previous
  @ref{wavPlay} or @ref{wavLoop} call into a @ref{wavPlayEx} call.
@}

@fun/wavPlaying/
@def/wavPlaying(<channel>): store/
@{
  Returns 1 if a sound effect is currently playing in <channel>, or 0 otherwise.
@}

@fun/wavStop,wavStopAll/
@def/wavStop([channel])/
@{
  Stops the sound effect in <channel>, or all sound effects if <channel> is not
  given.
@}

@def/wavStopAll()/
@{
  Stops all sound effects.
@}

@fun/wavFadeOut/
@def/wavFadeOut(<channel>, <fadetime>)/
@{
  Stops the sound effect in <channel> by fading it out over <fadetime> ms.
@}

@fun/wavRewind/
@def/wavRewind(<channel>)/
@{
  If a sound effect is currently playing in <channel>, rewinds it to the
  beginning.
@}

@fun/wavSetVolume,wavVolume/
@def/wavSetVolume(<channel>, <level>, [fadetime])/
@{
  Sets the volume level of <channel> to <level>, which should be between 0 and
  255.  The actual volume used is calculated relative to the overall sound
  effect volume modifier in the same way as for @ref{bgmSetVolume}.

  If <fadetime> is given, the volume will change smoothly, with the change
  taking <fadetime> ms, otherwise it will change instantly.
@}
@def/wavVolume(<channel>): store/
@{
  Returns the volume level of <channel>.
@}

@fun/wavMute,wavUnMute/
@def/wavMute(<channel>, [fadetime])/
@and/wavUnMute~{\ldots~}/
@{
  Sets the volume level of <channel> to the minimum and maximum respectively.
  That is to say,
  \begin{lstlisting}
    wavMute(0)   ^\textit{equals}^ wavSetVolume(0, 0)
    wavUnMute(0) ^\textit{equals}^ wavSetVolume(0, 255)
  \end{lstlisting}
@}

\subsection{Interface sounds}\label{sec:sefunctions}\index[concept]{sound!interface effects}

Interface sounds are, as the name suggests, sound effects normally attached to
interface events.  As with other sound effects, they are stored in standard
\file{wav} files, but their manner of invocation is different.

Interface sounds are defined in \gameexe\ with the @iref{SE} variables.

@fun/SetSeEnabled,SeEnabled/
@def/SetSeEnabled(<flag>)/
@{
  Set to 1 to enable interface sound playback, or to 0 to disable it.
@}
@def/SeEnabled(): store/
@{
  Returns 1 if interface sound playback is enabled, or 0 otherwise.
@}

@fun/SetSeVolMod,SeVolMod/
@def/SetSeVolMod(<level>)/
@{
  Sets the volume of interface sound effects relative to other sound playback.
  <level> should be between 0 and 255.
@}
@def/SeVolMod(): store/
@{
  Returns the current interface sound effect volume modifier.
@}

@fun/sePlay/
@def/sePlay(<index>)/
@{
  Plays the indexed interface sound.
@}

\subsection{Voices}\index[concept]{sound!voices}\index[concept]{voices}

@fun/SetKoeEnabled,KoeEnabled/
@def/SetKoeEnabled(<flag>)/
@{
  Set to 1 to enable voice playback, or to 0 to disable it.
@}
@def/KoeEnabled(): store/
@{
  Returns 1 if voice playback is enabled, or 0 otherwise.
@}

@fun/SetKoeVolMod,KoeVolMod/
@def/SetKoeVolMod(<level>)/
@{
  Sets the volume of voice relative to other sound playback.  <level> should be
  between 0 and 255.
@}
@def/KoeVolMod(): store/
@{
  Returns the current voice volume modifier.
@}

@fun/SetUseKoe,UseKoe/
@def/SetUseKoe(<character>, <flag>)/
@{
  Set to 1 to enable voices for <character>, or 0 to disable them.  This permits
  voice control on a per-character basis.
@}
@def/UseKoe(<character>): store/
@{
  Returns the current value of the UseKoe flag for the given character.
@}

@fun/SetKoeMode,KoeMode/
@def/SetKoeMode(<mode>)/
@{
  Selects a voice playback mode, i.e.\ which form of communication to use for
  strings having both text and voice data:

  \begin{tabular}{r@@{\hs}l}
  \textbf{0} & Text and voice \\
  \textbf{1} & Text only      \\
  \textbf{2} & Voice only
  \end{tabular}
@}
@def/KoeMode(): store/
@{
  Returns the current voice playback mode.
@}

@fun/SetBgmKoeFade,BgmKoeFade,DefBgmKoeFade/
@def/SetBgmKoeFade(<flag>)/
@{
  Sets the music/voice fade flag.  This determines whether to decrease the music
  volume while voice data is playing. If <flag> is 1, music is faded; if it is
  0, the volume is not modified.
@}
@def/BgmKoeFade(): store/
@and/DefBgmKoeFade~{\ldots~}/
@{
  Return the current and default value of the music/voice fade flag.
@}

@fun/SetBgmKoeFadeVol,BgmKoeFadeVol,DefBgmKoeFadeVol/
@def/SetBgmKoeFadeVol(<flag>)/
@{
  Sets the amount by which the music volume is modified when the music/voice fade
  flag is active.
@}
@def/BgmKoeFadeVol(): store/
@and/DefBgmKoeFadeVol~{\ldots~}/
@{
  Return the current and default values of the music/voice fade volume modifier.
@}

@fun/koePlay,koeDoPlay/
@def/koePlay(<koe>, [character])/
@and/koeDoPlay~{\ldots~}/
@{
  Plays voice sample <koe>.  If <character> is given, it identifies a speaker
  for use with the @ref{UseKoe}-based selective character voice activation.
  @ref{koePlay} takes this into account, but @ref{koeDoPlay} always plays the
  voice, regardless of @def/UseKoe(<character>)/.
@}

@fun/koePlayEx,koeDoPlayEx/
@def/koePlayEx(<koe>, [character])/
@and/koeDoPlayEx~{\ldots~}/
@{
  These are to @ref{koePlay} and @ref{koeDoPlay} as @ref{wavPlayEx} is to
  @ref{wavPlay}.
@}

@fun/koePlayExC,koeDoPlayExC/
@def/koePlayExC(<koe>, [character]): store/
@and/koeDoPlayExC~{\ldots~}/
@{
  As @ref{koePlayEx} and @ref{koeDoPlayEx}, but can be cancelled with a mouse
  click.  The return value is 1 if this happened, 0 otherwise. (Note that it
  is 0 if the sample was cancelled by fast-forwarding with Ctrl.)
@}

@fun/koeWait/
@def/koeWait()/
@{
  Pauses until the currently playing voice sample ends.  Effectively converts a
  previous @ref{koePlay} call into @ref{koePlayEx}.
@}

@fun/koeWaitC/
@def/koeWaitC(): store/
@{
  As @ref{koeWait}, but can be cancelled with a mouse click.  The return value
  is as for @ref{koePlayExC}.
@}

@fun/koePlaying/
@def/koePlaying(): store/
@{
  Returns 1 if a voice sample is currently playing, or 0 otherwise.
@}

@fun/koeStop/
@def/koeStop()/
@{
  Stops the currently playing voice sample, if any.
@}

@fun/koeSetVolume,koeVolume/
@def/koeSetVolume(<level>, [fadetime])/
@{
  Sets the voice volume to <level>, which should be between 0 and 255.  The
  actual volume used is calculated relative to the overall sound effect volume
  modifier in the same way as for @ref{bgmSetVolume}.

  If <fadetime> is given, the volume will change smoothly, with the change
  taking <fadetime> ms, otherwise it will change instantly.
@}
@def/koeVolume(): store/
@{
  Returns the voice volume level.
@}

@fun/koeMute,koeUnMute/
@def/koeMute([fadetime])/
@and/koeUnMute~{\ldots~}/
@{
  Sets the voice volume level to the minimum and maximum respectively.  That is
  to say,
  \begin{lstlisting}
    koeMute(1000)   ^\textit{equals}^ koeSetVolume(0, 1000)
    koeUnMute(1000) ^\textit{equals}^ koeSetVolume(255, 1000)
  \end{lstlisting}
@}

%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Graphics}\label{sec:graphics}

\index[concept]{naming conventions!graphics}
\emph{A naming convention is used in this section to streamline the
documentation:}
For every function with a name beginning \texttt{rec}, there exists another
function with of the same name, with \texttt{rec} replaced with \texttt{grp}.
These pairs of functions all have identical parameters and behaviour, with one
exception: where the \texttt{rec} function takes parameters of the form ``$x$,
$y$, $width$, $height$'', denoting a rectangle from ($x$, $y$) to ($x + width$,
$y + height$), the \texttt{grp} function interprets the same parameters as
``$x$, $y$, $x'$, $y'$'', denoting a rectangle from ($x$, $y$) to ($x'$, $y'$).

\subsection{Screen settings}

@fun/ScreenWidth,ScreenHeight/
@def/ScreenWidth(): integer constant/
@and/ScreenHeight(): integer constant/
@{
  These macros expand to the width and height of the screen, in pixels, based
  on the setting of @iref{SCREENSIZE_MOD} found at compile time.
@}

@fun/ModeToScreenSize/
@def/ModeToScreenSize(<mode>, <width>, <height>)/
@{
  Fills the variables <width> and <height> with the screen size associated with
  screen mode <mode>.  This is a function, not a macro, and is evaluated at
  runtime.
  
  The purpose of this function is not actually clear.  I suppose programmers 
  worried that their code may be executed in a future interpreter that uses 
  different screen sizes could use it like this:
  \begin{lstlisting}
    int width, height
    ModeToScreenSize(gameexe('SCREENSIZE_MOD'), width, height)
  \end{lstlisting}
  \noindent But it's hard to imagine this being a serious concern.  So I'm
  probably missing something.
@}


\subsection{Device contexts}\index[concept]{DC}

Graphics are stored in memory in `device contexts' (DCs).  Most graphics
functions take at least one DC as an argument, which is the bitmap that will be
affected by the operation.  DC 0 is the screen buffer, and changes to it are
reflected on screen; it is always allocated.  There are then 15 offscreen DCs,
which can be used to store, combine, and modify graphics before copying to the
screen.  DC 1 is initially allocated, and may not be smaller than the screen,
but the rest are initially unallocated and may be any size.

DCs do not have to be allocated manually.  When a bitmap is loaded, the target
DC is automatically freed (if existing) and reallocated to the size of the
bitmap. Likewise, if a non-load operation (blitting, drawing, etc.) has an
unallocated DC as its target, a bitmap of the same size as the screen is
allocated automatically in that DC.  The only time a DC needs manual allocation
is if you want to blit or draw into an empty DC that is of a different size from
the screen, in which case the @ref{allocDC} function provides the necessary
functionality.

The term `DC', and many of the function names, are carried over from my AVG32
toolkit, where I was forced to come up with my own names for everything.  With
\reallive, the provision of a debug mode means I know that \vas\ refer to their
offscreen bitmaps as `banks', and that (for example) the function
@ref{grpCMaskCopy} is called \lstinline|BOXCOPYEASY| in their development kit.
I have retained my own names out of habit.  \vas\ names are given in appendix
\ref{appendix:vasnames}.

@fun/allocDC/
@def/allocDC(<dc>, <width>, <height>)/
@{
  Allocates a blank $width \times height$ bitmap in <dc>.  Any DC apart from DC
  0 may be allocated thus, although DC 1 is never given a size smaller than the
  screen resolution.  Any previous contents of <dc> are erased.
@}

@fun/freeDC/
@def/freeDC(<dc>)/
@{
  Frees <dc>, releasing the memory allocated to it.  DC may not be 0; if it is 1,
  DC 1 will be blanked, but not released.

  Freeing is not necessary to reuse the DC, but it's good manners not to hold
  onto megabytes unnecessarily, right?
@}

@fun/GetDCPixel/
@def/GetDCPixel(<x>, <y>, <dc>, <r>, <g>, <b>)/
@{
  Fills the variables $(r, g, b)$ with the colour of the pixel at $(x, y)$ on 
  the given DC.
  
  See \file{SEEN0002} of the \opus{Maiden Halo} demo for an example of why you
  might want to do this.
@}

\subsection{Default bitmaps}\index[concept]{default grp}\index[concept]{default bgr}\ifhevea\else\index[concept]{'???' file}\fi

The <filename> parameters in bitmap loading functions normally take the name of
a \file{g00} file, but there is also a special filename \lstinline|'???'|.  This
refers to one of two ``previous bitmap'' variables, the ``default grp'' (which
is used in \texttt{grp} and \texttt{rec} functions), and the ``default bgr''
(used in \texttt{bgr} functions).  These are set automatically to the files
loaded by certain functions (such as @ref{grpOpenBg}), but may also be queried
and modified with the functions in this section.

@fun/DefaultGrp,SetDefaultGrp/
@def/DefaultGrp(): string/
@{
  Returns the default grp filename.
@}
@def/SetDefaultGrp(<filename>)/
@{
  Modifies the default grp filename.
@}

@fun/DefaultBgr,SetDefaultBgr/
@def/DefaultBgr(): string/
@{
  Returns the default bgr filename.
@}
@def/SetDefaultGrp(<filename>)/
@{
  Modifies the default bgr filename.
@}

\subsection{Masks}\label{sec:externalmasks}\index[concept]{masks}

\index[concept]{naming conventions!masks}
\reallive's bitmaps are 32-bit, i.e.\ 24-bit RGB colour with an 8-bit alpha
channel, which is used by some functions to determine transparency when combining
graphics.  (The naming convention is that functions which take the alpha channel
into account have `Mask' as the first word of their name, but all cases are also
documented explicitly.)

In addition to these, however, it is possible to load masks separately, and some
functions permit the specification of an arbitrary mask to use in addition to
any internal mask.  (Such functions generally have a `WithMask' suffix on their
names, but again, they are documented explicitly.)  This section details the
functions operating on external masks.

@fun/grpLoadMask/
@def/grpLoadMask(<filename>, <mask>)/
@{
  Loads <filename> into the mask buffer <mask>.  <filename> should be a
  greyscale bitmap.
@}

\subsection{Simple effects}

@fun/wipe/
@def/wipe(<dc>, <r>, <g>, <b>)/
@{
  Fills <dc> with the colour indicated by the given RGB triplet.
@}

@fun/recFade,grpFade/
@def/recFade(@[<x>, <y>, <width>, <height>@], <colour>, [time])/
@and/recFade(@[<x>, <y>, <width>, <height>@], <r>, <g>, <b>, [time])/
@{
  Fades the screen to the given colour, which can be either an index to the
  @iref{COLOR_TABLE} variables in \gameexe\ or an RGB triplet. If <time> is
  given, the fade lasts <time> ms, otherwise it is instantaneous.  If an area
  is given, only that area is affected, otherwise the whole screen is faded.
@}

@fun/recFlash,grpFlash/
@def/recFlash(@[<x>, <y>, <width>, <height>@], <r>, <g>, <b>, [time])/
@{
  A simple flash effect: the background is filled with the given colour (an RGB
  triplet) for <time> ms, or for a brief but unspecified time if <time> is not
  given.  If the first four parameters are given, the flash is confined to the
  area of the screen they specify.
@}

\subsection{Loading and displaying bitmaps}

@fun/recOpen,grpOpen,recMaskOpen,grpMaskOpen/
@def/recOpen(<filename>, <effect>, [opacity])/
@and/recOpen(<filename>, <effect>, <x>, <y>, <width>, <height>, <dx>, <dy>, [opacity])/
@and/recOpen(<filename>, <x>, <y>, <width>, <height>, <dx>, <dy>, <steps>, <style>, <direction>, <interpolation>, <density>, <speed>, <a>, <b>, <opacity>, <c>)/
@and/recMaskOpen~{\ldots~}/
@{
  These functions load and display a single bitmap.  <filename> is loaded into
  DC 1, and then copied to DC 0 with the given <effect> (a reference to the
  @iref{SEL} or @iref{SELR} variables in \gameexe) and, if <opacity> is given,
  that degree of opacity.

  If the second or third form of the command is used, only the area ($x$, 
  $y$)-($x + width - 1$, $y + height - 1$) of the bitmap will be copied, and it 
  will be placed at the position ($dx$, $dy$) on the target.

  If the third form is used, rather than reading <effect> from
  @iref{SEL}.<effect>, the transition effect used is defined by the parameters
  <steps>, <style>, <direction>, <interpolation>, <density>, <speed>, <a>, <b>, <opacity>,
  and <c>. These have the same meanings as in the @iref{SEL} definitions.

  \lstinline|grpMaskOpen| and \lstinline|recMaskOpen| are the same as 
  \lstinline|grpOpen| and \lstinline|recOpen|, except that <filename>'s alpha 
  mask is used to determine transparent areas in the loaded bitmap.  
@}

@fun/recOpenBg,grpOpenBg/
@def/recOpenBg(<filename>, <effect>, [opacity])/
@and/recOpenBg(<filename>, <effect>, <x>, <y>, <width>, <height>, <dx>, <dy>, [opacity])/
@and/recOpenBg(<filename>, <x>, <y>, <width>, <height>, <dx>, <dy>, <steps>, <style>, <direction>, <interpolation>, <density>, <speed>, <a>, <b>, <opacity>, <c>)/
@{
  As @ref{recOpen}, but with two additional effects.

  Firstly, the default grp filename will be set to <filename>.
  \index[concept]{layers}

  Secondly, the foreground layer is cleared, and anything in the background
  layer is promoted to the foreground layer: this applies to both SerialPdt
  buffers (section \ref{sec:serialpdt}) and object buffers (section \ref{sec:objects}).
@}

@fun/recLoad,grpLoad,recMaskLoad,grpMaskLoad/
@def/recLoad(<filename>, <dc>, [opacity])/
@and/recLoad(<filename>, <dc>, <x>, <y>, <width>, <height>, <dx>, <dy>, [opacity])/
@and/recMaskLoad~{\ldots~}/
@{
  Loads <filename> into <dc>; note that <filename> may \emph{not} be
  \lstinline|'???'|.  If the second form is used, the given area of the bitmap
  is loaded at the given location.

  \lstinline|recMaskLoad| is the same as \lstinline|recLoad|, except that
  <filename>'s alpha mask is used to determine transparent areas in the loaded
  bitmap.
@}

@fun/grpBuffer,grpMaskBuffer/
@def/grpBuffer(<filename>, <dc>, [opacity])/
@and/grpBuffer(<filename>, <dc>, <x>, <y>, <x>~{$'$~}, <y>~{$'$~}, <dx>, <dy>, [opacity])/
@and/grpMaskBuffer~{\ldots~}/
@{
  As @ref{grpLoad} and @ref{grpMaskLoad}.  Despite my best efforts, I have not
  been able to determine how, if at all, these functions are different from the
  \texttt{\ldots Load} versions, except that there are no \texttt{rec}
  equivalents.
@}

@fun/recDisplay,grpDisplay/
@def/recDisplay(<dc>, <effect>, [opacity])/
@and/recDisplay(<dc>, <effect>, <x>, <y>, <width>, <height>, <dx>, <dy>, [opacity])/
@and/recDisplay(<dc>, <x>, <y>, <width>, <height>, <dx>, <dy>, <steps>, <style>, <direction>, <interpolation>, <density>, <speed>, <a>, <b>, <opacity>, <c>)/
@{
  As @ref{recOpenBg}, but taking the source from the DC <dc> instead of from a file.
  The behaviour is otherwise identical to @ref{recOpenBg}.  In particular, the
  foreground layer is cleared, and the background layer is promoted to take
  its place.

  \emph{\avgns: the <opacity> parameter only exists in the third form.}
@}

@fun/recMulti,grpMulti/
@def/recMulti(<source>, <effect>, [opacity], <compositors>~{\ldots~})/
@and/recMulti(<source>, <effect>, <x>, <y>, <width>, <height>, <dx>, <dy>, [opacity], <compositors>~{\ldots~})/
@and/recMulti(<source>, <x>, <y>, <width>, <height>, <dx>, <dy>, <steps>, <style>, <direction>, <interpolation>, <density>, <speed>, <a>, <b>, <opacity>, <c>, <compositors>~{\ldots~})/
@{
  Loads multiple bitmaps and composes them automatically before displaying them.
  <source> is loaded into DC 1, then the <compositors> are processed in order,
  and finally the final bitmap is copied to DC 0 with the transition <effect>,
  <opacity> if given, etc., as with @ref{recOpenBg}.  Also as with
  @ref{recOpenBg}, the foreground layer is cleared and the background layer is
  promoted to take its place.

  <source> can be either a filename or the index of an existing DC.  In the former
  case, it replaces the default grp filename.

  <compositors> is any number of compositors, which are special functions valid 
  only in @ref{grpMulti} and @ref{recMulti} calls.  The following compositors exist:

  \ifhevea\else\medskip\noindent\fi
  @def/copy(<filename>, [effect], [opacity])/
  @{
    Loads <filename> and adds it to the image, using its alpha mask for
    transparent areas, and using <opacity> if given for the overall transparency
    level.  If <effect> is given, its $x$, $y$, $x'$, $y'$, $dx$, and $dy$
    values will be used to select an area of the bitmap and position it on the
    output.
  @}
  @def/area(<filename>, <x>, <y>, <width>, <height>, <dx>, <dy>, [opacity])/
  @{
    As \texttt{copy()}, but with the position and target position specified in full,
    instead of being read optionally from an effect definition.  This behaves in the
    same way as @ref{grpMaskBuffer}.
  @}

  As an example, the command
  \begin{lstlisting}
    grpMulti('background', 12,
             copy('char1', 0, 0, 319, 479, 0, 0),
             copy('char2', 0, 0, 319, 479, 320, 0))
  \end{lstlisting}
  \noindent is equivalent to
  \begin{lstlisting}
    grpLoad('background', 1)
    grpMaskBuffer('char1', 1, 0, 0, 319, 479, 0, 0)
    grpMaskBuffer('char2', 1, 0, 0, 319, 479, 320, 0)
    grpDisplay(1, 12)
  \end{lstlisting}
@}

\subsection{Blitting}

@fun/recCopy,grpCopy,recMaskCopy,grpMaskCopy/
@def/recCopy(<src>, <dst>, [opacity])/
@and/recCopy(<x>, <y>, <width>, <height>, <src>, <dx>, <dy>, <dst>, [opacity])/
@and/recMaskCopy~{\ldots~}/
@{
  Copies DC <src> to DC <dst>.

  If the second form is used, the area ($x$, $y$)-($x + width$, $y +
  height$)\,\textemdash\,or the absolute equivalent, for \lstinline|grpCopy|
  (see the naming convention explanation under section
  \ref{sec:graphics})\,\textemdash\,is copied to ($dx$, $dy$), otherwise the
  whole bitmap is copied to (0, 0).

  If <opacity> is given, the copied area will be blended with that level of
  transparency.

  \lstinline|recMaskCopy| is the same as \lstinline|recCopy|, except that the
  source bitmap's alpha mask is used to determine transparent areas in the
  copied area.
@}

@fun/recMaskBlend,grpMaskBlend/
@def/recMaskBlend(<src>, <dst>)/
@and/recMaskBlend(<x>, <y>, <width>, <height>, <src>, <dx>, <dy>, <dst>)/
@{
  The purpose of this function is uncertain.  It appears to be exactly the same
  as @ref{recMaskCopy}, except that the optional <opacity> parameter in the
  latter function is not available at all.
@}

@fun/recCopyWithMask,grpCopyWithMask,recMaskCopyWithMask,grpMaskCopyWithMask,recCopyInvMask,grpCopyInvMask,recMaskCopyInvMask,grpMaskCopyInvMask/
@def/recCopyWithMask(<src>, <dst>, <mask>, [opacity])/
@and/recCopyWithMask(<x>, <y>, <width>, <height>, <src>, <dx>, <dy>, <dst>, <mask>, @[<maskXmod>, <maskYmod>, <levels>, <threshold>@], [opacity])/
@and/recCopyInvMask~{\ldots~}/
@and/recMaskCopyWithMask~{\ldots~}/
@and/recMaskCopyInvMask~{\ldots~}/
@{
  As @ref{recCopy} and @ref{recMaskCopy}, but additionally using an external
  mask (see section \ref{sec:externalmasks}), selected with the <mask>
  parameter.

  The additional optional parameters <maskXmod>, <maskYmod>, <levels>, and
  <threshold> affect the external mask.  It is shifted by the first two before
  use: for example, if the mask were $640 \times 480$ pixels, and contained a
  gradient fill in the form of a single cycle of a sine wave, then setting
  <maskXmod> to $-160$ would cause it to be used in the form of a single cycle
  of a cosine wave.  It is reduced to <levels> uniform shades of grey with a
  standard `nearest match' method.  Finally, if <threshold> is non-zero, each
  level $\alpha$ in the mask is transformed such that $$\alpha' =
  \frac{\alpha\cdot threshold}{256}$$
  \ifhevea\else
  \fi
  \noindent A common technique is to use a frame counter to advance <threshold> 
  from $-256$ to $256$ while repeatedly copying the image: this can be used to 
  perform arbitrarily shaped wipes.
  
  \lstinline|recCopyInvMask| is the same as \lstinline|recCopyWithMask|, except
  that the external mask is inverted.  The same is true for
  \lstinline|recMaskCopyInvMask|.
@}

@fun/recSwap,grpSwap/
@def/recSwap(<src>, <dst>)/
@and/recSwap(<x>, <y>, <width>, <height>, <src>, <dx>, <dy>, <dst>)/
@{
  Swaps the given area of DC <src> with an area of the same size on DC <dst>.
@}

@fun/recStretchBlt,grpStretchBlt,recMaskStretchBlt,grpMaskStretchBlt/
@def/recStretchBlt(<x>, <y>, <width>, <height>, <src>, <dx>, <dy>, <dwidth>, <dheight>, <dst>, [opacity])/
@and/recMaskStretchBlt~{\ldots~}/
@{
  As @ref{recCopy} and @ref{recMaskCopy}, except the copied area is deformed so
  that it fits into the given area on DC <dst>.

  As in all cases, the \texttt{grp} variants use absolute coordinates to define
  areas, including the destination area.
@}

@fun/recRotate,recMaskRotate,grpRotate,grpMaskRotate/
@def/recRotate(<x>, <y>, <width>, <height>, <xorg>, <yorg>, <src>, <dx>, <dy>, <dwidth>, <dheight>, <dxorg>, <dyorg>, <angle>, <xscale>, <yscale>, <opacity>)/
@and/recMaskRotate~{\ldots~}/
@{
  \minver{set of functions}{1.1.5}

  Takes a rectangular area of DC <src>, scales it by $(x_{scale}, y_{scale})$ (which
  are percentages), and rotates it $\frac{angle}{10}^o$ clockwise around the
  point $(x_{org}, y_{org})$.  It is then blitted on to DC <dst>, being
  positioned such that $(x_{org}, y_{org})$ is placed at $(dx_{org}, dy_{org})$,
  and cropped such that only areas falling within $(dx, dy)$-$(dx + dwidth - 1,
  dy + dheight - 1)$ are modified.  The <opacity> parameter is used in the same
  way as that of @ref{recCopy}.

  As in all cases, the \texttt{Mask} variant causes the source bitmap's alpha
  mask to be used to determine transparent areas in the blitted bitmap, and the
  \texttt{grp} variants use absolute coordinates to define both the source and
  the destination areas.
@}

@fun/recCMaskCopy,grpCMaskCopy/
@def/recCMaskCopy(<src>, <dst>, <r>, <g>, <b>, [opacity])/
@{
  Copies the contents of DC <src> to DC <dst>.  The colour specified by the RGB
  triplet (<r>, <g>, <b>) is used as a mask to define transparent areas in the
  copied image.  Note that the normal alpha mask appears to be used \emph{in
  addition} to this colour mask.
@}

\subsection{Filters}

@fun/recOutline,grpOutline/
@def/recOutline(@[<x>, <y>, <width>, <height>@], <dc>, <r>, <g>, <b>, [opacity])/
@{
  Draws a box around the given area of <dc> (or the whole bitmap, if no area is
  given), in the colour (<r>, <g>, <b>).
@}

@fun/recFill,grpFill/
@def/recFill(@[<x>, <y>, <width>, <height>@], <dc>, <r>, <g>, <b>, [opacity])/
@{
  As @ref{recOutline}, but the box drawn is filled with the same colour.
@}

@fun/recInvert,grpInvert/
@def/recInvert(@[<x>, <y>, <width>, <height>@], <dc>, [opacity])/
@{
  Inverts the colours in the given area.  If <opacity> is given, it is used to
  combine the inverted version with the original.  Care should be taken, as an
  opacity of 128 effectively fills the area with solid grey.
@}

@fun/recMono,grpMono/
@def/recMono(@[<x>, <y>, <width>, <height>@], <dc>, [opacity])/
@{
  Converts the given area to greyscale.
@}

@fun/recColour,grpColour/
@def/recColour(@[<x>, <y>, <width>, <height>@], <dc>, <r>, <g>, <b>)/
@{
  Applies a solid colour to the given area.  Positive values are applied with a
  `screen' operation, negative values with a `multiply' operation.  The effect
  is to tint the image.
@}

@fun/recLight,grpLight/
@def/recLight(@[<x>, <y>, <width>, <height>@], <dc>, <level>)/
@{
  Applies a solid greyscale of the given <level> to the given area.  If <level>
  is positive, it is applied with a `screen' operation; if <level> is negative,
  it is applied with a `multiply' operation.  The effect is to brighten or
  darken the image.

  This function is, in practice, identical to @ref{recColour} with the colour
  set to (<level>, <level>, <level>).
@}

\subsection{Filtered blits}

@fun/recAnd,grpAnd,recOr,grpOr/
@def/recAnd(<src>, <dst>)/
@and/recAnd(<x>, <y>, <width>, <height>, <src>, <dx>, <dy>, <dst>)/
@and/recOr~{\ldots~}/
@{
  Copies from DC <src> to DC <dst>, applying the result with an `and'
  or 'or' operation.
@}

@fun/recAdd,grpAdd,recMaskAdd,grpMaskAdd,recSub,grpSub,recMaskSub,grpMaskSub/
@def/recAdd(<src>, <dst>, [opacity])/
@and/recAdd(<x>, <y>, <width>, <height>, <src>, <dx>, <dy>, <dst>, [opacity])/
@and/recSub~{\ldots~}/
@and/recMaskAdd~{\ldots~}/
@and/recMaskSub~{\ldots~}/
@{
  As @ref{recCopy} and @ref{recMaskCopy}, except that the results are
  combined differently: the \texttt{Add} versions are applied with an `add'
  operation, and the \texttt{Sub} versions first invert the copied bitmap
  and then apply it with a `subtract' operation.
@}

@fun/recAddWithMask,grpAddWithMask,recMaskAddWithMask,grpMaskAddWithMask,recSubWithMask,grpSubWithMask,recMaskSubWithMask,grpMaskSubWithMask,recAddInvMask,grpAddInvMask,recMaskAddInvMask,grpMaskAddInvMask,recSubInvMask,grpSubInvMask,recMaskSubInvMask,grpMaskSubInvMask/
@def/recAddWithMask(<src>, <dst>, <mask>, [opacity])/
@and/recAddWithMask(<x>, <y>, <width>, <height>, <src>, <dx>, <dy>, <dst>, <mask>, @[<maskXmod>, <maskYmod>, <levels>, <threshold>@], [opacity])/
@and/recSubWithMask~{\ldots~}/
@and/recMaskAddWithMask~{\ldots~}/
@and/recMaskSubWithMask~{\ldots~}/
@and/recAddInvMask~{\ldots~}/
@and/recSubInvMask~{\ldots~}/
@and/recMaskAddInvMask~{\ldots~}/
@and/recMaskSubInvMask~{\ldots~}/
@{
  As @ref{recCopyWithMask}, etc., but using the same combining modes as
  @ref{recAdd}, etc.
@}

@fun/recRotateAdd,grpRotateAdd,recMaskRotateAdd,grpMaskRotateAdd,recRotateSub,grpRotateSub,recMaskRotateSub,grpMaskRotateSub/
@def/recRotateAdd(<x>, <y>, <width>, <height>, <xorg>, <yorg>, <src>, <dx>, <dy>, <dwidth>, <dheight>, <dxorg>, <dyorg>, <angle>, <xscale>, <yscale>, <opacity>)/
@and/recRotateSub~{\ldots~}/
@and/recMaskRotateAdd~{\ldots~}/
@and/recMaskRotateSub~{\ldots~}/
@{
  As @ref{recRotate}, etc., but using the same combining modes as @ref{recAdd},
  etc.
@}

\subsection{Zooming and scrolling}\index[concept]{animation!scrolling}

@fun/recZoom,grpZoom/
@def/recZoom(<x1>, <y1>, <width1>, <height1>, <x2>, <y2>, <width2>, <height2>, <src>, <dx>, <dy>, <dwidth>, <dheight>, <time>)/
@{
  Zooms from the first area to the second area of DC <src>, copying each frame
  into the destination area on DC 0, deforming it to fit if necessary; the whole
  operation is adjusted to last <time> ms.  Control does not pass to the next
  function until the operation has completed.

  The precise operation can be illustrated by duplicating its functionality with
  other functions:
  \begin{lstlisting}
    recZoom(0, 0, 640, 480, 160, 120, 320, 240, 1, 0, 0, 640, 480, 2000)
  \end{lstlisting}
  \noindent zooms in to a 2$\times$ scale on the centre of DC 1, over two seconds,
  and is equivalent to
  \begin{lstlisting}
    int x, y, w, h
    InitFrames ({10, 0, 160, 2000}, {12, 640, 320, 2000},
                {11, 0, 120, 2000}, {13, 480, 240, 2000})
    while ReadFrames ({10, x}, {11, y}, {12, w}, {13, h})
      recStretchBlt (x, y, w, h, 1, 0, 0, 640, 480, 0)
  \end{lstlisting}
@}

@fun/recPan,grpPan/
@def/recPan(<x1>, <y1>, <x2>, <y2>, <src>, <dx>, <dy>, <width>, <height>, <time>)/
@{
  Similar to @ref{recZoom}, except that all areas copied are the same size,
  which is defined by the size of the destination window.  That is to say,
  \begin{lstlisting}
    recPan(x1, y1, x2, y2, src,
           dx, dy, width, height, time)
  \end{lstlisting}
  \noindent is equivalent to
  \begin{lstlisting}
    recZoom(x1, y1, width, height, x2, y2, width, height, src,
            dx, dy, width, height, time)
  \end{lstlisting}
@}

@fun/recShift,grpShift,recSlide,grpSlide/
@def/recShift(<x>, <y>, <dim_x>, <dim_y>, <src>, <dx>, <dy>, <width>, <height>, <direction>, <time>)/
@and/recSlide~{\ldots~}/
@{
  Scrolls an area of DC <src> in.  The scrolling takes place within the window
  defined by <dx>, <dy>, <width>, and <height> of DC 0, and lasts <time> ms.
  The direction of the scrolling is determined by <direction>, which has the
  following values:

  \begin{tabular}{r@@{\hs}l}
  \textbf{0} & down  \\
  \textbf{1} & up    \\
  \textbf{2} & right \\
  \textbf{3} & left  \\
  \end{tabular}

  \noindent The exact area that is scrolled in depends on the direction.  If the
  scrolling is horizontal, then the block that is scrolled in will be $dim_x
  \times height$ pixels; if the scrolling is vertical, it will be $width \times
  dim_y$ pixels.  Either way, it is taken from ($x$, $y$), and scrolled in until
  it is just fully visible.

  The difference between \lstinline|recShift| and \lstinline|recSlide| is that
  the former scrolls the previous contents of the window out as the new contents
  are scrolled in, while the latter scrolls the new contents in over the old
  contents.
@}

\subsection{Displaying text and numbers}

%...%
@fun/grpTextout/
@def/grpTextout(<text>, <x>, <y>, <dst>, <size>, <r>, <g>, <b>)/
@{
  Prints the text <text> to DC <dst>, with the top left of the first character
  being at ($x$, $y$).  The font used is the system font used for all normal
  text display. <size> determines the size of characters, and the triplet ($r$,
  $g$, $b$) determines the text colour.
@}

@fun/grpNumber,grpMaskNumber/
@def/grpNumber(<n>, <digits>, <pad>, <sign>, <x>, <y>, <width>, <height>, <mod_x>, <mod_y>, <src>, <dx>, <dy>, <mod_dx>, <mod_dy>, <dst>, [opacity])/
@and/grpMaskNumber~{\ldots~}/
@{
  Displays the number <n>, using bitmapped digits.

  If <pad> is 1, it is padded with zeroes to <digits> digits first; if <pad> is
  0, <digits> is ignored.

  If <sign> is 1, a plus is prepended to positive numbers; if it is 0, no plus
  is prepended, but a minus is still added to negative numbers.  (To add a space
  before positive numbers, so that the size of the output will be constant,
  set <sign> to 1 and leave the plus bitmap blank.)

  The digits are copied from DC <src>.  They should be arranged such that each
  digit is an area of $width \times height$ pixels, with the bitmap for 0
  located at ($x$, $y$), and the offset from each digit to the next being
  ($mod_x$, $mod_y$): that is, such that a digit $d$ is located at ($x + d \cdot
  mod_x$, $y + d \cdot mod_y$).  The bitmap for the minus sign is treated as
  digit 10, and the bitmap for the plus sign is digit 11.

  Digits are printed to DC <dst>, starting at ($dx$, $dy$), and incrementing the
  location by ($mod_{dx}$, $mod_{dy}$) after each digit.

  If <opacity> is given, the copy operation will use that value for the overall
  transparency of each digit.  If the command used is \lstinline|grpMaskNumber|,
  the source bitmap's alpha mask will be used to determine transparent areas in
  the digits.
@}

\subsection{Haikei and bgr functions}

%@module 040 = Bgr // Under investigation, see reallive.kfn
@fun/bgrLoadHaikei,bgrMulti/
There are a number of functions which operate on `haikei' (backgrounds);
\opus{Alma} and \opus{Realize} use them.  I have not been able to work out what
many of them do, so for now they are undocumented.  Of them, only the functions
\lstinline|bgrLoadHaikei| (which appears to be similar to @ref{grpOpen}, but
without modifying any DCs) and \lstinline|bgrMulti| (which appears to be very
similar to @ref{grpMulti}) are given names at present.

\subsection{The graphics stack}

\reallive\ stores details of the most recent few graphical operations on a
stack, possibly to enable it to reconstruct the scene when loading a saved game.
It can be viewed by selecting `Graphics stack' from the `Window' menu in debug
mode.  These functions permit you to modify its contents directly.

@fun/stackSize/
@def/stackSize(): store/
@{
  Returns the current length of the stack.
@}

@fun/stackClear/
@def/stackClear()/
@{
  Empties the stack.
@}

@fun/stackPop/
@def/stackPop(<count>)/
@{
  Removes up to <count> entries from the stack.
@}

@fun/stackTrunc/
@def/stackTrunc(<length>)/
@{
  Truncates the stack by discarding all but the oldest <length> entries.  That
  is, \lstinline|stackTrunc(len)| is equivalent to
  \lstinline|stackPop(stackSize - len)|.
@}

@fun/stackNop/
@def/stackNop(<count>)/
@{
  Adds <count> NOP commands to the stack.  Why you would ever want to do this is
  unclear.
@}

\subsection{Controlling screen updates}

@fun/refresh/
@def/refresh()/
@{
  The @ref{refresh} function yields control from the bytecode interpreter to
  the \reallive\ system proper, permitting screen updates to take place.

  This function must always be called to update the screen when the drawing mode
  is set to manual with @ref{DrawManual}.  It is also necessary to call this
  regardless of drawing mode in tight loops, if the screen is changed other
  than by blitting to DC 0.  See \ref{sec:frames} for an example of this latter
  usage.
@}

@fun/DrawAuto/
@def/DrawAuto()/
@{
  Enables automatic refreshes: the screen is redrawn after every load or
  blit to DC 0.
@}

@fun/DrawSemiAuto/
@def/DrawSemiAuto()/
@{
  Enables semi-automatic refreshes.  The difference from automatic refreshes
  is not clear.
@}

@fun/DrawManual/
@def/DrawManual()/
@{
  Disables automatic refreshes.  The screen is only updated by explicit
  @ref{refresh} calls.  This can be used to get smooth animation even when
  rendering directly to DC 0.
@}

%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Animations}

\subsection{Basic effects}\index[concept]{animation!shaking}

@fun/shake/
@def/shake(<spec>)/
@{
  Shakes the screen, using the movements defined in \gameexe\ with the
  variable @iref{SHAKE}.<spec>.  This function appears to have been included
  for compatibility with AVG32; equivalents with more functionality are
  @ref{ShakeSpec} and @ref{ShakeLayersSpec}.
@}

\subsubsection{Simple shaking}

@fun/ShakeScreen,ShakeScreenEx/
@def/ShakeScreen(<direction>, <amount>, <speed>, <rep>, <faderep>)/
@and/ShakeScreenEx~{\ldots~}/
@{
  Shakes the screen with a predefined effect.  The <amount> and <speed> 
  paramters define how far and fast to move; this movement will be repeated 
  <rep> times to its full extent, and then <faderep> times more with the 
  exaggeration of the effect being reduced each time.  (If both <rep> and 
  <faderep> are 0, the bouncing will continue without end until another shake 
  effect is applied or @ref{ShakeStop} is called.)
  
  The <direction> parameter determines which effect to use, and takes one of
  the following values:
  
  \begin{tabular}{r@@{\hs}l}
  \texttt{DOWNUP}    & Shake vertically in both directions \\
  \texttt{RIGHTLEFT} & Shake horizontally in both directions \\
  \texttt{UP}        & Bounce up \\
  \texttt{DOWN}      & Bounce down \\
  \texttt{LEFT}      & Bounce left \\
  \texttt{RIGHT}     & Bounce right \\
  \texttt{ZOOM}      & Shake `towards' player by zooming
  \end{tabular}
  
  @ref{ShakeScreen} returns immediately and shakes in the background; 
  @ref{ShakeScreenEx} does not return until the effect is complete.  
@}

@fun/ShakeScreen2D,ShakeScreen2DEx/
@def/ShakeScreen2D(<hamount>, <hspeed>, <vamount>, <vspeed>, <rep>, <faderep>)/
@and/ShakeScreen2DEx~{\ldots~}/
@{
  Similar to @ref{ShakeScreen} and @ref{ShakeScreenEx}, but applying the
  \texttt{RIGHTLEFT} and \texttt{DOWNUP} effects at the same time; the former
  is controlled by the <hamount> and <hspeed> paramters, the latter by <vamount>
  and <vspeed>.
@}

@fun/ShakeSpec,ShakeSpecEx/
@def/ShakeSpec(<spec>, <rep>, <faderep>)/
@and/ShakeSpecEx~{\ldots~}/
@{
  Shakes the screen, using the movements defined in \gameexe\ with the
  variable @iref{SHAKE}.<spec>.  The <rep> and <faderep> parameters have
  the same meaning as for @ref{ShakeScreen}.
@}

@fun/ShakeStop/
@def/ShakeStop([time])/
@{
  Cancels the effect of any active @ref{ShakeScreen}, @ref{ShakeScreen2D}, or 
  @ref{ShakeSpec} call, either by decreasing the extent of the shaking to 0 over 
  <time> ms, or immediately if <time> is not given.
@}

\subsubsection{Layer-based shaking}

@fun/ShakeLayers,ShakeLayersEx/
@def/ShakeLayers(<direction>, <amount>, <speed>, <rep>, <faderep>, <win>, <txt>, <bg>, <objs>, [flag])/
@and/ShakeLayersEx~{\ldots~}/
@{
  As @ref{ShakeScreen}, but only certain elements of the screen are affected,
  depending on which parameters are set.  The following elements can be
  affected by passing a non-zero value in the corresponding parameter:

  \begin{tabular}{r@@{\hs}l}
  <win>  & Text window backgrounds \\
  <txt>  & The text in the windows \\
  <bg>   & The background graphics \\
  <objs> & Objects \\
  \end{tabular}
  
  The <flag> parameter is not understood; it is optional, and appears to have 
  the same effect as <objs>.
  
  The <direction>, <amount>, <speed>, <rep>, and <faderep> parameters have the 
  same meanings as for @ref{ShakeScreen}, with one exception: the <direction> 
  value \texttt{ZOOM} is not supported by @ref{ShakeLayers}.
  
  @ref{ShakeLayers} returns immediately and shakes in the background; 
  @ref{ShakeLayersEx} does not return until the effect is complete.  
@}

@fun/ShakeLayers2D,ShakeLayers2DEx/
@def/ShakeLayers2D(<hamount>, <hspeed>, <vamount>, <vspeed>, <rep>, <faderep>, <win>, <txt>, <bg>, <objs>, [flag])/
@and/ShakeLayers2DEx~{\ldots~}/
@{
  Similar to @ref{ShakeLayers} and @ref{ShakeLayersEx}, but applying the
  \texttt{RIGHTLEFT} and \texttt{DOWNUP} effects at the same time; the former
  is controlled by the <hamount> and <hspeed> paramters, the latter by <vamount>
  and <vspeed>.
@}

@fun/ShakeLayersSpec,ShakeLayersSpecEx/
@def/ShakeLayersSpec(<spec>, <rep>, <faderep>, <win>, <txt>, <bg>, <objs>, [flag])/
@and/ShakeLayersSpecEx~{\ldots~}/
@{
  Shakes selected elements of the screen, using the movements defined in 
  \gameexe\ with the variable @iref{SHAKE}.<spec>.  The remaining parameters 
  have the same meaning as for @ref{ShakeLayers}.
@}

@fun/ShakeLayersStop/
@def/ShakeLayersStop([time], [flag])/
@{
  Causes any active layer shake effect to stop. If <time> is specified, the shake
  is faded out over <time> ms; otherwise it stops immediately.  The meaning of
  <flag> is unclear.
@}

\subsection{`SerialPdt' animation}\label{sec:serialpdt}\index[concept]{animation!with ordinary bitmaps}

`SerialPdt' is the \vas\ name for animation produced using ordinary bitmaps,
as opposed to dedicated animation or video files.

\index[concept]{layers}
Up to 512 `SerialPdt' commands can be defined at a time, but you will have to
allocate buffers for them (the <buf> parameters) individually.  There are 256
buffers, each of which has a `foreground' and a `background' slot.  Creating an
animation in the foreground causes it to display immediately, while background
animations are displayed only when promoted to the foreground with a function
that performs such a layer promotion, such as @ref{grpOpenBg}.

\index[concept]{naming conventions!animation}
A naming convention is used to streamline the documentation of this section.
Each function documented with a \texttt{snm} prefix assigns the animation it
defines to the foreground slot of buffer <buf>; for each such function there
also exists a version with the prefix \texttt{snmBg}, which is identical except
that it assigns the animation it defines to the background slot.

\subsubsection{Frame-based animation}

@fun/snmPlay,snmPlayEx,snmLoop,snmBgPlay,snmBgPlayEx,snmBgLoop/
@def/snmPlay(<buf>, <x>, <y>, {<filename>, <time>}~{\ldots~})/
@{
  Displays each named file in turn, placing each at ($x$, $y$) on DC 0 and
  showing it for <time> ms.

  The animation plays in the background, and control is passed to the next
  command immediately.
@}

@def/snmPlayEx(<buf>, <x>, <y>, {<filename>, <time>}~{\ldots~})/
@{
  As @ref{snmPlay}, but control does not pass to the next command until the
  animation has finished.
@}

@def/snmLoop(<buf>, <x>, <y>, {<filename>, <time>}~{\ldots~})/
@{
  As @ref{snmPlay}, but the animation is played repeatedly, looping each time
  it finishes, until it is stopped or another command is given the same value of
  <buf>.
@}

@fun/snmPlayCmp,snmPlayCmpEx,snmLoopCmp,snmBgPlayCmp,snmBgPlayCmpEx,snmBgLoopCmp/
@def/snmPlayCmp(<buf>, <x>, <y>, {<filename>, <time>}~{\ldots~})/
@and/snmPlayCmpEx~{\ldots~}/
@and/snmLoopCmp~{\ldots~}/
@{
  These functions appear to do the same thing as @ref{snmPlay} etc.; there is
  no obvious difference in their behaviour.

  However, the debugging information indicates that a value `Mod' for each
  <filename> is `Compress' for the \lstinline|Cmp| functions, whereas it is
  `Thaw' (i.e.\ decompress) for the versions without \lstinline|Cmp|. The
  meaning of this is unclear.  Could it have something to do with whether
  graphics are decompressed in advance or as needed, or something along those
  lines?
@}

@fun/snmPlayNc,snmPlayNcEx,snmPlayNcLoop,snmBgPlayNc,snmBgPlayNcEx,snmBgPlayNcLoop/
@def/snmPlayNc(<buf>, <x>, <y>, {<filename>, <time>}~{\ldots~})/
@and/snmPlayNcEx~{\ldots~}/
@and/snmLoopNc~{\ldots~}/
@{
  These functions appear to do the same thing as @ref{snmPlay} etc.; there is
  no obvious difference in their behaviour.

  However, no debugging information is shown for individual <filename>s with
  these versions.  The reason why is unclear - could it be that files are not
  cached in advance at all with these versions, or something along those lines?
@}

@fun/snmStretch,snmStretchEx,snmStretchLoop,snmStretchCmp,snmStretchCmpEx,snmStretchLoopCmp,snmStretchNc,snmStretchNcEx,snmStretchLoopNc,snmBgStretch,snmBgStretchEx,snmBgStretchLoop,snmBgStretchCmp,snmBgStretchCmpEx,snmBgStretchLoopCmp,snmBgStretchNc,snmBgStretchNcEx,snmBgStretchLoopNc/
@def/snmStretch(<buf>, <x1>, <y1>, <x2>, <y2>, {<filename>, <time>}~{\ldots~})/
@and/snmStretchEx~{\ldots~}/
@and/snmStretchLoop~{\ldots~}/
@and/snmStretchCmp~{\ldots~}/
@and/snmStretchCmpEx~{\ldots~}/
@and/snmStretchLoopCmp~{\ldots~}/
@and/snmStretchNc~{\ldots~}/
@and/snmStretchNcEx~{\ldots~}/
@and/snmStretchLoopNc~{\ldots~}/
@{
  As @ref{snmPlay} etc., except the animation is stretched and/or distorted
  such that each frame fills the window ($x_1$, $y_1$) to ($x_2$, $y_2$).
@}

\subsubsection{Scrolling animation}\index[concept]{animation!scrolling}

@fun/snmScroll,snmBgScroll/
@def/snmScroll(<buf>, <x1>, <y1>, <x2>, <y2>, <filename>, <right>, <down>, <left>, <up>, <time>)/
@{
  Scrolls the bitmap <filename> across the area of DC 0 with corners ($x_1$,
  $y_1$) and ($x_2$, $y_2$).  The bitmap is placed at ($x_1$, $y_1$), being tiled
  to fill the window if necessary, and then scrolled according to the parameters
  <right>, <down>, <left>, and <up> over <time> ms.  It is not deleted between
  steps, so it will leave a trail if it has a mask.

  The distance scrolled is $right - left$ horizontally and $down - up$
  vertically, constrained such that it is never greater than the relevant
  dimension of the scrolled bitmap.
@}

@fun/snmScrollEx,snmBgScrollEx/
@def/snmScrollEx(<buf>, <x1>, <y1>, <x2>, <y2>, <filename>, <right>, <down>, <left>, <up>, <time>)/
@{
  As @ref{snmScroll}, but control does not pass to the next command until the
  animation has finished.
@}

@fun/snmScrollLoop,snmBgScrollLoop/
@def/snmScrollLoop(<buf>, <x1>, <y1>, <x2>, <y2>, <filename>, <right>, <down>, <left>, <up>, <time>)/
@{
  As @ref{snmScroll}, but the animation is played repeatedly, looping each time
  it finishes, until it is stopped or another command is given the same value of
  <buf>.

  By specifying the scrolled image's dimensions for scroll distance, it is
  possible to use this command to mimic the infinitely-scrolling backgrounds
  seen in the \opus{Tokimeki Memorial} series.  But please don't.
@}

\subsection{Videos}

\reallive\ can play back video files in several formats, including AVI and MPG.

@fun/movPlay,movPlayEx,movPlayExC,movLoop/
@def/movPlay(<file>, <x1>, <y1>, <x2>, <y2>)/
@{
  Plays a video stream from <file>.  It is played within the area ($x_1$, $y_1$) 
  to ($x_2$, $y_2$), being scaled to fit if necessary.

  The video plays in the background, and control is passed to the next command 
  immediately.  
@}

@def/movPlayEx(<file>, <x1>, <y1>, <x2>, <y2>)/
@and/movPlayExC~{\ldots~}: store/
@{
  As @ref{movPlay}, but control does not pass to the next command until the 
  video has finished.  Videos played by @ref{movPlayEx} cannot be cancelled; 
  videos played by @ref{movPlayExC} can be cancelled by clicking the mouse,
  and the return value of the function is non-zero if this was the case and
  zero if the video finished normally.
@}

@def/movLoop(<file>, <x1>, <y1>, <x2>, <y2>)/
@{
  As @ref{movPlay}, but the video is played repeatedly, looping each time
  it finishes, until it is stopped or another video is played.
@}

@fun/movStop/
@def/movStop()/
@{
  Stops any background video playback.
@}

@fun/movWait/
@def/movWait()/
@{
  If a video effect is currently playing, waits for the current playthrough to 
  end and then stops it.  The function does not return until the video has 
  stopped.  In other words, this function converts a previous @ref{movPlay} or 
  @ref{movLoop} call into a @ref{movPlayEx} call.
@}

@fun/movPlaying/
@def/movPlaying(): store/
@{
  Returns 1 if a video is currently playing, or 0 otherwise.
@}



%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Objects}\label{sec:objects}

Objects are retained graphical elements, modifiable separately from the main DCs
and automatically composited with the screen.

\index[concept]{layers}
Up to 512 objects can be defined at a time, but you will have to allocate
buffers for them (the <buf> parameters) individually.  There are 256 buffers,
each of which has a `foreground' and a `background' slot; creating an object in
the foreground causes it to display immediately, while background objects are
displayed only when promoted to the foreground manually or with a function that
performs such a layer promotion, such as @ref{grpOpenBg}.

Rendering of visible objects takes place in numerical order, so where two
objects overlap, that with the lower buffer number appears behind that with the
higher.

\index[concept]{naming conventions!objects}
A naming convention is used to streamline the documentation of this section.
Each function documented with a \texttt{obj} prefix operates on the foreground
slot of object buffer <buf>; for each such function there also exists a version
with the prefix \texttt{objBg}, which is identical except that it operates on
the object in the background slot.

The functions in the sections `Object position' and `Object attributes' (section 
\ref{sec:objdisplay}) and onwards) extend this convention: these functions also 
have variants with prefixes \texttt{objRange} and \texttt{objBgRange}, which 
take two parameters <min> and <max> in place of the single <buf> parameter. 
Such functions apply the transformation described to all objects in the range 
<min> to <max> inclusive, instead of to the single object <buf>.

\subsection{Initialising objects}

Most of the functions in this section share certain common optional parameters:
\begin{itemize}
\item
  If <visible> is 1, the object will be displayed straight away; if it is 0 or
  not given, the object will initially be hidden.
\item
  If <x> and <y> are given, the object will be placed at the given location,
  otherwise at (0, 0).
\item
  <scrollX> and <scrollY> affect the behaviour of the object when scrolling
  functions such as @ref{ShakeLayers} are used.  It appears that objects are
  treated as part of the background when scrolling in the X or Y axis if the
  respective values are non-zero, and as part of the object plane if the values
  are zero or not given.
\end{itemize}

@fun/objOfArea,objOfRect,objBgOfArea,objBgOfRect/
@def/objOfArea(<buf>, @[<x>, <y>, <x>~{$'$~}, <y>~{$'$~}@], [visible])/
@and/objOfRect(<buf>, @[@[<x>, <y>@], @[<width>, <height>@]@], [visible])/
@{
  Creates an empty rectangular `filter'-type object, filling the entire screen,
  or the given area (defined with absolute coordinates in @ref{objOfArea}, and
  with position and size in @ref{objOfRect}) if one is given.

  Note an idiosyncracy in @ref{objOfRect}: the <x> and <y> parameters are `more
  optional' than <width> and <height>.  The relationship between the meaning of
  the parameters and their number is as follows:
  \begin{lstlisting}
    {- 1 -} objOfRect (buf)
    {- 3 -} objOfRect (buf, width, height)
    {- 4 -} objOfRect (buf, width, height, visible)
    {- 5 -} objOfRect (buf, x, y, width, height)
    {- 6 -} objOfRect (buf, x, y, width, height, visible)
  \end{lstlisting}
  \noindent In the cases where <x> and <y> are not supplied, the object is
  centered.

  The object is initally transparent; applying an effect with a function such
  as @ref{objLight} causes it to act as a filter modifying the graphics beneath
  it.
@}

@fun/objOfFile,objBgOfFile/
@def/objOfFile(<buf>, <filename>, [visible], @[<x>, <y>@], [pattern], @[<scrollX>, <scrollY>@])/
@{
  Sets object <buf> to hold the bitmap <filename>.

  If <pattern> is given, it will use the given bitmap from the source file; this
  enables you to use a single \file{g00} file containing multiple bitmaps for an
  object, such as a button, that can have multiple states.  The pattern can be
  changed after object creation with the @ref{objPattNo} function.
@}

@fun/objOfFileGan,objBgOfFileGan,objOfFileAnm,objBgOfFileAnm/
@def/objOfFileGan(<buf>, <filename>, <ganname>, [visible], @[<x>, <y>@], [pattern], @[<scrollX>, <scrollY>@])/
@{
  Similar to @ref{objOfFile}, but takes an additional parameter <ganname> which
  identifies a \file{gan} animation file to associate with the object.  Animations
  from this file can then be applied to it (see section \ref{sec:gananim} for
  details).

  This function exists only in \reallive.  The \avgns\ equivalent is called
  \lstinline|objOfFileAnm|, and does not have the <pattern>, <scrollX>, or
  <scrollY> parameters; the animation files it uses are in a different
  format and have the extension \file{anm}.
@}

\subsubsection{Text objects}\index[concept]{control codes!text objects}

It is possible to create objects automatically from arbitrary strings.
The said string will be displayed in the same font as ordinary display
text.

Strings used in text objects are parsed specially according to a unique syntax 
not used anywhere else in \reallive.  Certain sequences of \lstinline|#| 
followed by certain alphabetical characters are interpreted as control codes.
The mapping between \reallive\ text object control codes and Kepago control
codes is as follows:

\begin{tabular}{l@@{\hs}p{0.8\textwidth}}
    \texttt{\#\#} & Separator
  \\ \texttt{\#c} & \ccref{c}  
  \\ \texttt{\#d} & \ccref{n}
  \\ \texttt{\#s} & \ccref{size}
  \\ \texttt{\#x} & \ccref{posx}
  \\ \texttt{\#y} & \ccref{posy}
\end{tabular}

\noindent The codes \texttt{\#c}, \texttt{\#s}, \texttt{\#x}, and \texttt{\#y} can 
take parameters.  When one of these codes is encountered, the following text is 
scanned to see whether it represents an integer (i.e.\ matches the POSIX 
extended regular expression \lstinline|"-?[0-9]+"|; if it does, then that 
integer is passed as a parameter to the code.  To prevent following characters 
being interpreted as parameters, the separator \texttt{\#\#} may be used, such that
the following are equivalent:

\begin{lstlisting}
  objOfText(0, '#s10##123#s##456')
  objOfText(0, '\size{10}123\size{}456')
\end{lstlisting}

As the above implies, \compiler\ automatically converts Kepago control codes 
encountered within inline strings in calls to @ref{objOfText} into this syntax, 
but it cannot guess whether other string variables will be used in such calls, 
so you will have to use the \lstinline|#|-syntax when constructing strings 
separately.  \disassembler\ never attempts to convert the \lstinline|#|-syntax
into standard Kepago control codes.  So while the two lines of the previous 
example are equivalent, the following are \emph{not} equivalent:

\begin{lstlisting}
  str s = 'foo\nbar' // compilation error - \n not recognised in this context
  str s = 'foo#dbar' // compiles happily
  objOfText(0, s)    // equivalent to objOfText(0, 'foo\nbar')
\end{lstlisting}

There is no obvious way to display these special sequences literally.  Note also 
that these codes are not case-sensitive, which doubles the set of clashes 
without increasing the expressivity of the feature.  If all this appears 
confusing, blame the authors of \reallive, who appear to have delighted in 
introducing a different ad-hoc string syntax for every construct.

@fun/objOfText,objBgOfText/
@def/objOfText(<buf>, <text>, [visible], @[<x>, <y>@], @[<scrollX>, <scrollY>@])/
@{
  Creates an object consisting of the text <text>.  The size, colour, and so 
  forth are normally set with a separate call to @ref{objTextOpts}.  See above
  for special considerations involved in displaying text in this way.
@}

@fun/objSetText,objBgSetText,objRangeSetText,objBgRangeSetText/
@def/objSetText(<buf>, [text])/
@and/objRangeSetText(<min>, <max>, [text])/
@{
  Alters the text associated with the given text object(s) to <text>, or to the 
  empty string if <text> is not given; if any objects are not already text 
  objects, they are not modified.
@}

@fun/objTextOpts,objBgTextOpts,objRangeTextOpts,objBgRangeTextOpts/
@def/objTextOpts(<buf>, <size>, <xspace>, <yspace>, <vertical>, <colour>, <shadow>)/
@and/objRangeTextOpts(<min>, <max>, ~{\ldots~})/
@{
  Modifies a range of options for the given object(s); if any objects are not
  text objects, they are not modified.

  \begin{tabular}{l@@{\hs}p{0.8\textwidth}}
     <size>     & Font size (pixels)
  \\ <xspace>   & Extra character spacing (line spacing when vertical)
  \\ <yspace>   & Extra line spacing (character spacing when vertical)
  \\ <vertical> & If 1, text is vertical (see note below); if 0, horizontal.
  \\ <colour>   & Foreground colour, as an index to @iref{COLOR_TABLE}.
  \\ <shadow>   & Shadow colour, as an index to @iref{COLOR_TABLE}, or $-1$ to
                  disable the shadow.
  \end{tabular}

  Note that `vertical' text is not in fact laid out properly in objects; it is
  simply produced by adding a line break after every full-width character, or
  every two half-width characters.  Japanese punctuation marks are \emph{not}
  rotated appropriately.
@}

\subsubsection{Number objects}

@fun/objOfDigits,objBgOfDigits/
@def/objOfDigits(<buf>, <filename>, [visible], @[<x>, <y>@], @[<scrollX>, <scrollY>@])/
@{
  An object-based equivalent to the @ref{grpNumber} functions: creates a number 
  object from the given file.  <filename> must be a format 2 G00 bitmap, 
  containing 13 patterns: in order, these should be the digits 0 to 9, 
  then the symbols $+$, $-$, and $\pm$.  The object displays a number using
  these patterns for its digits.
  
  The object is initially empty; its value must be set separately with a call
  to @ref{objSetDigits}.
@}

@fun/objSetDigits,objBgSetDigits,objRangeSetDigits,objBgRangeSetDigits/
@def/objSetDigits(<buf>, <value>)/
@and/objRangeSetDigits(<first>, <last>, <value>)/
@{
  Sets the number to be displayed in the given object(s) to <value>.
@}

@fun/objNumOpts,objBgNumOpts,objRangeNumOpts,objBgRangeNumOpts/
@def/objNumOpts(<buf>, <digits>, <zero>, <sign>, <pack>, <space>)/
@and/objRangeNumOpts(<first>, <last>, ~{\ldots~})/
@{
  Sets formatting options for the given object(s).
  
  \begin{tabular}{l@@{\hs}p{0.8\textwidth}}
     <digits> & Minimum number of digits; the number is padded to this length.
  \\ <zero>   & If 0, padding is with spaces; if 1, with zeroes.     
  \\ <sign>   & If 0, only negative numbers are signed, and the sign is counted
                as a digit when present.  If 1, all numbers are signed, and the
                sign is not counted as a digit for padding purposes.  The $\pm$
                pattern is used to sign 0 in this case.
  \\ <pack>   & If 1, and the number is less than <digits> digits long, the sign 
                is placed next to the first digit (after the padding); if 0, the 
                sign is placed in the first column and the padding follows it. 
                This has no effect if <zero> is 1.
  \\ <space>  & If non-zero, the width in pixels of each digit.  If zero, the
                width is determined by the width of the digit's bitmap instead.
  \end{tabular}     
@}

\subsubsection{Environment objects}\index[concept]{animation!weather effects}

@fun/objDriftOfFile,objBgDriftOfFile/
@def/objDriftOfFile(<buf>, <filename>, [visible], @[<x>, <y>@], @[<scrollX>, <scrollY>@])/
@{
  Creates an environment object from the given file.  Environment objects
  create multiple sprites which drift around or fall at random; they are
  typically used to simulate weather effects and the like.
@}

@fun/objDriftOpts,objBgDriftOpts,objRangeDriftOpts,objBgRangeDriftOpts,objFadeOpts,objBgFadeOpts,objRangeFadeOpts,objBgRangeFadeOpts/
@def/objDriftOpts(<buf>, <count>, <?>, <pattern>, <?>, <?>, <yspeed>, <?>, <?>, <drift?>, <spread?>, <driftspeed>, <x>, <y>, <x>~{$'$~}, <y>~{$'$~})/
@and/objRangeDriftOpts(<min>, <max>, ~{\ldots~})/
@and/objFadeOpts(<buf>, <min_alpha>, <max_alpha>, <?>, <?>, <?>)/
@and/objRangeFadeOpts(<min>, <max>, ~{\ldots~})/
@{
  Functions modifying certain aspects of environment objects.  The precise
  meaning of most of the options that can be modified is currently unknown,
  so for now these functions are basically undocumented.
@}

\subsection{Object management}

@fun/objDelete,objBgDelete/
@def/objDelete(<buf>, [maxbuf])/
@{
  Deletes object <buf>, or (if <maxbuf> is given) all objects from <buf> to
  <maxbuf> inclusive.
@}

@fun/objClear,objBgClear/
@def/objClear(<buf>, [maxbuf])/
@{
  Deletes object <buf>, and clears any position data and attributes.  If <maxbuf>
  is give, all objects from <buf> to <maxbuf> inclusive are affected.
@}

@fun/objCopy,objBgCopy/
@def/objCopy(<src>, <dst>)/
@{
  Makes a copy of object <src> in buffer <dst>.  All attributes are copied
  exactly.
@}

@fun/objCopyToBg,objBgCopyToFg/
@def/objCopyToBg(<src>, <dst>)/
@and/objBgCopyToFg~{\ldots~}/
@{
  As @ref{objCopy}, except that the target layer is different: @ref{objCopyToBg}
  copies the foreground object <src> to the background buffer <dst>, and vice
  versa.

  These functions are exceptions to the object naming convention; that is, there
  is no \lstinline|objBgCopyToBg()| (this function is simply @ref{objBgCopy}),
  and likewise no \lstinline|objCopyToFg()| (this function is simply
  @ref{objCopy}).
@}

@fun/objWipeCopyOn,objWipeCopyOff,objBgWipeCopyOn,objBgWipeCopyOff/
@def/objWipeCopyOn(<buf>, [maxbuf])/
@and/objWipeCopyOff~{\ldots~}/
@{
  Set or clear the `wipe copy' flag for object <buf>, or, if <maxbuf> is given,
  all objects from <buf> to <maxbuf> inclusive.

  If the `wipe copy' flag is set, then the object in question, if a foreground
  object, will not be deleted when the background layer is promoted by a call to
  @ref{grpDisplay}, unless there is another object in the corresponding
  background slot.  If the flag is cleared, foreground objects will always be
  deleted upon layer promotion.
@}

\subsection{Object position}\label{sec:objdisplay}

\index[concept]{naming conventions!objects}
As documented at the start of section \ref{sec:objects}, each function described
in this section actually represents \emph{four} functions: the variants
described here affect single objects on the foreground layer, but in addition to
the background layer equivalent (replace \texttt{obj} with \texttt{objBg}),
there are also equivalents operating on ranges of objects (\texttt{objRange} and
\texttt{objBgRange}).

@fun/objShow,objBgShow,objRangeShow,objBgRangeShow/
@def/objShow(<buf>, <flag>)/
@{
  Sets the visibility of the given object to <flag>, where 0 means `invisible'
  and 1 means `visible'.
@}

@fun/objMove,objBgMove,objRangeMove,objBgRangeMove,objLeft,objBgLeft,objRangeLeft,objBgRangeLeft,objTop,objBgTop,objRangeTop,objBgRangeTop/
@def/objMove(<buf>, <x>, <y>)/
@and/objLeft(<buf>, <x>)/
@and/objTop(<buf>, <y>)/
@{
  Moves the given object to ($x$, $y$); modifies only one coordinate if one of
  the latter forms is used.
@}

@fun/objAdjust,objBgAdjust,objRangeAdjust,objBgRangeAdjust,objAdjustX,objBgAdjustX,objRangeAdjustX,objBgRangeAdjustX,objAdjustY,objBgAdjustY,objRangeAdjustY,objBgRangeAdjustY/
@def/objAdjust(<buf>, <index>, <x>, <y>)/
@and/objAdjustX(<buf>, <index>, <x>)/
@and/objAdjustY(<buf>, <index>, <y>)/
@{
  Sets the adjustment position <index> to ($x$, $y$).  There are eight
  adjustment positions per object (numbered 0 to 7); their values are summed and
  added to the object's base position (as set with @ref{objMove}) to determine
  the actual position at which it is displayed.
@}

@fun/objAdjustAll,objBgAdjustAll,objRangeAdjustAll,objBgRangeAdjustAll,objAdjustAllX,objBgAdjustAllX,objRangeAdjustAllX,objBgRangeAdjustAllX,objAdjustAllY,objBgAdjustAllY,objRangeAdjustAllY,objBgRangeAdjustAllY/
@def/objAdjustAll(<buf>, <x>, <y>)/
@and/objAdjustAllX(<buf>, <x>)/
@and/objAdjustAllY(<buf>, <y>)/
@{
  As @ref{objAdjust}, etc., except that all eight adjustment positions for the
  object are set to the same values.  It would appear that the main use of this
  would be to pass 0 for <x> and <y> in order to clear all adjustments.
@}

@fun/objAdjustVert,objBgAdjustVert,objRangeAdjustVert,objBgRangeAdjustVert/
@def/objAdjustVert(<buf>, <y>)/
@{
  Similar to @ref{objAdjustY}, but operating on a separate setting (named `Height'
  in the \reallive\ debugger).
@}

@fun/objOrigin,objBgOrigin,objRangeOrigin,objBgRangeOrigin,objOriginX,objBgOriginX,objRangeOriginX,objBgRangeOriginX,objOriginY,objBgOriginY,objRangeOriginY,objBgRangeOriginY/
@def/objOrigin(<buf>, <x>, <y>)/
@and/objOriginX(<buf>, <x>)/
@and/objOriginY(<buf>, <y>)/
@{
  Sets the origin of the given object; this is the point relative to which it
  is positioned, and around which rotation, scaling, etc. take place.  By
  default it is (0, 0), i.e.\ the top left of the object's bounding box.
  
  For example, to rotate a $100 \times 200$ object 180$^\circ$ and place it
  at the centre of the screen, one would use the code
  \begin{lstlisting}
    objOrigin(obj, 50, 100)
    objMove(obj, ScreenWidth / 2, ScreenHeight / 2)
    objRotate(obj, 1800)
  \end{lstlisting}
  \noindent where, without the @ref{objOrigin} call, the object would have
  been positioned with its top left at the centre of the screen, and then
  rotated around that point rather than its centre.
@}

@fun/objRepOrigin,objBgRepOrigin,objRangeRepOrigin,objBgRangeRepOrigin,objRepOriginX,objBgRepOriginX,objRangeRepOriginX,objBgRangeRepOriginX,objRepOriginY,objBgRepOriginY,objRangeRepOriginY,objBgRangeRepOriginY/
@def/objRepOrigin(<buf>, <x>, <y>)/
@and/objRepOriginX(<buf>, <x>)/
@and/objRepOriginY(<buf>, <y>)/
@{
  Not fully understood; these functions \emph{appear} to have the same effect as 
  @ref{objOrigin}, etc., except controlling a second origin setting which is 
  added to the main origin when rotating and scaling an object, but ignored for 
  the purpose of positioning it.
@}

@fun/objScale,objBgScale,objRangeScale,objBgRangeScale,objWidth,objBgWidth,objRangeWidth,objBgRangeWidth,objHeight,objBgHeight,objRangeHeight,objBgRangeHeight/
@def/objScale(<buf>, <width>, <height>)/
@and/objWidth(<buf>, <width>)/
@and/objHeight(<buf>, <height>)/
@{
  Stretch or shrink the given object; <width> and <height> are percentages of its
  natural size.
@}

@fun/objRotate,objBgRotate,objRangeRotate,objBgRangeRotate/
@def/objRotate(<buf>, <angle>)/
@{
  Sets the angle of the given object to $\frac{angle}{10}^\circ$.
@}

\subsection{Object attributes}

\index[concept]{naming conventions!objects}
As documented at the start of section \ref{sec:objects}, each function described
in this section actually represents \emph{four} functions: the variants
described here affect single objects on the foreground layer, but in addition to
the background layer equivalent (replace \texttt{obj} with \texttt{objBg}),
there are also equivalents operating on ranges of objects (\texttt{objRange} and
\texttt{objBgRange}).

@fun/objPattNo,objBgPattNo,objRangePattNo,objBgRangePattNo/
@def/objPattNo(<buf>, <index>)/
@{
  For objects based on \file{g00} bitmaps, selects a bitmap from the file to
  use for the object.  This enables you to use a single \file{g00} file
  containing multiple bitmaps for objects, such as buttons, that can have
  multiple states.
@}

@fun/objAlpha,objBgAlpha,objRangeAlpha,objBgRangeAlpha/
@def/objAlpha(<buf>, <alpha>)/
@{
  Sets the opacity of the given object to <alpha>, where 0 is completely
  transparent and 255 is completely opaque.\footnote{Note that the value is
  taken modulo 256, so a value of 256 will in fact be transparent again.}
@}

@fun/objDispArea,objBgDispArea,objRangeDispArea,objBgRangeDispArea,objDispRect,objBgDispRect,objRangeDispRect,objBgRangeDispRect/
@def/objDispArea(<buf>, @[<x>, <y>, <x>~{$'$~}, <y>~{$'$~}@])/
@and/objDispRect(<buf>, @[<x>, <y>, <width>, <height>@])/
@{
  Clips the given object so that only those parts of it that fall within the 
  window defined by the given coordinates are displayed.  If the window 
  coordinates are not given, the entire screen is used (that is, the clipping is 
  removed).
@}

@fun/objDispCorner,objBgDispCorner,objRangeDispCorner,objBgRangeDispCorner/
@def/objDispCorner(<buf>, @[<x>, <y>@])/
@{
  As @ref{objDispArea}, but the clipping window is defined as (0, 0)-($x$, $y$).
@}

@fun/objMono,objBgMono,objRangeMono,objBgRangeMono/
@def/objMono(<buf>, <level>)/
@{
  Converts the given object to greyscale; <level> controls the extent to which
  colour is removed.  The effect is the same as that used by the @ref{grpMono}
  function, but the effect can be removed from the object by calling the function
  again with a <level> of 0.

  If the object is a filter (defined with @ref{objOfArea} or @ref{objOfRect}),
  rather than modify the object directly, this causes the object to become a
  monochrome filter affecting the image beneath it.
@}

@fun/objInvert,objBgInvert,objRangeInvert,objBgRangeInvert/
@def/objInvert(<buf>, <level>)/
@{
  Inverts the given object, using <level> to determine how opaquely to combine
  the inverted form with the original: a <level> of 0 removes the invert effect,
  while a level of 255 causes it to be completely inverted.

  If the object is a filter, rather than modify the object directly, this causes
  the object to become an invert filter affecting the image beneath it.
@}

@fun/objLight,objBgLight,objRangeLight,objBgRangeLight/
@def/objLight(<buf>, <level>)/
@{
  Applies the same brightness adjustments as @ref{grpLight} to the object; as
  with other object functions, calls are not cumulative, so setting <level> to 0
  will remove the effect again, and if the object is a filter, it will apply the
  effect to the parts of the image beneath it.  Note that it is both legal and
  meaningful for <level> to be negative.
@}

@fun/objTint,objBgTint,objRangeTint,objBgRangeTint,objTintR,objBgTintR,objRangeTintR,objBgRangeTintR,objTintG,objBgTintG,objRangeTintG,objBgRangeTintG,objTintB,objBgTintB,objRangeTintB,objBgRangeTintB/
@def/objTint(<buf>, <r>, <g>, <b>)/
@and/objTintR(<buf>, <r>)/
@and/objTintG(<buf>, <g>)/
@and/objTintB(<buf>, <b>)/
@{
  Applies a colour to the object with the same effect as @ref{grpColour}; the
  latter three forms permit modification of one channel at a time.  The same
  rules apply as for @ref{objLight}.
@}

@fun/objColour,objBgColour,objRangeColour,objBgRangeColour,objColourR,objBgColourR,objRangeColourR,objBgRangeColourR,objColourG,objBgColourG,objRangeColourG,objBgRangeColourG,objColourB,objBgColourB,objRangeColourB,objBgRangeColourB,objColourLevel,objBgColourLevel,objRangeColourLevel,objBgRangeColourLevel/
@def/objColour(<buf>, <r>, <g>, <b>, <level>)/
@and/objColR(<buf>, <r>)/
@and/objColG(<buf>, <g>)/
@and/objColB(<buf>, <b>)/
@and/objColLevel(<buf>, <level>)/
@{
  Applies a colour to the object by blending it directly at <level> opacity;
  setting <level> to 0 removes the effect, setting it to 255 causes the object
  to be shaded solidly with the given colour.  The latter four forms permit
  modification of one parameter at a time.
@}

@fun/objComposite,objBgComposite,objRangeComposite,objBgRangeComposite/
@def/objComposite(<buf>, <mode>)/
@{
  Modifies the composition mode used to display the given object:

  \begin{tabular}{r@@{\hs}ll}
  \textbf{0} & normal   & (object is displayed as though with @ref{grpMaskCopy}) \\
  \textbf{1} & add      & (object is displayed as though with @ref{grpMaskAdd})  \\
  \textbf{2} & subtract & (object is displayed as though with @ref{grpMaskSub})
  \end{tabular}
@}

@fun/objLayer,objBgLayer,objRangeLayer,objBgRangeLayer,objDepth,objBgDepth,objRangeDepth,objBgRangeDepth,objOrder,objBgOrder,objRangeOrder,objBgRangeOrder,objQuarterView,objBgQuarterView,objRangeQuarterView,objBgRangeQuarterView/
@def/objLayer(<buf>, <layer>)/
@and/objDepth(<buf>, <depth>)/
@and/objOrder(<buf>, <order>)/
@and/objQuarterView(<buf>, <qview>)/
@{
  Modify some settings for the given object.  The meanings of the settings are 
  unknown, since they do not have any obvious effect, other than to alter the 
  values displayed for `layer', `depth', `order', and `quaterview' \emph{(sic)} 
  in the \reallive\ debugger. 
@}

@fun/objScrollRate,objBgScrollRate,objRangeScrollRate,objBgRangeScrollRate,objScrollRateX,objBgScrollRateX,objRangeScrollRateX,objBgRangeScrollRateX,objScrollRateY,objBgScrollRateY,objRangeScrollRateY,objBgRangeScrollRateY/
@def/objScrollRate(<buf>, <x>, <y>)/
@and/objScrollRateX(<buf>, <x>)/
@and/objScrollRateY(<buf>, <y>)/
@{
  Alter the `scroll rate' settings for the given object.  These are the same as 
  the <scrollX> and <scrollY> settings that can be set in most object 
  initialisation functions, and determine whether an object is considered part 
  of the background plane or the object plane for scrolling and shaking 
  animations.
@}

\subsection{Object animations}\label{sec:gananim}\index[concept]{animation!with objects}\index[concept]{GAN}

These functions animate objects based on the patterns in their associated
bitmap files.

With the exception of @ref{objStop}, each of these functions comes in two forms: 
one with the usual \file{obj} and \file{objBg} prefixes, and one with the 
prefixes \file{gan} and \file{ganBg}.  The former is used with regular objects, 
and employs a simple animation based on displaying the patterns of the object in 
turn, showing each for the duration defined by the function's <time> parameter. 
The latter is used with objects which were associated with \file{GAN} animations 
by initialising with @ref{objOfFileGan}; in these, an animation (`set') is 
selected from the \file{GAN} file with the function's <set> parameter. 
\file{GAN} animations provide more flexibility than the simple animations, but 
are more complicated to set up.\footnote{This is an oversimplification.  In 
theory, both sets of functions can be used on objects with and without 
\file{GAN}s, with slightly differing effects. In practice, existing \reallive\ 
games make a consistent distinction, as documented here.}

@fun/objStop,objBgStop/
@def/objStop(<buf>, [pattern])/
@{
  Stops any animation playing in object <buf>, and sets it to display the
  given pattern instead; if <pattern> is not given, it defaults to 0.
@}

@fun/ganPlay,objPlay,ganBgPlay,objBgPlay/
@def/ganPlay(<buf>, <set>)/
@and/objPlay(<buf>, <time>)/
@{
  Plays an animation.  The function returns immediately, leaving the animation 
  playing.  When the animation is complete, the object is left displaying the 
  final frame.
@}

@fun/ganPlayEx,objPlayEx,ganBgPlayEx,objBgPlayEx/
@def/ganPlayEx(<buf>, <set>)/
@and/objPlayEx(<buf>, <time>)/
@{
  As previous, but the function does not return until the animation has finished 
  playing.
@}

@fun/ganPlayOnce,ganBgPlayOnce,objPlayOnce,objBgPlayOnce/
@def/ganPlayOnce(<buf>, <set>)/
@and/objPlayOnce(<buf>, <time>)/
@{
  Plays an animation, as @ref{ganPlay}/@ref{objPlay}; <buf> is cleared when the
  animation ends.
@}

@fun/ganPlayOnceEx,ganBgPlayOnceEx,objPlayOnceEx,objBgPlayOnceEx/
@def/ganPlayOnceEx(<buf>, <set>)/
@and/objPlayOnceEx(<buf>, <time>)/
@{
  As previous, but the function does not return until the animation has finished 
  playing.
@}

@fun/ganLoop,objLoop,ganBgLoop,objBgLoop/
@def/ganLoop(<buf>, <set>)/
@and/objLoop(<buf>, <time>)/
@{
  Plays an animation continuously, looping whenever it reaches the end.
@}

@fun/ganPlayBlink,objPlayBlink,ganBgPlayBlink,objBgPlayBlink/
@def/ganPlayBlink(<buf>, <set>)/
@and/objPlayBlink(<buf>, <time>)/
@{
  Plays an animation in a way suitable for animating a character's blinking
  eyes.  A loop is set up in which the animation is played, separated by
  pauses of approximately three seconds.
  
  In the case of @ref{objPlayBlink}, the animation displays the patterns of 
  the object first in order, then in reverse order, to enable the closing and
  opening of an eye to be displayed without duplicating frames.  This is 
  \emph{not} the case for @ref{ganPlayBlink}; it is assumed that the reverse
  phase will be included in the \file{GAN} definition.
@}


%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Timing}\index[concept]{timing}\index[concept]{timers}\index[concept]{frame counters}

The \reallive\ system provides three main timing constructs.  Where the
duration from start to end of a pause is important, use \emph{waiting}
functions.  Where the duration from the start of a section of code to the end of
the pause that ends it is important (but the length of the pause itself is not),
use \emph{timers}. Where the rate of change of some attribute is important, use
\emph{frame counters}.  These constructs are covered in turn in the remainder of
this section.

\subsection{Waiting}

@fun/wait/
@def/wait(<time>)/
@{
  Pauses for <time> ms.  Within a string, the \ccref{wait} control code has an
  identical effect.
@}

@fun/waitC/
@def/waitC(<time>): store/
@{
  Pauses for up to <time> ms; the pause can be cancelled with a mouse click.
  Valid return values are:

  \ifhevea
    \begin{tabular}{r@@{\hs}l}
    \textbf{0}  & The pause was not cancelled, or it was cancelled by use of the
                  Control key. \\
    \textbf{1}  & The pause was cancelled with a left click. \\
    \textbf{-1} & The pause was cancelled with a right click. \\
    \end{tabular}
  \else
    \begin{tabular}{r@@{\hs}l}
    \textbf{0}  & The pause was not cancelled, or it was cancelled by use of the
    \\          & Control key. \\
    \textbf{1}  & The pause was cancelled with a left click. \\
    \textbf{-1} & The pause was cancelled with a right click. \\
    \end{tabular}
  \fi
@}

\subsection{Timers}\index[concept]{timers}

Timers are simple counters: when initialised, they start counting from 0, and
can be queried at any point to return the number of milliseconds that have
elapsed since their initialisation.

\reallive\ provides two sets of 255 timers, the basic counters
(\ifhevea\@print{&#x30ab;&#x30a6;&#x30f3;&#x30c8;}\else`COUNT'\fi)
and the extended counters
(\ifhevea\@print{&#xff25;&#xff38;&#x30ab;&#x30a6;&#x30f3;&#x30c8;}\else`EX-COUNT'\fi);
the difference between them is unclear, other than that different sets of functions
operate on each.  Of the functions documented below, those with an `Ex' infix
operate on the extended counters, and those without operate on the basic counters.

The number of the timer to use, <counter>, is optional in all these functions;
in all cases, if it is not given, it will default to 0.

All timers run continuously; they cannot be stopped.  The implementation appears
to be based on the time since the interpreter was started, as this is what you get
if you query a timer that has not been initialised to any other value.
``Setting'' a timer merely stores the time at which the timer was set, and
future queries subtract this from the time since the interpreter was started and
then add the value to which the timer was initialised.\footnote{The timer
displays in \reallive's debug mode are only updated when a timer has been
accessed within the last twenty seconds, but this is merely a simplification for
the programmer's convenience, not a reflection of which are ``counting'' and
which are not.}

@fun/ResetTimer,ResetExTimer,SetTimer,SetExTimer/
@def/ResetTimer([counter])/
@and/ResetExTimer~{\ldots~}/
@{
  Sets <counter> to 0.
@}

@def/SetTimer(<time>, [counter])/
@and/SetExTimer~{\ldots~}/
@{
  Sets <counter> to <time>.
@}

@fun/time,timeEx,timeC,timeExC/
@def/time(<time>, [counter])/
@and/timeEx~{\ldots~}/
@{
  Pauses until <counter> reaches <time>, or returns immediately if <counter> is
  already greater than <time>.
@}

@def/timeC(<time>, [counter]): store/
@and/timeExC~{\ldots~}/
@{
  As @ref{time}, except that the pause can be cancelled with a mouse click.
  The return value is as follows:

  \begin{tabular}{r@@{\hs}l}
  \textbf{0}  & The pause was not cancelled. \\
  \textbf{1}  & The pause was cancelled with a left click. \\
  \textbf{-1} & The pause was cancelled with a right click. \\
  \end{tabular}
@}

@fun/Timer,ExTimer/
@def/Timer([counter]): store/
@and/ExTimer~{\ldots~}/
@{
  Returns the current value of <counter>.
@}

@fun/CmpTimer,CmpExTimer/
@def/CmpTimer(<time>, [counter]): store/
@and/CmpExTimer~{\ldots~}/
@{
  Compares the value of <counter> to <time>, returning 1 if <counter> is greater
  than <time>, or 0 otherwise.
@}

\subsection{Frame counters}\index[concept]{frame counters}\label{sec:frames}

Frame counters are designed to make it simple to ensure events happen at a
constant speed regardless of the host system's specifications.  Once a frame
counter has been initialised, it will count from one arbitrary number to
another, over a given length of time.  The counter can be queried at any point
to get its current value.

For example, to move a sprite across the screen in exactly five seconds, as
smoothly as possible, you might use the following code:
  \begin{lstlisting}
    objOfFile(2, 'foo', 1, 0, 200) // initialise object 2 from ^\file{foo.g00}^
    InitFrame(10, 0, 640, 5000)    // set frame 10 to count from 0 to 640
    repeat
      int x = ReadFrame(10)        // read value from frame counter
      objLeft(2, x)                // move object
      refresh                      // force a screen redraw
    till x >= 640
  \end{lstlisting}

Note that the @ref{refresh} call is necessary here regardless of the drawing
mode selected, since object modifications do not trigger screen refreshes even
in automatic mode.

As with timers, \reallive\ provides two sets of 255 frame counters, the basic frames
(\ifhevea\@print{&#x30d5;&#x30ec;&#x30fc;&#x30e0;}\else`FRAME'\fi)
and the extended frames
(\ifhevea\@print{&#xff25;&#xff38;&#x30d5;&#x30ec;&#x30fc;&#x30e0;}\else`EX-FRAME'\fi);
the difference between them is unclear, other than that different sets of
functions operate on each.  Of the functions documented below, those with an
`ExFrame' infix operate on the extended frames, and those with just `Frame'
operate on the basic frames.

@fun/InitFrame,InitExFrame/
@def/InitFrame(<counter>, <limit1>, <limit2>, <time>)/
@and/InitExFrame~{\ldots~}/
@{
  Starts frame counter <counter> ticking from <limit1> to <limit2>, over a total
  of <time> ms: that is, the counter will change every $$\frac{time}{limit_2 -
  limit_1}\;{\rm ms}$$
  When it reaches <limit2>, it stops.
@}

@fun/InitFrameAccel,InitFrameDecel,InitExFrameAccel,InitExFrameDecel/
@def/InitFrameAccel(<counter>, <limit1>, <limit2>, <time>)/
@and/InitFrameDecel~{\ldots~}/
@and/InitExFrameAccel~{\ldots~}/
@and/InitExFrameDecel~{\ldots~}/
@{
  As @ref{InitFrame}, but the counter does not change at a constant speed: with
  \emph{Accel}, it starts slowly and speeds up, while \emph{Decel} has the
  opposite behaviour.
@}

@fun/InitFrameLoop,InitFrameTurn,InitExFrameLoop,InitExFrameTurn/
@def/InitFrameLoop(<counter>, <limit1>, <limit2>, <time>)/
@and/InitFrameTurn~{\ldots~}/
@and/InitExFrameLoop~{\ldots~}/
@and/InitExFrameTurn~{\ldots~}/
@{
  As @ref{InitFrame}, but the counter will loop continuously.  With
  \emph{Loop}, it starts from <limit1> each cycle; with \emph{Turn}, it reverses
  direction each cycle.
@}

@fun/InitFrames,InitFramesAccel,InitFramesDecel,InitFramesLoop,InitFramesTurn,InitExFrames,InitExFramesAccel,InitExFramesDecel,InitExFramesLoop,InitExFramesTurn/
@def/InitFrames({<counter>, <limit1>, <limit2>, <time>}~{\ldots~})/
@and/InitFramesAccel~{\ldots~}/
@and/InitFramesDecel~{\ldots~}/
@and/InitFramesLoop~{\ldots~}/
@and/InitFramesTurn~{\ldots~}/
@and/InitExFrames~{\ldots~}/
@and/InitExFramesAccel~{\ldots~}/
@and/InitExFramesDecel~{\ldots~}/
@and/InitExFramesLoop~{\ldots~}/
@and/InitExFramesTurn~{\ldots~}/
@{
  Equivalents of @ref{InitFrame}, etc., operating on more than one frame
  counter at a time.  For example,
  \begin{lstlisting}
    InitExFramesTurn({0, 0, 1000, 2500}, {1, 1000, 0, 2500})
  \end{lstlisting}
  \noindent is equivalent to
  \begin{lstlisting}
    InitExFrameTurn(0, 0, 1000, 2500)
    InitExFrameTurn(1, 1000, 0, 2500)
  \end{lstlisting}
@}


@fun/ReadFrame,ReadExFrame/
@def/ReadFrame(<counter>): store/
@and/ReadExFrame~{\ldots~}/
@{
  Returns the current value of frame counter <counter>.
@}

@fun/ReadFrames,ReadExFrames/
@def/ReadFrames({<counter>, <value>}~{\ldots~}): store/
@and/ReadExFrames~{\ldots~}/
@{
  Returns the current values of multiple frame counters at once.  Each <counter>
  is stored in the corresponding <value> variable.  The return value of the
  whole function is 1 if any of the counters referenced was active, or 0
  otherwise.  For example, the code
  \begin{lstlisting}
    active = ReadFrames({100, a}, {101, b}, {102, c})
  \end{lstlisting}
  \noindent is a more efficient equivalent of
  \begin{lstlisting}
    a = ReadFrame(100)
    b = ReadFrame(101)
    c = ReadFrame(102)
    active = FrameActive(100) | FrameActive(101) | FrameActive(102)
  \end{lstlisting}
@}

@fun/ClearFrame,ClearExFrame/
@def/ClearFrame(<counter>, [value])/
@and/ClearExFrame~{\ldots~}/
@{
  Stops <counter> and resets its counter to <value>, or 0 if <value> is not
  given.
@}

@fun/ClearAllFrames,ClearAllExFrames/
@def/ClearAllFrames([value])/
@and/ClearAllExFrames~{\ldots~}/
@{
  Stops all frame counters and resets their counters to <value>, or 0 if <value>
  is not given.
@}

@fun/FrameActive,ExFrameActive/
@def/FrameActive(<counter>): store/
@and/ExFrameActive~{\ldots~}/
@{
  Returns 1 if frame counter <counter> is currently active, or 0 otherwise.
@}

@fun/AnyFrameActive,AnyExFrameActive/
@def/AnyFrameActive: store/
@and/AnyExFrameActive~{\ldots~}/
@{
  Returns 1 if any frame counter is currently active, or 0 if all are stopped.
@}

%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{System functions}

\subsection{Calling extension DLLs}\label{sec:dllfuns}\index[concept]{DLLs}

The DLL extension system is documented in \ref{sec:dlls}.

The precise availability of the DLL functions is unclear.  These functions were
introduced somewhere between \reallive\ 1.1.7.7 and 1.2.3.5, and the ability to
load multiple DLLs at once was introduced somewhere between 1.2.3.5 and 1.2.5.5.
In the present API, it is assumed - perhaps incorrectly - that the changes take
place at the 1.2 and 1.2.5 boundaries.

When used with versions not supporting DLLs at all, the functions always return
0, and a compile-time warning is issued.  When used with versions supporting
only one DLL, the <index> parameter to each function is ignored, and a
compile-time warning is issued if it is non-zero.

@fun/LoadDLL/
@def/LoadDLL(<index>, <filename>): store/
@{
  \maxver{function}{1.3.2}

  Loads <filename>\file{.dll} into DLL slot <index>; returns the value
  returned by the DLL's \lstinline|OnLoad()| function, or 0 if the load
  was unsuccessful.

  If there was already a DLL loaded in slot <index>, it will be unloaded
  first, as though @ref{UnloadDLL} had been called.

  In versions supporting multiple DLLs, you can also load DLLs automatically
  by naming them with @iref{DLL} directives in \gameexe.  This becomes the
  only way to use DLLs from version 1.3.2 onwards.
@}

@fun/UnloadDLL/
@def/UnloadDLL(<index>): store/
@{
  \maxver{function}{1.3.2}

  Unloads any DLL loaded in slot <index>; returns the value returned by the
  DLL's \lstinline|OnFree()| function, or 0 if there was no DLL in that slot.
@}

@fun/CallDLL/
@def/CallDLL(<index>, @[<arg1>, @[<arg2>, @[<arg3>, @[<arg4>, [arg5]@]@]@]@]): store/
@{
  Calls the DLL loaded in slot <index>; returns the result of calling the DLL's
  \lstinline|OnCall()| function with the given arguments (any not supplied are
  set to 0), or 0 if there was no DLL in that slot.
@}


\subsection{Calling external programs}\index[concept]{external files}

@fun/shell/
@def/shell(<filename>, [argv])/
@{
  Passes <filename> to the Explorer shell.  If <filename> is a document, it will be
  opened; if it is an executable, it will be executed with the parameters
  <argv>.  <filename> is relative to \gameexe.

  This appears to be a wrapper to the Win32 \lstinline|ShellExecute()| function.
@}

@fun/launch/
@def/launch(<target>)/
@{
  Passes <target> to the Explorer shell.  Typically it is a URL, which will be opened
  in the user's default browser.
@}

\subsection{Time and date}\index[concept]{dates}

@fun/GetDateTime/
@def/GetDateTime(<y>, <m>, <d>, <wd>, <hh>, <mm>, <ss>, <ms>)/
@{
  Fills the variables provided with the current time and date: <y>-<m>-<d>
  <hh>:<mm>:<ss>.<ms>, with <wd> being the day of the week (counting Sunday as
  0).
@}

@fun/GetDate,GetTime/
@def/GetDate(<y>, <m>, <d>, <wd>)/
@and/GetTime(<hh>, <mm>, <ss>, <ms>)/
@{
  As @ref{GetDateTime}, but only parts of the data are returned.
@}

\subsection{Window settings}

@fun/title/
@def/title(<text>)/
@{
  Sets the game title.  This is used in two ways: firstly, it is included in
  saved game names; secondly, if the \gameexe\ variable @iref{SUBTITLE} is
  non-zero, it will be displayed in the title bar of the game window.
@}

@fun/PauseCursor/
@def/PauseCursor(<index>)/
@{
  Selects the icon to display in the text window when waiting for input.  These
  are defined in \gameexe\ with the @iref{CURSOR} variables.
@}

\index[concept]{cursors}
@fun/MouseCursor/
@def/MouseCursor(<index>)/
@{
  Selects a mouse cursor.  These are defined in \gameexe\ with the \\
  @iref{MOUSE_CURSOR} variables.
@}
@fun/GetMouseCursor/
@def/GetMouseCursor(): store/
@{
  Returns the index of the currently selected mouse cursor.
@}

@fun/ShowCursor,HideCursor/
@def/ShowCursor()/
@and/HideCursor()/
@{
  Shows or hides the mouse cursor.
@}

@fun/SetCursorMono,CursorMono/
@def/SetCursorMono(<flag>)/
@{
  Sets the `monochrome cursor' flag to <flag>.  If it is non-zero, the mouse
  cursor will be reduced to black and white.

  This function is provided to improve performance on machines with slow video
  cards, and ``black and white'' is a literal description.  The greyscale cursor
  effect in \opus{Clannad}'s dreamworld is achieved by switching to a second
  cursor style with @ref{MouseCursor}.
@}
@def/CursorMono(): store/
@{
  Returns the current value of the `monochrome cursor' flag.
@}

@fun/SetScreenMode,ScreenMode/
@def/SetScreenMode(<mode>)/
@{
  Selects a screen mode.  $1$ is windowed, $0$ is full-screen.
@}
@def/ScreenMode(): store/
@{
  Returns the current screen mode.
@}

\subsection{Saved games}\index[concept]{saved games}

@fun/loadmenu,savemenu/
@def/savemenu(): store/
@and/loadmenu(): store/
@{
  Display a list of saved games, and return a value indicating which the player
  selected, or $-1$ if they clicked `cancel' instead.  @ref{savemenu} permits any
  slot to be chosen; @ref{loadmenu} only permits a slot containing existing
  save data to be chosen.
@}

@fun/save,load,save_always,load_always/
@def/save(<slot>)/
@and/load~{\ldots~}/
@and/save_always~{\ldots~}/
@and/load_always~{\ldots~}/
@{
  Save the current position to <slot>, or load the data from it.  In the
  former case, the title of the saved game is taken from the most recent
  @ref{title} call.

  @ref{save} and @ref{load} optionally display a confirmation dialog (see
  @ref{ConfirmSaveLoad}); @ref{save_always} and @ref{load_always} never
  ask for confirmation.
@}

@fun/menu_save,menu_load,menu_save_always,menu_load_always/
@def/menu_save(): store/
@and/menu_load(): store/
@and/menu_save_always(): store/
@and/menu_load_always(): store/
@{
  Display a menu and process the result in one step:
  \begin{lstlisting}
    menu_save        ^\textit{equals}^ save(savemenu)
    menu_load        ^\textit{equals}^ load(loadmenu)
    menu_save_always ^\textit{equals}^ save_always(savemenu)
    menu_load_always ^\textit{equals}^ load_always(loadmenu)
  \end{lstlisting}
@}

\index[concept]{dates}
@fun/SaveInfo/
@def/SaveInfo(<slot>, <y>, <m>, <d>, <wd>, <hh>, <mm>, <ss>, <ms>, <title>): store/
@{
  If <slot> is empty, returns 0 and leaves the variables in the rest of the
  parameters untouched.  If <slot> contains a saved game, returns 1 and fills
  the variables with information about it: integers for the date and time it was
  saved, down to the millisecond (<y>-<m>-<d> <hh>:<mm>:<ss>.<ms>), with <wd>
  being the day of the week (Sunday being 0), and the value of the @ref{title}
  call active when the save was made as a string in <title>.
@}

@fun/SaveDate,SaveTime,SaveDateTime/
@def/SaveDate(<slot>, <y>, <m>, <d>, <wd>): store/
@and/SaveTime(<slot>, <hh>, <mm>, <ss>, <ms>): store/
@and/SaveDateTime(<slot>, <y>, <m>, <d>, <wd>, <hh>, <mm>, <ss>, <ms>): store/
@{
  As @ref{SaveInfo}, but only returning parts of the data.
@}

@fun/GetSaveFlag/
@def/GetSaveFlag(<slot>, {<src>, <dst>, <count>}~{\ldots~}): store/
@{
  Retrieves the values of variables from saved games.  If <slot> is empty,
  returns 0 and does nothing further; if <slot> contains a saved game, returns 1
  and processes the list of structures.  For each entry in the list, <count>
  values are copied to a block of variables starting with <dst>, reading from
  <src>: the values copied are those that are stored in the saved game in
  <slot>.

  For example, an RPG that stored the player's level in F[100], the player's
  hit points in F[101], and the name of the player's class in S[10], could
  retrieve these values from saved games to display them in a custom load
  menu as follows:
  \begin{lstlisting}
    str menu_line[10]
    for (int i = 0) (i < length(menu_line)) (i += 1):
      int (block) level, hp
      str class
      GetSaveFlag(i, {intF[100], level, 2}, {strS[10], class, 1})
      menu_line[i] = 'Level \i{level} \s{class}, \i{hp} HP';
  \end{lstlisting}
@}

@fun/LatestSave/
@def/LatestSave(): store/
@{
  Returns the slot most recently saved to, or $-1$ if no games have been saved.
@}

@fun/SetConfirmSaveLoad,ConfirmSaveLoad/
@def/SetConfirmSaveLoad(<flag>)/
@{
  Enables or disables the confirmation dialog displayed when saving or loading
  a game.
@}
@def/ConfirmSaveLoad(): store/
@{
  Returns 1 if the confirmation dialog is enabled, 0 otherwise.
@}

\subsection{System command menu functions}\label{sec:syscomfuns}\index[concept]{menus}

The functions in this section operate on system menu commands.  Refer to section
\ref{sec:syscom} for a list of these commands and their effects.

@fun/ContextMenu/
@def/ContextMenu()/
@{
  Displays the system command menu, as though the player had right-clicked. Note
  that if a @iref{CANCELCALL_MOD} hook is defined, this function has no
  effect; it neither displays the popup menu nor jumps to the
  @iref{CANCELCALL} scenario.
@}

@fun/SyscomEnabled/
@def/SyscomEnabled(<syscom>): store/
@{
  Returns 0 if the given system command is invisible, 1 if it is visible, and
  2 if it is visible but disabled (greyed out).
@}

@fun/HideSyscom/
@def/HideSyscom([syscom])/
@{
  Hides the given system command (sets its state to 0).  If <syscom>
  is not given, the menu as a whole is disabled.
@}

@fun/EnableSyscom/
@def/EnableSyscom([syscom])/
@{
  Shows and enables the given system command (sets its state to 1).  If <syscom>
  is not given, the menu as a whole is enabled.
@}

@fun/DisableSyscom/
@def/DisableSyscom(<syscom>)/
@{
  Greys out the given system command (sets its state to 2).  Note that <syscom>
  is not optional this time.
@}

@fun/InvokeSyscom/
@def/InvokeSyscom(<syscom>, [value])/
@{
  If there is a standard dialog box associated with <syscom>, it is displayed;
  if there is a standard action, it is performed.  The list of menu commands in
  section \ref{sec:syscom} has details of which menu commands have standard
  dialogs.  The optional <value> is used for the setting where relevant
  (for example, \lstinline|InvokeSyscom(5, val)| is exactly equivalent to
  \lstinline|SetScreenMode(val)|).
@}

@fun/ReadSyscom/
@def/ReadSyscom(<syscom>): store/
@{
  Returns the value associated with the setting <syscom>, where relevant.
  For example, \lstinline|ReadSyscom(5)| is exactly equivalent to
  @ref{ScreenMode}.
@}

\subsection{Menu mode}\index[concept]{menus}

These functions only seem to work properly when called while in `menu mode',
i.e.\ while the game itself is suspended due to a @ref{pause} call, but bytecode
is being executed either because a right click has been intercepted by
@iref{CANCELCALL} settings, or because a click on a window button has been
intercepted by @iref{WBCALL} settings.

@fun/ShowBackground/
@def/ShowBackground()/
@{
  Hide the text window, wait for a click, then show it again and return to the
  previous paused state.
@}

@fun/SetSkipMode,ClearSkipMode,SkipMode/
@def/SetSkipMode()/
@and/ClearSkipMode()/
@{
  Enter or leave `skip mode', which fast-forwards through previously viewed
  text.
  
  These functions affect the main game, not the menu system.  To modify the skip 
  mode settings from within the game itself, use @ref{SetLocalSkipMode} and 
  @ref{ClearLocalSkipMode}.  
@}
@def/SkipMode(): store/
@{
  Returns a value indicating whether `skip mode' is currently enabled.  
  
  This function reads the setting for the main game, not the menu system.  To 
  determine whether skip mode is enabled from within the game itself, use 
  @ref{LocalSkipMode}.
@}

\subsection{Skip mode}\index[concept]{skipping previously viewed text}

@fun/SetLocalSkipMode,ClearLocalSkipMode,LocalSkipMode/
@def/SetLocalSkipMode()/
@and/ClearLocalSkipMode()/
@{
  Enter or leave `skip mode', which fast-forwards through previously viewed
  text.
  
  These functions are for use within the game itself. To modify the settings 
  from within a custom menu system, use @ref{SetSkipMode} and 
  @ref{ClearSkipMode}.
@}
@def/LocalSkipMode(): store/
@{
  Returns a value indicating whether `skip mode' is currently enabled.
  
  This function is for use within the game itself. To read this setting from
  within a custom menu system, use @ref{SkipMode} instead.
@}

@fun/EnableSkipMode,DisableSkipMode/
@def/EnableSkipMode()/
@and/DisableSkipMode()/
@{
  Control whether skip mode can be entered manually from within the standard
  right-click menu.  Regardless of this setting, it will be unavailable if the
  text on screen has not previously been viewed.
@}

\subsection{Auto mode}\index[concept]{auto mode}\index[concept]{windows!text speed}

\minver{feature}{1.2}

It is possible to set the interpreter up to advance text automatically instead 
of waiting for player input after each screen is displayed; the `auto mode' 
controls permit this behaviour to be customised.

When auto mode is disabled, @ref{pause}, @ref{spause}, and other related
commands pause the game permanently.  When it is enabled, they cause the game to
pause for a certain length of time: this is calculated as $t_{base} + t_{char} \times
n_{chars}$, where $n_{chars}$ is the number of characters that have been printed in
the current screen since the last pause.

@fun/SetAutoMode/
@def/SetAutoMode(<flag>)/
@{
  If <flag> is 1, enables auto mode; if it is 0, disables it.
@}

@fun/SetAutoBaseTime/
@def/SetAutoBaseTime(<time>)/
@{
  Sets $t_{base}$ to <time> ms.
@}

@fun/SetAutoCharTime/
@def/SetAutoCharTime(<time>)/
@{
  Sets $t_{char}$ to <time> ms.
@}

@fun/AutoMode,DefAutoMode/
@def/AutoMode(): store/
@and/DefAutoMode~{\ldots~}/
@{
  Return the current or default setting of the `auto mode' flag.
@}

@fun/AutoBaseTime,DefAutoBaseTime/
@def/AutoBaseTime(): store/
@and/DefAutoBaseTime~{\ldots~}/
@{
  Return the current or default setting of $t_{base}$.
@}

@fun/AutoCharTime,DefAutoCharTime/
@def/AutoCharTime(): store/
@and/DefAutoCharTime~{\ldots~}/
@{
  Return the current or default setting of $t_{char}$.
@}

\subsection{CG mode}\index[concept]{CG mode}

Most \emph{bish\omac jo} games provide a CG mode where special event graphics
can be viewed.  The \reallive\ system provides automatic functions for tracking
which such graphics have been encountered in the course of gameplay.

The functions rely on the contents of the file defined in \gameexe\ with the
@iref{CGTABLE_FILENAME} variable.  This file contains a list of graphics
designated as CGs, and associates each with a variable, always(?) in the
\lstinline|Z[]| array, which is set to 1 when the associated file is
accessed.\footnote{The precise format of this file is currently beyond the scope
of this manual; a tool to access and modify its contents may be included in a
future release of \package.}

@fun/cgGetTotal/
@def/cgGetTotal(): store/
@{
  Returns the total number of images designated as CGs.
@}

@fun/cgGetViewed/
@def/cgGetViewed(): store/
@{
  Returns the number of CG images that have been viewed.
@}

@fun/cgGetViewedPcnt/
@def/cgGetViewedPcnt(): store/
@{
  Returns the percentage of CG images that have been viewed: that is,
  \begin{lstlisting}
    cgGetViewedPcnt
  \end{lstlisting}
  \noindent is equivalent to
  \begin{lstlisting}
    percent(cgGetViewed, cgGetTotal)
  \end{lstlisting}
@}

@fun/cgGetFlag/
@def/cgGetFlag(<filename>): store/
@{
  Returns the index, usually (always?) in Z[], of the variable associated with
  <filename>, or $-1$ if <filename> is not a CG image.
@}

@fun/cgStatus/
@def/cgStatus(<filename>): store/
@{
  Returns a value indicating whether <filename> is a CG that has been
  viewed:

  \begin{tabular}{r@@{\hs}l}
  \textbf{1}  & CG has been viewed \\
  \textbf{0}  & CG has not been viewed \\
  \textbf{-1} & <filename> is not a CG image \\
  \end{tabular}

  \noindent
  This works by reading the associated flag: that is,
  \begin{lstlisting}
    cg = cgStatus('foo')
  \end{lstlisting}
  \noindent is usually (always?) equivalent to
  \begin{lstlisting}
    cg = cgGetFlag('foo')
    if cg >= 0, cg = intZ[cg]
  \end{lstlisting}
@}

\subsection{Font settings}

@fun/SetFontQuality,FontQuality/
@def/SetFontQuality(<value>)/
@and/FontQuality(): store/
@{
  Set or query the antialiasing level for text output.  Possible values are:
  
  \begin{tabular}{r@@{\hs}l}
  \textbf{0} & No antialiasing \\
  \textbf{1} & Low quality \\
  \textbf{2} & High quality
  \end{tabular}
@}

@fun/SetFontWeight,FontWeight/
@def/SetFontWeight(<value>)/
@and/FontWeight(): store/
@{
  Set or query the font-weight flag.  If this is 0, text is rendered normally;
  if it is 1, text is rendered at a heavier weight.  Typically the player will
  select this in the font selection dialog to compensate for light fonts.
@}

@fun/SetFontShadow,FontShadow/
@def/SetFontShadow(<value>)/
@and/FontShadow(): store/
@{
  If the font shadow flag is non-zero, text in the text window is rendered with 
  a shadow.  
@}

\subsection{Miscellaneous flags}
 
@fun/SetLowPriority,LowPriority/
@def/SetLowPriority(<flag>)/
@and/LowPriority(): store/
@{
  This flag is described in the default menu as ``make this program run slower
  so that other programs will run smoothly''.  Its effect is unclear; it does
  not lower the process priority, but it might cause \reallive\ to yield
  control to other processes more frequently.
@}

@fun/SetSkipAnimations,SkipAnimations/
@def/SetSkipAnimations(<flag>)/
@and/SkipAnimations(): store/
@{
  If this flag is set, animated transitions are skipped.
@}

@fun/SetShowObject1,ShowObject1,SetShowObject2,ShowObject2/
@def/SetShowObject1(<flag>)/
@and/SetShowObject2~{\ldots~}/
@and/ShowObject1(): store/
@and/ShowObject2~{\ldots~}/
@{
  The `show object' flags are used to provide a way of enabling or disabling
  interface elements from the menu.  If an object's `ObjectOnOff' property is
  set to 1 or 2, it will be shown or hidden depending on the corresponding
  `show object' flag.  This is one of the properties controlled by the
  @iref{OBJECT} variables in \gameexe.

  In \opus{Clannad}, @def/ShowObject1/ is used to control display of the date
  marker at the top left of the screen (object 84).
@}

@fun/SetShowWeather,ShowWeather/
@def/SetShowWeather(<flag>)/
@and/ShowWeather(): store/
@{
  The `show weather' flag determines whether object environment effects are
  displayed.
@}

@fun/SetClassifyText,ClassifyText/
@def/SetClassifyText(<flag>)/
@and/ClassifyText(): store/
@{
  The `classify text' flag apparently has something to do with text colouring,
  but at the moment I'm not entirely sure what.
@}

@fun/SetGeneric1,Generic1,DefGeneric1,SetGeneric2,Generic2,DefGeneric2/
@def/SetGeneric1(<value>)/
@and/SetGeneric2~{\ldots~}/
@and/Generic1(): store/
@and/Generic2~{\ldots~}/
@and/DefGeneric1~{\ldots~}/
@and/DefGeneric2~{\ldots~}/
@{
  \reallive\ provides two generic settings to permit games using the standard
  system command menu to include custom options in it.  The meaning of each
  generic flag is left up to the programmer.  Valid <value>s are 0 to 4.
@}

%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

\lsection{Debugging}\label{sec:debugfunctions}\index[concept]{debugging}

\reallive\ contains a number of functions which spring into action in debug
mode (enabled with @iref{MEMORY} in \gameexe) to aid the programmer.

Outside debug mode, none of these functions have any effect; you cannot use them
to display messages or get input from the player in normal gameplay.

When releasing a program, you can eliminate these functions from the compiled
code altogether by passing the \clopt{g} option to \compiler, or by defining the
symbol \texttt{\_\_NoDebug\_\_}.

@fun/__Memory?,__Debugging?/
@def/__Memory?(): store/
@and/__Debugging?(): store/
@{
  Functions to determine at runtime whether debugging is active.
  @ref{__Memory?} returns 1 if @iref{MEMORY} is set to 1;  @ref{__Debugging?}
  returns 1 if the `Debug (F2)' option in the `Debug' menu is checked (which
  implies that @iref{MEMORY} is also 1).
@}

@fun/assert/
@def/assert(<expr>, [message])/
@{
  Asserts that the expression <expr> evaluates to a non-zero value; an error is
  raised if it does not.  If <message> is given, it must be a constant string,
  which will be included in the error message.

  If <expr> can be evaluated at compile-time, this is done, any error is raised
  by the compiler directly, and no code is generated; otherwise a runtime check
  is compiled into the program, although it will be ignored if @iref{MEMORY}
  is not set.

  Compilation of assertions will be disabled along with other debugging
  functions if \clopt{g} is passed to \compiler\ or \texttt{\_\_NoDebug\_\_} is
  defined.  You can also disable assertions only, without affecting other
  debugging code, by passing the \cllong{no-assert} option to \compiler\ or
  defining the symbol \texttt{\_\_NoAssert\_\_}.  Note, however, that any
  assertions which can be checked at compile-time will \emph{always} be checked,
  regardless of these settings.
@}

@fun/__DebugMessage/
@def/__DebugMessage(<message>)/
@{
  Prints <message> to the debug console (open with F8).
@}

@fun/__DebugMsgBox/
@def/__DebugMsgBox(<message>, [type]): store/
@{
  Displays a message box containing <message>, which can be an arbitrary string
  or integer expression.

  <type> can have the following values:

  \begin{tabular}{r@@{\hs}l}
  \texttt{DEBUG\_OK}       & `OK' button only.  This is the default if no type is given. \\
  \texttt{DEBUG\_OKCANCEL} & `OK' and `Cancel' buttons.  Returns 0 for `OK' and 1 for `Cancel'. \\
  \texttt{DEBUG\_YESNO}    & `Yes' and `No' buttons.  Returns 0 for `Yes' and 1 for `No'.
  \end{tabular}
@}

@fun/__DebugInputInt/
@def/__DebugInputInt(<prompt>, [default], @[<min>, <max>@]): integer/
@{
  Displays an input box requesting an integer value.  If <default>
  is given, it sets the default value.  If <min> and <max> are given,
  the return value will be constrained such that it falls within the
  bounds they define.
@}

@fun/__DebugInputStr/
@def/__DebugInputStr(<prompt>, [default]): string/
@{
  Displays an input box requesting a string value.  If <default> is
  given, it sets the default value, otherwise the default is the empty
  string.
@}

@fun/__DebugStartTimer,__DebugGetElapsed/
@def/__DebugStartTimer([index])/
@and/__DebugGetElapsed([index]): store/
@{
  Debugging timer controls: start a timer ticking or read its current value.
  <index>, if given, is an integer from 0 to 31 identifying the debug timer to
  use.
@}

@fun/__SaveBuffer/
@def/__SaveBuffer(<file>, [dc])/
@{
  Saves the contents of <dc> (or the screen buffer if <dc> is not given) to
  <file>\file{.bmp}.
@}

@fun/__SaveBufferIdx/
@def/__SaveBufferIdx(<prefix>, [dc])/
@{
  Saves the contents of <dc> (or the screen buffer if <dc> is not given) to
  <prefix>[i]\file{.bmp}, where [i] is a four-digit decimal integer
  incremented with each call.
@}

\lchapter{RLdev extension libraries}\label{libs:extra}

The \reallive\ system is missing some useful functionality.  \package\ provides 
various additional features in the form of extension libraries.  These libraries 
are not enabled by default (you must load them explicitly, generally with the 
\dirref{load} directive, if you wish to use their features), and they are likely 
always to be more or less experimental.

Unlike the main API, much of the functionality documented in this section is not 
considered integral to the compiler: the non-integrated parts of these libraries 
are licensed separately under the terms of the GNU LGPL (see appendix 
\ref{appendix:lgpl}), plus a special exception, which reads as follows:

\emph{As a special exception to the GNU Lesser General Public License, you may
include publicly distributed versions of the libraries in a "work that uses the
Library" to produce a scenario file containing portions of the libraries, and
distribute that scenario file under terms of your choice, without any of the
additional requirements listed in clause 6 of the GNU Lesser General Public
License.  ``Publicly distributed versions of the libraries'' means either the
unmodified libraries as distributed by Haeleth, or modified versions of the
libraries that are distributed under the conditions defined in clause 2 of the
GNU Lesser General Public License.  Note that this exception does not invalidate
any other reasons why the scenario file might be covered by the GNU Lesser
General Public License.}

The effect of this is that you do not need to worry about licensing issues so 
long as you do not modify the libraries; only if you modify the libraries 
yourself will you have to distribute any source code or otherwise make any extra 
effort to comply with the terms of the LGPL.


\lsection{rlBabel: a flexible rendering engine for international text}\label{lib:rlBabel}

  \reallive\ does not natively support non-Japanese text.  The rlBabel library 
  is provided as a solution to this issue.
  
  To use it, you must write your text in UTF-8 and compile it with an output 
  transformation (as described in \ref{sec:encodings}).  You must not disable
  \package\ metadata when compiling: rlBabel reads this metadata at runtime to
  determine how to display text in a given scenario file.  If no metadata is
  present, it is assumed that the text in the file is Japanese.  (This can be
  useful; rlBabel makes it possible to display Japanese text on any platform,
  even those such as English Windows 98 which are otherwise incapable of it.)
  
  It follows that you can safely mix multiple character sets in a game, provided 
  only one is used in any given scenario; and you can safely mix translated and
  untranslated text in a translation, provided that all included scenarios are
  completely translated.
  
  You must also ensure that a rlBabel DLL is accessible at runtime.  This latter
  requirement is fulfilled differently depending on the interpreter you are
  using:
  
  \begin{nicelist}
  \item[1.2 to 1.2.4]
    The DLL to use is \file{rtl/rlBabelF.dll}.  Copy this into your game
    directory, and modify the game's initialisation code to include the line
  \begin{lstlisting}
    LoadDLL(0, 'rlBabelF')
  \end{lstlisting}
    \noindent The initialisation issues described under \ref{sec:dlls} can be 
    ignored in the case of rlBabel, which artificially bumps its own 
    reference count to prevent the essential code being unloaded.  Provided the 
    DLL is loaded once at system startup, you do not have to worry about 
    reloading it after resets.
  \item[1.2.5+]
    The DLL to use is \file{rtl/rlBabel.dll}.  Copy this into your game
    directory, and modify \gameexe\ to include a line along the lines of
  \begin{lstlisting}
    #DLL.000 = "rlBabel"
  \end{lstlisting}
    \noindent where the 000 should be increased accordingly if other DLLs
    are already being used.    
  \end{nicelist}

  Since the codeset detection code requires access to details of the internal 
  interpreter state which are not directly exposed to extension DLLs, it is 
  also necessary to provide rlBabel with a \emph{map file} which identifies 
  the memory addresses to query.  Ready-defined map files for about 20 
  different interpreters are supplied in the \file{rtl/} directory: for 
  example, if your game runs in \reallive\ 1.3.1.0, you need to copy the file
  \file{rtl/1.3.1.0.map} to the game directory for dynamic formatting to
  work.
    
  If you are using an interpreter for which no map is available, you will have 
  to generate one.  There is a program called "rlBabel-GenMap" which can do 
  this automatically: it should be available from the same sources as 
  \package.

  Note that map files are not necessary for the 1.2.3.5 interpreter supplied 
  with \cite{Clannad} or for the 1.2.6.8 interpreter supplied with 
  \cite{Kanon}, as the mappings for these two versions are built into the DLL.

  \lsubsection{Configuring fonts and international names}
  
    \reallive\ will normally select a Japanese font, and interpret the default 
    names (defined with @iref{NAME} and @iref{LOCALNAME} in \gameexe) as being 
    in the default Japanese encoding.  Neither of these is likely to be a 
    desirable effect if you are using a different codepage.  To solve these 
    issues, rlBabel introduces some extensions to \gameexe.
    
    The extensions to the font setting system (which are generally useful) 
    are described in \ref{sec:inifontsettings}.
    
    To provide default names in a non-Japanese encoding, simply enter the names
    you wish to use as text in the normal Windows encoding for that codepage,
    and add one additional variable:

@ivar1/NAME_ENC/enc/
@{
  <enc> indicates the encoding used: 1 is Chinese, 2 is Western, and 3 is Korean.  
@}

  \lsubsection{Dynamic lineation and proportional text}\label{lib:rlBabel:lineation}

    \emph{This functionality is currently experimental; remember to test your
    code very carefully if you use it.}

    Chinese and Japanese text require very little in the way of lineation. 
    Western text is different.  Since \reallive\ is Japanese in origin, it 
    provides very little support for lineation.  This has been a consistent 
    problem for those attempting to run English games on the platform.
    
    Extension DLLs (see \ref{sec:dlls}) provide sufficient functionality for 
    this to be worked round.  C++ code in a DLL can easily take a string, 
    tokenise it, and feed back tokens to \reallive\ for display.  This 
    functionality is provided in rlBabel.  In addition to this, the rlBabel 
    system can be used to enable use of Western characters and punctuation not 
    present in Japanese, and by taking advantage of direct access to the Windows 
    API it is possible to query character widths at runtime and so render text 
    proportionally.
        
    \lsubsubsection{Using dynamic formatting}
    
      At present, your code must use the \texttt{western} character set and 
      output transformation to use the dynamic lineation and proportional text
      features.
      
      To enable the feature, add the line
      \begin{lstlisting}
        #load 'rlBabel'
      \end{lstlisting}
      to your global header (or to the start of every file that displays text).
      This enables the compilation mode that generates code for rlBabel.  You must
      also be certain to call @ref{rlcInit} when the interpreter first loads.
      (This automatically calls @ref{LoadDLL} in versions of \reallive\ where this
      is required, so you need not do that yourself.)

      The lineation code requires a handful of global variables; if you are 
      using @ref{rlcSetAllocation} to modify the default allocation settings 
      (which is recommended, and will be absolutely necessary if you are 
      modifying an existing program), you must do so either in a global header
      or at the top of \emph{every} source file that allocates variables, and
      in all cases \emph{before} loading the library.
        
    \lsubsubsection{Using hypertext with dynamic formatting}
    
      When dynamic formatting is enabled, it is also possible to use hypertext 
      with the \ccref{g} control code.  There is some overhead involved in
      hypertext processing, so this is disabled by default: you must
      enable it explicitly by adding the line
      \begin{lstlisting}
        #define __EnableGlosses__
      \end{lstlisting}
      before you load the rlBabel library.
      
      When a hyperlink is clicked on, rlBabel fills a string variable with the
      text associated with the link and passes it to a handler.  By default,
      this simply displays the text in a standard Windows message box.  You can
      override this behaviour by defining a custom handler.  The syntax for this
      is
      \begin{lstlisting}
        #inline rlBabelGlossCallback (gloss_var):
          // your code
          ;
      \end{lstlisting}
      where <gloss_var> is bound to the string variable containing the text.
      This should also be defined before the rlBabel library is loaded.

    \lsubsubsection{Additional features provided in the dynamic formatting library}
    
      Text can be italicised by using the new \ccref{b} and \ccref{u} control codes
      (not to be mistaken for ``bold'' and ``underline''!):
      
      \ccdef{b}
      \lstinline|\b|
      \begin{cmdesc}
        Begin an emphasis block. The text that follows will be italicised, up to the
        next \ccref{u} code or the end of the current string.
      \end{cmdesc}
      \ccdef{u}
      \lstinline|\u|
      \begin{cmdesc}
        End an emphasis block.
      \end{cmdesc}
      
      For example, \lstinline|'R2D2! It \bis\u you!'| outputs ``R2D2! It 
      \textit{is} you!''.
      
    \lsubsubsection{Limitations of dynamic formatting}
   
      Certain \reallive\ features are not available in rlBabel-formatted
      text.  In particular, the \ccref{ruby} control code is not supported
      at present.
      
      Proportional text formatting has not been extended to cover all cases. In 
      particular, text displayed by @ref{select_s}, @ref{objOfText}, 
      @ref{grpTextout}, and related functions still uses the fixed advance width 
      system built into \reallive.  Support for these functions is planned for
      a future release.
      
    \lsubsubsection{Using bitmapped characters in text}
    
      When using proportional text output, bitmapped characters printed with the 
      \ccref{e} and \ccref{em} codes are currently not permitted in @ref{select} 
      calls.  They can be used as normal in regular text.
    
      By default, bitmapped characters are exactly one em wide.  When using 
      proportional text output, it is possible to specify widths for individual
      characters by defining a new variable in \gameexe:
      
@ivar/RLBABEL_E_MOJI_WIDTHS/
@def/#RLBABEL_E_MOJI_WIDTHS = <width>@[, <width>~{\ldots~}@]/
@{
  Define widths for bitmapped characters.  Each <width> is a percentage of an
  em square for the corresponding character: that is, the first <width>
  defines the width of character 0, the second defines character 1, and so on.
  Any widths left unspecified default to 100, i.e.\ the normal width.
@}
  
    \lsubsubsection{Utility functions}
    
      The rlBabel DLL implements a number of additional functions which may be of
      general utility, but which are not provided directly by \reallive\ itself
      (or, to be precise, are not \emph{known} to be provided by \reallive).
      
      These functions are defined in the \file{rlBabel} header file.  If you wish
      to use them in a program which does not actually use rlBabel for dynamic
      lineation of Western text, you will need to disable dynamic lineation
      manually by adding the line
      \begin{lstlisting}
        #set __DynamicLineation__ = 0
      \end{lstlisting}
      immediately after you load the header.
    
@fun/MessageBox/
@def/MessageBox(<expr>, [title]): store/
@{
  Pops up a message box displaying the result of the given expression.  Returns 
  1 if the operation succeeded, 0 otherwise.
  
  Unlike @ref{__DebugMsgBox}, this function is not ignored outside debug mode,
  and the title of the message box can be customised.
@}
    
@fun/GetTextWindow/
@def/GetTextWindow(): store/
@{
  Returns the index of the currently active text window.
@}

@fun/SetNameMod,GetNameMod/
@def/SetNameMod(<value>, [window]): store/
@{
  Modifies the value of @irefs{WINDOW}{NAME_MOD}, for <window> if given, or
  else for the currently active window.  Returns the previous value.
@}

@def/GetNameMod([window]): store/
@{
  Returns the current value of @irefs{WINDOW}{NAME_MOD}, for <window> if given,
  or else for the currently active window.
@}

@fun/SetCurrentWindowName/
@def/SetCurrentWindowName(<name>): store/
@{
  Sets the speaker name associated with the current window, without displaying
  any text.  That is to say,
      \begin{lstlisting}
        SetCurrentWindowName('speaker')
        'speaker "Examples are easier to think of when it\'s not so late."'
      \end{lstlisting}
  \noindent is usually roughly equivalent to
      \begin{lstlisting}
        '\{speaker} "Examples are easier to think of when it\'s not so late."'
      \end{lstlisting}
  
  The return value is always 1 if no error occurred.  (If an error occurs, it
  is unlikely that this function will return at all, but hypothetically it might
  conceivably return 0 if some deity intervened.)
@}

\lsection{Textout: a compatible rendering engine for Western text}\label{lib:textout}

  \emph{The Textout library is currently experimental; remember to test your
  code very carefully if you use it.}

  The rlBabel library cannot be used by \reallive\ versions below 1.2, or by 
  \reallive\ 1.2 to 1.2.5 where an extension DLL is already in use, or by games 
  which for whatever reason need to display Japanese text as well as a Western 
  language.  To get round this issue, an alternative library is provided which 
  implements a similar dynamic lineation engine in \reallive\ bytecode itself. 
  When the Textout library is loaded, text strings are tokenised at 
  compile-time, and fed at runtime into a rendering loop that keeps a record of 
  the state of the various text output windows and inserts line breaks 
  automatically as appropriate.
  
  Compared to rlBabel, the Textout library has a number of limitations.  First and
  foremost, it does not alter any \reallive\ behaviours directly: so players will
  be limited to Japanese fonts and characters once more, and only monospaced
  text will be displayed.  It is also slower, and causes an even greater increase in
  the size of the compiled code.  For these reasons, rlBabel is usually a better
  choice if you are able to use a supported interpreter.
  
  To use this feature, insert the line 
  \begin{lstlisting}
    #load 'textout'
  \end{lstlisting}
  \noindent at the start of each file in the project, or in a project header, 
  and ensure that the @ref{rlcInit} function is called when the program begins. 
  The Textout library reserves a fair amount of memory, depending on how many 
  text windows are defined; if you are using @ref{rlcSetAllocation} to modify 
  the default allocation settings (which is recommended, and will be 
  absolutely necessary if you are modifying an existing program), you must do 
  so \emph{before} loading the library.
  
  Usage once the library is loaded is automatic.  It can be disabled by setting 
  the value of the constant \lstinline|__DynamicLineation__| to 0, but this is 
  not recommended.
  
  Additional diagnostics can be enabled by defining the symbol 
  \lstinline|__DebugTextout__| before loading the library.
  
  Note that while the Textout library compiles to valid RealLive bytecode, it is 
  formed such that it cannot be disassembled to valid Kepago again.  If you 
  disassemble a file that uses it, you will \emph{not} be able to recompile the 
  disassembled source code.  (You may consider this an advantage, if you do not
  want your program to be easily modifiable by unauthorised third parties!)
  
  The actual rules governing \reallive's text windows are complex and filled 
  with special cases.  This library currently uses a simplified model which does 
  not always perfectly match the true behaviour.  In particular, \reallive's 
  special handling of certain double-byte characters, such as punctuation and 
  small kana, is \emph{not} taken into account, which may well lead to incorrect 
  lineation of strings containing these characters.  The safest option is not to
  mix western and Japanese text in one window.
