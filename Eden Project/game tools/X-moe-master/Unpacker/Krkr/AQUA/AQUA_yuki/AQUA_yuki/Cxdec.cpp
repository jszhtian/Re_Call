#include "Cxdec.h"


DWORD xcode_rand(struct CxdecXcodeStatus *xcode)
{
	DWORD seed = xcode->Seed;
	xcode->Seed = 1103515245 * seed + 12345;
	return xcode->Seed ^ (seed << 16) ^ (seed >> 16);
}

int push_bytexcode(struct CxdecXcodeStatus *xcode, BYTE code)
{
	if ((DWORD)xcode->Cur - (DWORD)xcode->Start + 1 > xcode->SpaceSize)
		return 0;

	*xcode->Cur++ = code;

	return 1;
}

int push_2bytesxcode(struct CxdecXcodeStatus *xcode,
	BYTE code0, BYTE code1)
{
	if ((DWORD)xcode->Cur - (DWORD)xcode->Start + 2 > xcode->SpaceSize)
		return 0;

	*xcode->Cur++ = code0;
	*xcode->Cur++ = code1;

	return 1;
}

int push_3bytesxcode(struct CxdecXcodeStatus *xcode,
	BYTE code0, BYTE code1, BYTE code2)
{
	if ((DWORD)xcode->Cur - (DWORD)xcode->Start + 3 > xcode->SpaceSize)
		return 0;

	*xcode->Cur++ = code0;
	*xcode->Cur++ = code1;
	*xcode->Cur++ = code2;

	return 1;
}

int push_4bytesxcode(struct CxdecXcodeStatus *xcode,
	BYTE code0, BYTE code1, BYTE code2, BYTE code3)
{
	if ((DWORD)xcode->Cur - (DWORD)xcode->Start + 4 > xcode->SpaceSize)
		return 0;

	*xcode->Cur++ = code0;
	*xcode->Cur++ = code1;
	*xcode->Cur++ = code2;
	*xcode->Cur++ = code3;

	return 1;
}

int push_5bytesxcode(struct CxdecXcodeStatus *xcode,
	BYTE code0, BYTE code1, BYTE code2, BYTE code3, BYTE code4)
{
	if ((DWORD)xcode->Cur - (DWORD)xcode->Start + 5 > xcode->SpaceSize)
		return 0;

	*xcode->Cur++ = code0;
	*xcode->Cur++ = code1;
	*xcode->Cur++ = code2;
	*xcode->Cur++ = code3;
	*xcode->Cur++ = code4;

	return 1;
}

int push_6bytesxcode(struct CxdecXcodeStatus *xcode,
	BYTE code0, BYTE code1, BYTE code2, BYTE code3, BYTE code4, BYTE code5)
{
	if ((DWORD)xcode->Cur - (DWORD)xcode->Start + 6 > xcode->SpaceSize)
		return 0;

	*xcode->Cur++ = code0;
	*xcode->Cur++ = code1;
	*xcode->Cur++ = code2;
	*xcode->Cur++ = code3;
	*xcode->Cur++ = code4;
	*xcode->Cur++ = code5;

	return 1;
}

int push_dwordxcode(struct CxdecXcodeStatus *xcode, DWORD code)
{
	if ((DWORD)xcode->Cur - (DWORD)xcode->Start + 4 > xcode->SpaceSize)
		return 0;

	*xcode->Cur++ = (BYTE)code;
	*xcode->Cur++ = (BYTE)(code >> 8);
	*xcode->Cur++ = (BYTE)(code >> 16);
	*xcode->Cur++ = (BYTE)(code >> 24);

	return 1;
}


//1E001570
static int xcode_building_start(struct CxdecXcodeStatus *xcode, int stage)
{
	// PUSH EDI, PUSH ESI, PUSH EBX, PUSH ECX, PUSH EDX
	if (!push_5bytesxcode(xcode, 0x57, 0x56, 0x53, 0x51, 0x52))
		return 0;

	// MOV EDI, DWORD PTR SS:[ESP+18] (load parameter0)
	if (!push_4bytesxcode(xcode, 0x8b, 0x7c, 0x24, 0x18))
		return 0;

	if (!xcode->XcodeBuilding(xcode, stage))
		return 0;

	// POP EDX, POP ECX, POP EBX, POP ESI, POP EDI
	if (!push_5bytesxcode(xcode, 0x5a, 0x59, 0x5b, 0x5e, 0x5f))
		return 0;

	// RETN
	return push_bytexcode(xcode, 0xc3);
}

// @1E017AE0
static int xcode_building(struct cxdec_callback *callback, DWORD seed, void *start, DWORD size)
{
	struct CxdecXcodeStatus xcode;

	xcode.Start = (BYTE *)start;
	xcode.Cur = (BYTE *)start;
	xcode.SpaceSize = size;
	xcode.Seed = seed;
	xcode.XcodeBuilding = callback->XcodeBuilding;

	// @1E017A90
	int stage = 5;
	for (stage = 5; stage > 0; --stage)
	{
		if (xcode_building_start(&xcode, stage))
			break;
		xcode.Cur = (BYTE *)start;
	}
	if (!stage)
	{
		MessageBoxW(nullptr, L"无法初始化[Reason:Builder Error]", L"[X'moe]AQUA::FatalError", MB_OK | MB_ICONERROR);
		ExitProcess(-1);
		return 0;
	}

	FlushInstructionCache(GetCurrentProcess(), start, size);
	return 1;
}

// 1E01F434
struct cxdec
{
	BYTE *xcode;			// 容纳128个解密函数，每个函数100字节
	void *address_list[128];// 128个解密函数的地址(用index索引)
	DWORD current_count;		// 当前有效的解密函数的个数
	DWORD index_list[100];	// 记录有效的index编号
	int init_flag;

	cxdec() : init_flag(0){}
};

static struct cxdec cxdec;

int cxdec_init()
{
	cxdec.xcode = (BYTE *)VirtualAlloc(NULL, 128 * 100, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (!cxdec.xcode)
		return -1;

	memset(cxdec.address_list, 0, sizeof(cxdec.address_list));
	cxdec.current_count = 0;
	memset(cxdec.index_list, -1, sizeof(cxdec.index_list));
	cxdec.init_flag = 1;

	return 0;
}

void cxdec_release()
{
	VirtualFree(cxdec.xcode, 0, MEM_RELEASE);
	cxdec.init_flag = 0;
}

static void cxdec_execute_xcode(struct cxdec_callback *callback, DWORD hash, DWORD *ret1, DWORD *ret2)
{
	DWORD index = hash & 0x7f;
	hash >>= 7;

	if (!cxdec.init_flag)
		cxdec_init();

	if (!cxdec.address_list[index])
	{
		if (cxdec.index_list[cxdec.current_count] != index)
		{
			if (cxdec.index_list[cxdec.current_count] != -1)
				cxdec.address_list[cxdec.index_list[cxdec.current_count]] = 0;

			xcode_building(callback, index, cxdec.xcode + cxdec.current_count * 128, 128);
			cxdec.address_list[index] = cxdec.xcode + cxdec.current_count * 128;
			cxdec.index_list[cxdec.current_count++] = index;

			if (cxdec.current_count >= 100)
				cxdec.current_count = 0;
		}
	}

	*ret1 = (*(DWORD(*)(DWORD))cxdec.address_list[index])(hash);
	*ret2 = (*(DWORD(*)(DWORD))cxdec.address_list[index])(~hash);
}


static void __cxdec_decode(struct cxdec_callback *callback, DWORD hash, DWORD offset, BYTE *buf, DWORD len)
{
	BYTE key[12];
	DWORD ret[2];

	cxdec_execute_xcode(callback, hash, &ret[0], &ret[1]);

	key[8] = ret[0] >> 8;
	key[9] = ret[0] >> 16;
	key[10] = ret[0];
	DWORD key1 = ret[1] >> 16;
	DWORD key2 = ret[1] & 0xffff;
	*(DWORD *)&key[0] = key1;

	if (key1 == key2)
		++key2;

	*(DWORD*)&key[4] = key2;

	if (!key[10])
		key[10] = 1;

	if ((key2 >= offset) && (key2 < offset + len))
		buf[key2 - offset] ^= key[9];

	if ((key1 >= offset) && (key1 < offset + len))
		buf[key1 - offset] ^= key[8];

	for (DWORD i = 0; i < len; ++i)
		buf[i] ^= key[10];
}

//sub_1E001F20 Filter
void cxdec_decode(struct cxdec_callback *callback, DWORD hash, DWORD offset, BYTE *buf, DWORD len)
{
	DWORD bondary = (hash & callback->key[0]) + callback->key[1];
	DWORD dec_len = 0;

	if (offset < bondary) {
		if (offset + len > bondary)
			dec_len = bondary - offset;
		else
			dec_len = len;
		__cxdec_decode(callback, hash, offset, buf, dec_len);
		offset += dec_len;
		buf += dec_len;
		dec_len = len - dec_len;
	}
	else
		dec_len = len;

	if (dec_len)
		__cxdec_decode(callback, (hash >> 16) ^ hash, offset, buf, dec_len);
}


//////////////////////////////////////////////////


static BYTE EncryptionControlBlock[4096] =
{
	0x20, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x63, 0x6F, 0x6E, 0x74,
	0x72, 0x6F, 0x6C, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x2D, 0x2D, 0x20, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x6C, 0x6C, 0x79, 0x20, 0x6F, 0x72, 0x20, 0x64, 0x79, 0x6E, 0x61, 0x6D,
	0x69, 0x63, 0x61, 0x6C, 0x6C, 0x79, 0x2C, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6C, 0x79,
	0x20, 0x6F, 0x72, 0x20, 0x69, 0x6E, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6C, 0x79, 0x2C, 0x20,
	0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72,
	0x61, 0x6D, 0x20, 0x61, 0x6E, 0x64, 0x2F, 0x6F, 0x72, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x20,
	0x66, 0x72, 0x6F, 0x6D, 0x20, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72,
	0x61, 0x6D, 0x73, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6C, 0x6C, 0x65,
	0x67, 0x61, 0x6C, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x69, 0x63, 0x65, 0x6E,
	0x73, 0x65, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x20, 0x82, 0xB1,
	0x82, 0xCC, 0x83, 0x76, 0x83, 0x8D, 0x83, 0x4F, 0x83, 0x89, 0x83, 0x80, 0x82, 0xE2, 0x83, 0x75,
	0x83, 0x8D, 0x83, 0x62, 0x83, 0x4E, 0x82, 0xF0, 0x81, 0x41, 0x90, 0xC3, 0x93, 0x49, 0x82, 0xC5,
	0x82, 0xA0, 0x82, 0xEA, 0x93, 0xAE, 0x93, 0x49, 0x82, 0xC5, 0x82, 0xA0, 0x82, 0xEA, 0x81, 0x41,
	0x92, 0xBC, 0x90, 0xDA, 0x93, 0x49, 0x82, 0xC5, 0x82, 0xA0, 0x82, 0xEA, 0x8A, 0xD4, 0x90, 0xDA,
	0x93, 0x49, 0x82, 0xC5, 0x82, 0xA0, 0x82, 0xEA, 0x81, 0x41, 0x91, 0xBC, 0x82, 0xCC, 0x83, 0x76,
	0x83, 0x8D, 0x83, 0x4F, 0x83, 0x89, 0x83, 0x80, 0x82, 0xA9, 0x82, 0xE7, 0x97, 0x70, 0x82, 0xA2,
	0x82, 0xE9, 0x82, 0xB1, 0x82, 0xC6, 0x82, 0xCD, 0x83, 0x89, 0x83, 0x43, 0x83, 0x5A, 0x83, 0x93,
	0x83, 0x58, 0x82, 0xC9, 0x82, 0xE6, 0x82, 0xE8, 0x8B, 0xD6, 0x82, 0xB6, 0x82, 0xE7, 0x82, 0xEA,
	0x82, 0xC4, 0x82, 0xA2, 0x82, 0xDC, 0x82, 0xB7, 0x81, 0x42, 0x0A, 0x28, 0x63, 0x29, 0x20, 0x53,
	0x4F, 0x52, 0x41, 0x48, 0x41, 0x4E, 0x45, 0x20, 0x32, 0x30, 0x31, 0x30, 0x2D, 0x20, 0x41, 0x4C,
	0x4C, 0x20, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x20, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x2E, 0x0A, 0x0A, 0x82, 0xBB, 0x82, 0xCC, 0x82, 0xC6, 0x82, 0xAB, 0x81, 0x41, 0x96, 0x6C,
	0x82, 0xC6, 0x90, 0xE7, 0x8E, 0xD1, 0x82, 0xC6, 0x82, 0xCC, 0x8B, 0x97, 0x97, 0xA3, 0x82, 0xCD,
	0x81, 0x41, 0x89, 0xBD, 0x83, 0x81, 0x81, 0x5B, 0x83, 0x67, 0x83, 0x8B, 0x82, 0xBE, 0x82, 0xC1,
	0x82, 0xBD, 0x82, 0xF1, 0x82, 0xBE, 0x82, 0xEB, 0x82, 0xA4, 0x81, 0x42, 0x81, 0x40, 0x31, 0x83,
	0x81, 0x81, 0x5B, 0x83, 0x67, 0x83, 0x8B, 0x81, 0x48, 0x81, 0x40, 0x82, 0xBB, 0x82, 0xEA, 0x82,
	0xC6, 0x82, 0xE0, 0x81, 0x41, 0x31, 0x30, 0x83, 0x81, 0x81, 0x5B, 0x83, 0x67, 0x83, 0x8B, 0x81,
	0x48, 0x0A, 0x81, 0x75, 0x82, 0xBB, 0x81, 0x5B, 0x82, 0xBF, 0x82, 0xE1, 0x81, 0x5B, 0x82, 0xF1,
	0x81, 0x49, 0x81, 0x40, 0x83, 0x49, 0x83, 0x8C, 0x83, 0x93, 0x83, 0x57, 0x83, 0x57, 0x83, 0x85,
	0x81, 0x5B, 0x83, 0x58, 0x82, 0xC5, 0x82, 0xE6, 0x82, 0xA9, 0x82, 0xC1, 0x82, 0xBD, 0x81, 0x5B,
	0x82, 0xC1, 0x81, 0x48, 0x81, 0x76, 0x81, 0x40, 0x81, 0x75, 0x82, 0xBF, 0x81, 0x41, 0x90, 0xE7,
	0x8E, 0xD1, 0x82, 0xC1, 0x81, 0x49, 0x81, 0x40, 0x82, 0xA0, 0x82, 0xD4, 0x82, 0xC8, 0x82, 0xA2,
	0x82, 0xC1, 0x81, 0x49, 0x81, 0x76, 0x0A, 0x8E, 0xE8, 0x82, 0xF0, 0x90, 0x4C, 0x82, 0xCE, 0x82,
	0xB5, 0x82, 0xBD, 0x82, 0xAF, 0x82, 0xC7, 0x81, 0x41, 0x82, 0xBB, 0x82, 0xCC, 0x8B, 0x97, 0x97,
	0xA3, 0x82, 0xCD, 0x8F, 0x6B, 0x82, 0xDC, 0x82, 0xE7, 0x82, 0xC8, 0x82, 0xA9, 0x82, 0xC1, 0x82,
	0xBD, 0x81, 0x42, 0x81, 0x40, 0x82, 0xBB, 0x82, 0xB5, 0x82, 0xC4, 0x82, 0xBB, 0x82, 0xCC, 0x8B,
	0x97, 0x97, 0xA3, 0x82, 0xCD, 0x0A, 0x81, 0x75, 0x82, 0xC8, 0x82, 0xC9, 0x81, 0x5B, 0x81, 0x48,
	0x81, 0x40, 0x82, 0xAB, 0x82, 0xB1, 0x82, 0xA6, 0x82, 0xC8, 0x81, 0x5C, 0x81, 0x5C, 0x81, 0x5C,
	0x81, 0x5C, 0x81, 0x5C, 0x81, 0x40, 0x82, 0xC7, 0x82, 0xF1, 0x82, 0xC7, 0x82, 0xF1, 0x89, 0x93,
	0x82, 0xAD, 0x82, 0xC8, 0x82, 0xC1, 0x82, 0xC4, 0x0A, 0x81, 0x75, 0x82, 0xBF, 0x81, 0x63, 0x81,
	0x63, 0x82, 0xB3, 0x81, 0x63, 0x81, 0x63, 0x81, 0x63, 0x81, 0x63, 0x81, 0x48, 0x81, 0x76, 0x81,
	0x40, 0x82, 0xC2, 0x82, 0xA2, 0x82, 0xC9, 0x82, 0xCD, 0x8C, 0xA9, 0x82, 0xA6, 0x82, 0xC8, 0x82,
	0xAD, 0x82, 0xC8, 0x82, 0xC1, 0x82, 0xC4, 0x82, 0xB5, 0x82, 0xDC, 0x82, 0xC1, 0x82, 0xBD, 0x81,
	0x42, 0x0A, 0x0A, 0x96, 0xDA, 0x82, 0xCC, 0x91, 0x4F, 0x82, 0xC5, 0x8E, 0xE9, 0x90, 0x46, 0x82,
	0xC9, 0x90, 0xF5, 0x82, 0xDC, 0x82, 0xE9, 0x90, 0xE7, 0x8E, 0xD1, 0x81, 0x42, 0x20, 0x93, 0xB9,
	0x82, 0xCE, 0x82, 0xBD, 0x82, 0xF0, 0x82, 0xB1, 0x82, 0xEB, 0x82, 0xB1, 0x82, 0xEB, 0x82, 0xC6,
	0x93, 0x5D, 0x82, 0xAA, 0x82, 0xE9, 0x81, 0x41, 0x83, 0x49, 0x83, 0x8C, 0x83, 0x93, 0x83, 0x57,
	0x83, 0x57, 0x83, 0x85, 0x81, 0x5B, 0x83, 0x58, 0x82, 0xCC, 0x93, 0xFC, 0x82, 0xC1, 0x82, 0xBD,
	0x83, 0x4A, 0x83, 0x62, 0x83, 0x76, 0x81, 0x42, 0x0A, 0x82, 0xB5, 0x82, 0xA9, 0x82, 0xB5, 0x96,
	0x6C, 0x82, 0xCD, 0x81, 0x41, 0x82, 0xC8, 0x82, 0xC9, 0x82, 0xE0, 0x82, 0xB7, 0x82, 0xE9, 0x82,
	0xB1, 0x82, 0xC6, 0x82, 0xAA, 0x82, 0xC5, 0x82, 0xAB, 0x82, 0xC8, 0x82, 0xA9, 0x82, 0xC1, 0x82,
	0xBD, 0x81, 0x42, 0x20, 0x8B, 0xDF, 0x82, 0xC3, 0x82, 0xAD, 0x82, 0xB1, 0x82, 0xC6, 0x82, 0xE0,
	0x82, 0xC5, 0x82, 0xAB, 0x82, 0xC8, 0x82, 0xA9, 0x82, 0xC1, 0x82, 0xBD, 0x81, 0x42, 0x0A, 0x82,
	0xA0, 0x82, 0xCC, 0x93, 0xFA, 0x82, 0xA9, 0x82, 0xE7, 0x96, 0x6C, 0x82, 0xCD, 0x81, 0x41, 0x83,
	0x49, 0x83, 0x8C, 0x83, 0x93, 0x83, 0x57, 0x83, 0x57, 0x83, 0x85, 0x81, 0x5B, 0x83, 0x58, 0x82,
	0xAA, 0x88, 0xF9, 0x82, 0xDF, 0x82, 0xC8, 0x82, 0xA2, 0x81, 0x42, 0x0A, 0x0A, 0x90, 0xBC, 0x97,
	0xEF, 0x32, 0x30, 0x35, 0x36, 0x94, 0x4E, 0x81, 0x5C, 0x81, 0x5C, 0x0A, 0x8E, 0xBF, 0x97, 0xCA,
	0x82, 0xF0, 0x82, 0xE0, 0x82, 0xC1, 0x82, 0xBD, 0x83, 0x7A, 0x83, 0x8D, 0x83, 0x4F, 0x83, 0x89,
	0x83, 0x80, 0x82, 0xF0, 0x90, 0xB6, 0x90, 0xAC, 0x82, 0xB7, 0x82, 0xE9, 0x82, 0xB1, 0x82, 0xC6,
	0x82, 0xAA, 0x82, 0xC5, 0x82, 0xAB, 0x82, 0xE9, 0x83, 0x52, 0x83, 0x93, 0x83, 0x73, 0x83, 0x85,
	0x81, 0x5B, 0x83, 0x5E, 0x20, 0x81, 0x77, 0x83, 0x41, 0x83, 0x4E, 0x83, 0x41, 0x81, 0x78, 0x20,
	0x82, 0xAA, 0x83, 0x70, 0x83, 0x5C, 0x83, 0x52, 0x83, 0x93, 0x82, 0xC9, 0x8E, 0xE6, 0x82, 0xC1,
	0x82, 0xC4, 0x91, 0xE3, 0x82, 0xED, 0x82, 0xE8, 0x38, 0x94, 0x4E, 0x82, 0xAA, 0x89, 0xDF, 0x82,
	0xAC, 0x81, 0x41, 0x83, 0x41, 0x83, 0x4E, 0x83, 0x41, 0x82, 0xAA, 0x90, 0xA2, 0x8A, 0x45, 0x92,
	0x86, 0x82, 0xC5, 0x90, 0xB6, 0x8A, 0x88, 0x82, 0xC9, 0x8D, 0xAA, 0x95, 0x74, 0x82, 0xA2, 0x82,
	0xC4, 0x82, 0xA2, 0x82, 0xBD, 0x81, 0x42, 0x0A, 0x8C, 0x8E, 0x83, 0x96, 0x95, 0x6C, 0x82, 0xCD,
	0x83, 0x41, 0x83, 0x4E, 0x83, 0x41, 0x82, 0xF0, 0x90, 0xA7, 0x8C, 0xE4, 0x82, 0xB7, 0x82, 0xE9,
	0x20, 0x81, 0x67, 0x83, 0x8B, 0x83, 0x4A, 0x81, 0x68, 0x20, 0x82, 0xC6, 0x8C, 0xC4, 0x82, 0xCE,
	0x82, 0xEA, 0x82, 0xE9, 0x83, 0x41, 0x83, 0x93, 0x83, 0x65, 0x83, 0x69, 0x82, 0xAA, 0x90, 0x85,
	0x95, 0xBD, 0x90, 0xFC, 0x82, 0xC9, 0x97, 0xA7, 0x82, 0xBF, 0x81, 0x41, 0x83, 0x41, 0x83, 0x4E,
	0x83, 0x41, 0x8A, 0x4A, 0x94, 0xAD, 0x8C, 0xA4, 0x8B, 0x86, 0x91, 0x67, 0x90, 0x44, 0x81, 0x45,
	0x45, 0x43, 0x52, 0x65, 0x44, 0x97, 0x69, 0x82, 0xB7, 0x82, 0xE9, 0x89, 0xC8, 0x8A, 0x77, 0x8B,
	0x5A, 0x8F, 0x70, 0x93, 0x73, 0x8E, 0x73, 0x82, 0xC6, 0x82, 0xB5, 0x82, 0xC4, 0x94, 0xAD, 0x93,
	0x57, 0x82, 0xB5, 0x82, 0xC4, 0x82, 0xAB, 0x82, 0xBD, 0x81, 0x42, 0x0A, 0x0A, 0x96, 0xC2, 0x8A,
	0x43, 0xE9, 0x44, 0x91, 0xBE, 0x82, 0xCD, 0x95, 0xEA, 0x90, 0x65, 0x82, 0xCC, 0x92, 0x71, 0x8C,
	0x62, 0x82, 0xC6, 0x8B, 0xA4, 0x82, 0xC9, 0x81, 0x41, 0x37, 0x94, 0x4E, 0x82, 0xD4, 0x82, 0xE8,
	0x82, 0xC9, 0x82, 0xB1, 0x82, 0xCC, 0x8A, 0x58, 0x82, 0xC9, 0x96, 0xDF, 0x82, 0xC1, 0x82, 0xC4,
	0x82, 0xAB, 0x82, 0xBD, 0x81, 0x42, 0x0A, 0x82, 0xB5, 0x82, 0xA9, 0x82, 0xB5, 0xE9, 0x44, 0x91,
	0xBE, 0x82, 0xCD, 0x81, 0x41, 0x82, 0xB1, 0x82, 0xCC, 0x8A, 0x58, 0x82, 0xC9, 0x96, 0xDF, 0x82,
	0xC1, 0x82, 0xC4, 0x82, 0xAD, 0x82, 0xE9, 0x82, 0xCC, 0x82, 0xAA, 0x8C, 0x99, 0x82, 0xBE, 0x82,
	0xC1, 0x82, 0xBD, 0x81, 0x42, 0x0A, 0x82, 0xB1, 0x82, 0xB1, 0x82, 0xC9, 0x97, 0x88, 0x82, 0xE9,
	0x82, 0xC6, 0x81, 0x5C, 0x81, 0x5C, 0x81, 0x5C, 0x8E, 0x80, 0x82, 0xF1, 0x82, 0xBE, 0x90, 0xE7,
	0x8E, 0xD1, 0x82, 0xCC, 0x82, 0xB1, 0x82, 0xC6, 0x82, 0xF0, 0x8E, 0x76, 0x82, 0xA2, 0x8F, 0x6F,
	0x82, 0xB5, 0x82, 0xC4, 0x82, 0xB5, 0x82, 0xDC, 0x82, 0xA4, 0x82, 0xA9, 0x82, 0xE7, 0x81, 0x42,
	0x0A, 0x0A, 0x95, 0x41, 0x96, 0xD8, 0x82, 0xC8, 0x82, 0xB8, 0x82, 0xC8, 0x82, 0xC6, 0x82, 0xCC,
	0x8F, 0xD5, 0x8C, 0x82, 0x93, 0x49, 0x20, 0x81, 0x69, 0x82, 0xB7, 0x82, 0xAC, 0x82, 0xE9, 0x81,
	0x48, 0x81, 0x6A, 0x20, 0x82, 0xC8, 0x8F, 0x6F, 0x89, 0xEF, 0x82, 0xA2, 0x81, 0x42, 0x20, 0x8A,
	0x77, 0x89, 0x80, 0x82, 0xC5, 0x8F, 0x6F, 0x89, 0xEF, 0x82, 0xA4, 0x93, 0xEC, 0x99, 0x7A, 0x82,
	0xE2, 0x8C, 0x8E, 0x91, 0xE3, 0x93, 0xDE, 0x81, 0x58, 0x97, 0x9E, 0x82, 0xC6, 0x82, 0xA2, 0x82,
	0xC1, 0x82, 0xBD, 0x83, 0x4E, 0x83, 0x89, 0x83, 0x58, 0x83, 0x81, 0x83, 0x43, 0x83, 0x67, 0x82,
	0xBD, 0x82, 0xBF, 0x81, 0x42, 0x0A, 0x82, 0xBB, 0x82, 0xB5, 0x82, 0xC4, 0xE9, 0x44, 0x91, 0xBE,
	0x82, 0xCD, 0x8A, 0x77, 0x89, 0x80, 0x82, 0xC5, 0x81, 0x41, 0x82, 0xD1, 0x82, 0xB5, 0x82, 0xE5,
	0x94, 0x47, 0x82, 0xEA, 0x8E, 0x70, 0x82, 0xCC, 0x82, 0xD0, 0x82, 0xC6, 0x82, 0xE8, 0x82, 0xCC,
	0x8F, 0xAD, 0x8F, 0x97, 0x82, 0xC6, 0x8D, 0xC4, 0x89, 0xEF, 0x82, 0xB7, 0x82, 0xE9, 0x81, 0x42,
	0x0A, 0x81, 0x75, 0x82, 0xBB, 0x81, 0x5B, 0x81, 0x63, 0x81, 0x63, 0x82, 0xBF, 0x82, 0xE1, 0x82,
	0xF1, 0x81, 0x48, 0x81, 0x76, 0x0A, 0x96, 0x6C, 0x82, 0xCC, 0x82, 0xB1, 0x82, 0xC6, 0x82, 0xF0,
	0x82, 0xBB, 0x82, 0xA4, 0x8C, 0xC4, 0x82, 0xD4, 0x8E, 0x71, 0x82, 0xCD, 0x81, 0x41, 0x82, 0xBD,
	0x82, 0xC1, 0x82, 0xBD, 0x31, 0x90, 0x6C, 0x82, 0xB5, 0x82, 0xA9, 0x82, 0xA2, 0x82, 0xC8, 0x82,
	0xA9, 0x82, 0xC1, 0x82, 0xBD, 0x81, 0x42, 0x0A, 0x82, 0xBB, 0x82, 0xEA, 0x82, 0xCD, 0x20, 0x81,
	0x67, 0x82, 0xBF, 0x82, 0xB3, 0x81, 0x68, 0x20, 0x82, 0xC6, 0x93, 0xAF, 0x90, 0xA9, 0x93, 0xAF,
	0x96, 0xBC, 0x82, 0xCC, 0x96, 0xEC, 0x81, 0x58, 0x8B, 0x7B, 0x90, 0xE7, 0x8E, 0xD1, 0x82, 0xC5,
	0x82, 0xCD, 0x82, 0xC8, 0x82, 0xA2, 0x81, 0x42, 0x96, 0x6C, 0x82, 0xAA, 0x92, 0x6D, 0x82, 0xC1,
	0x82, 0xC4, 0x82, 0xA2, 0x82, 0xE9, 0x81, 0x41, 0x96, 0x6C, 0x82, 0xAA, 0x90, 0xCC, 0x92, 0x6D,
	0x82, 0xE8, 0x8D, 0x87, 0x82, 0xC1, 0x82, 0xBD, 0x81, 0x41, 0x96, 0x6C, 0x82, 0xAA, 0x8E, 0x80,
	0x82, 0xF1, 0x82, 0xBE, 0x82, 0xC6, 0x8E, 0x76, 0x82, 0xC1, 0x82, 0xC4, 0x82, 0xA2, 0x82, 0xBD,
	0x20, 0x96, 0xEC, 0x81, 0x58, 0x8B, 0x7B, 0x90, 0xE7, 0x8E, 0xD1, 0x81, 0x41, 0x82, 0xBD, 0x82,
	0xBE, 0x31, 0x90, 0x6C, 0x82, 0xBE, 0x82, 0xAF, 0x82, 0xBE, 0x82, 0xC1, 0x82, 0xBD, 0x81, 0x42,
	0x0A, 0x8A, 0xE7, 0x97, 0xA7, 0x82, 0xBF, 0x82, 0xE0, 0x81, 0x41, 0x90, 0x67, 0x92, 0xB7, 0x82,
	0xE0, 0x81, 0x41, 0x82, 0xBB, 0x82, 0xB5, 0x82, 0xC4, 0x8B, 0xB9, 0x82, 0xCC, 0x91, 0xE5, 0x82,
	0xAB, 0x82, 0xB3, 0x82, 0xE0, 0x88, 0xE1, 0x82, 0xC1, 0x82, 0xC4, 0x82, 0xBD, 0x81, 0x42, 0x81,
	0x40, 0x82, 0xC5, 0x82, 0xE0, 0x81, 0x41, 0x82, 0xBB, 0x82, 0xCC, 0x90, 0xE7, 0x8E, 0xD1, 0x82,
	0xCC, 0x8F, 0xCE, 0x8A, 0xE7, 0x82, 0xAA, 0x81, 0x41, 0x8B, 0x4C, 0x89, 0xAF, 0x82, 0xCC, 0x20,
	0x81, 0x67, 0x82, 0xBF, 0x82, 0xB3, 0x81, 0x68, 0x20, 0x82, 0xC6, 0x8F, 0x64, 0x82, 0xC8, 0x82,
	0xC1, 0x82, 0xBD, 0x81, 0x42, 0x0A, 0x82, 0xBB, 0x82, 0xEA, 0x82, 0xCD, 0x96, 0xB2, 0x82, 0xC5,
	0x82, 0xE0, 0x8C, 0xB6, 0x82, 0xC5, 0x82, 0xE0, 0x82, 0xC8, 0x82, 0xAD, 0x81, 0x41, 0x8C, 0xBB,
	0x8E, 0xC0, 0x82, 0xC6, 0x82, 0xB5, 0x82, 0xC4, 0x81, 0x41, 0x8A, 0x6D, 0x82, 0xA9, 0x82, 0xC9,
	0x81, 0x41, 0x82, 0xBB, 0x82, 0xB5, 0x82, 0xC4, 0x8E, 0xC0, 0x8D, 0xDB, 0x82, 0xC9, 0x81, 0x41,
	0x82, 0xB1, 0x82, 0xB1, 0x82, 0xC9, 0x82, 0xA0, 0x82, 0xC1, 0x82, 0xBD, 0x81, 0x42, 0x0A, 0x94,
	0x92, 0x82, 0xA2, 0x90, 0xA7, 0x95, 0x9E, 0x82, 0xAA, 0x94, 0x47, 0x82, 0xEA, 0x81, 0x41, 0x93,
	0xA7, 0x82, 0xAF, 0x82, 0xBD, 0x90, 0xE6, 0x82, 0xC9, 0x8C, 0xA9, 0x82, 0xA6, 0x82, 0xE9, 0x82,
	0xE0, 0x82, 0xCC, 0x82, 0xCD, 0x81, 0x41, 0x82, 0xC6, 0x82, 0xC4, 0x82, 0xE0, 0x90, 0x5F, 0x94,
	0xE9, 0x93, 0x49, 0x82, 0xC5, 0x81, 0x5C, 0x81, 0x5C, 0x81, 0x5C, 0x0A, 0x81, 0x5C, 0x81, 0x5C,
	0x81, 0x5C, 0x82, 0xC6, 0x82, 0xC4, 0x82, 0xE0, 0x83, 0x68, 0x83, 0x57, 0x82, 0xC1, 0x8E, 0x71,
	0x82, 0xBE, 0x82, 0xC1, 0x82, 0xBD, 0x81, 0x42, 0x98, 0x7A, 0x22, 0xBC, 0x55, 0xDB, 0xA0, 0xCF,
	0x94, 0x81, 0x5B, 0x8F, 0x5B, 0xC1, 0xF0, 0x3F, 0x19, 0x4D, 0x97, 0x5F, 0xAC, 0x56, 0x40, 0xF5,
	0xE6, 0xCD, 0xFD, 0x42, 0x29, 0x6C, 0x51, 0x20, 0xF9, 0xE4, 0x16, 0xE2, 0xAB, 0x1E, 0x92, 0xB9,
	0x3A, 0x28, 0xB5, 0x3B, 0x8E, 0x34, 0x97, 0xAC, 0xD1, 0xDD, 0xEC, 0x65, 0x0C, 0xB4, 0x7F, 0x21,
	0xE0, 0x49, 0xBF, 0xAD, 0xF0, 0x65, 0x08, 0x6D, 0x0A, 0xDF, 0x27, 0x6D, 0xD1, 0xDC, 0x01, 0xE6,
	0x1E, 0xFE, 0xAC, 0x1D, 0x7D, 0x2F, 0xE1, 0x8F, 0x3D, 0x3E, 0xC0, 0x96, 0x2E, 0x6C, 0xEE, 0x55,
	0x55, 0x85, 0x5D, 0x07, 0xA4, 0x3E, 0x7B, 0x63, 0x58, 0xDB, 0x95, 0x81, 0xDF, 0x26, 0x60, 0x59,
	0xE1, 0x33, 0x27, 0x6F, 0xD1, 0x42, 0x41, 0x98, 0x96, 0x63, 0xA4, 0x17, 0x82, 0x50, 0xBB, 0x15,
	0x56, 0x74, 0xE4, 0x5D, 0x2B, 0x88, 0xC6, 0x42, 0xC7, 0xD0, 0x58, 0xD5, 0x7C, 0x4E, 0x48, 0x6A,
	0x4E, 0x51, 0x70, 0x82, 0xB9, 0x00, 0xE8, 0x87, 0x29, 0x85, 0xC3, 0x20, 0x49, 0x76, 0xE9, 0x0E,
	0x83, 0x1F, 0x7B, 0x12, 0xAD, 0x58, 0x98, 0x0F, 0x0E, 0x35, 0x83, 0x72, 0xE8, 0x2A, 0x26, 0x47,
	0xC1, 0x72, 0xD7, 0xBB, 0x38, 0x01, 0xE2, 0x21, 0x58, 0x6E, 0x96, 0x81, 0xAE, 0x74, 0xBE, 0x3D,
	0x12, 0xE5, 0x9A, 0x5D, 0xD6, 0x97, 0xF5, 0x8C, 0x3A, 0xAA, 0x8E, 0xBD, 0x24, 0x75, 0x98, 0xDD,
	0x49, 0x75, 0xAE, 0xD1, 0xA4, 0xB0, 0xCB, 0xBD, 0x98, 0x90, 0xAE, 0x89, 0x1B, 0xC7, 0x44, 0x63,
	0xD0, 0x26, 0xCE, 0xB8, 0x28, 0x15, 0x23, 0xE8, 0x28, 0xF2, 0xF0, 0xD4, 0xB6, 0xEF, 0x13, 0xF0,
	0x0A, 0x7E, 0xDB, 0xD4, 0xA9, 0xDC, 0x15, 0x1C, 0x71, 0xEF, 0xED, 0x9E, 0x80, 0xC2, 0xD8, 0x47,
	0x98, 0x18, 0xA7, 0x71, 0x77, 0x23, 0x2D, 0x92, 0x0D, 0xD2, 0xA7, 0xB1, 0xF8, 0x98, 0xB0, 0x1B,
	0x4F, 0x43, 0x98, 0x10, 0xC5, 0x2B, 0xC3, 0xBC, 0x02, 0xD3, 0xCC, 0xBB, 0xA1, 0xB8, 0xEC, 0xC2,
	0xDF, 0x03, 0xB8, 0x2B, 0xED, 0x85, 0x73, 0xB9, 0x1F, 0x15, 0x45, 0x20, 0x17, 0x99, 0x99, 0x37,
	0x62, 0x1F, 0x34, 0xAD, 0x4A, 0xC3, 0x2F, 0x13, 0xAD, 0x48, 0xC7, 0xAA, 0x16, 0xD1, 0x47, 0x93,
	0xAA, 0x44, 0x2D, 0x1B, 0xB6, 0x65, 0xE6, 0x78, 0x5B, 0x09, 0xAF, 0x2F, 0x95, 0xAA, 0x81, 0xF5,
	0x54, 0x02, 0x84, 0x21, 0x92, 0x50, 0xC7, 0xE8, 0x55, 0x6E, 0xDB, 0x11, 0xCB, 0xCC, 0xC2, 0x3B,
	0x44, 0x8F, 0x7F, 0x0E, 0x41, 0x52, 0xCF, 0xF8, 0x9D, 0x4F, 0x5F, 0xF1, 0xC8, 0xCE, 0x98, 0x28,
	0x18, 0x20, 0x5A, 0x79, 0x34, 0xD1, 0x4B, 0xAA, 0xB5, 0x3A, 0x9E, 0x51, 0xFF, 0xA7, 0x8D, 0xB1,
	0xF9, 0x95, 0xC1, 0x50, 0xE5, 0x9D, 0x07, 0x69, 0x6B, 0x6D, 0xD3, 0x0F, 0xD9, 0x43, 0xF9, 0x79,
	0x48, 0x6F, 0x73, 0xD6, 0xB0, 0x5C, 0xC1, 0x9A, 0x58, 0x23, 0xF7, 0xA6, 0xC5, 0xF9, 0x98, 0x3D,
	0xEF, 0xE2, 0x56, 0x75, 0xCB, 0xAB, 0xC0, 0x3D, 0xCD, 0xC0, 0x0B, 0x12, 0x47, 0x62, 0x50, 0x54,
	0x00, 0xF9, 0xEE, 0x5C, 0xDA, 0x46, 0x71, 0x3B, 0xA2, 0x76, 0x60, 0x9D, 0x07, 0x29, 0x9A, 0x4E,
	0x99, 0x93, 0xB8, 0xE2, 0xDE, 0x69, 0x3A, 0x3A, 0x8C, 0x23, 0x6E, 0x9D, 0x63, 0x25, 0x3C, 0x28,
	0x1F, 0xEF, 0xEE, 0x43, 0x47, 0xFB, 0xF8, 0x67, 0x46, 0xE2, 0x2A, 0xD7, 0x7F, 0x73, 0x6C, 0x75,
	0xC3, 0x57, 0xE2, 0x23, 0x21, 0xFF, 0x0E, 0xCC, 0xBA, 0x4A, 0x75, 0xD0, 0x05, 0x9C, 0xF0, 0xAA,
	0xCC, 0xC5, 0x97, 0xD9, 0x24, 0x0B, 0x08, 0xCC, 0xD0, 0xEE, 0x39, 0x0A, 0x6F, 0x2A, 0x3E, 0x1A,
	0xBC, 0xB6, 0xD6, 0x95, 0x26, 0x42, 0x18, 0xB3, 0xE7, 0xFB, 0x5D, 0xE4, 0x43, 0x18, 0x07, 0xE1,
	0x2D, 0xEF, 0xA6, 0xED, 0x5E, 0x9C, 0xA5, 0x5A, 0x1A, 0x1E, 0xC2, 0xEF, 0xD8, 0xE1, 0x40, 0x97,
	0xE3, 0x37, 0xF6, 0x5B, 0x19, 0x98, 0xF3, 0x70, 0xCC, 0x3F, 0xB9, 0x25, 0x9D, 0x31, 0x9B, 0xF8,
	0x8D, 0xCB, 0xD8, 0x63, 0x37, 0x91, 0x9A, 0xD4, 0x58, 0x51, 0x14, 0x52, 0x54, 0xC1, 0x39, 0x86,
	0x42, 0x38, 0x8E, 0x9C, 0x64, 0xAA, 0x96, 0x0C, 0x83, 0x35, 0x2B, 0x61, 0x65, 0x0F, 0x1B, 0x71,
	0x9F, 0xB7, 0xF0, 0xB5, 0xD8, 0x1B, 0x71, 0xA5, 0x3F, 0x77, 0x7D, 0x98, 0x8D, 0xC8, 0x74, 0x6D,
	0xE1, 0xAB, 0x68, 0x91, 0x79, 0x65, 0x86, 0x1E, 0x6F, 0x50, 0xB2, 0xFC, 0x2F, 0x85, 0xCF, 0x8F,
	0xD8, 0x55, 0x15, 0xDE, 0xAB, 0xF4, 0x5C, 0x0B, 0xC7, 0x43, 0x4F, 0xA3, 0xC4, 0xF5, 0x8C, 0xE0,
	0x0F, 0xC4, 0x87, 0x8A, 0x1D, 0xCC, 0x1F, 0x2A, 0x6E, 0x04, 0x87, 0xEE, 0x27, 0x22, 0xFA, 0x6A,
	0x2C, 0xEE, 0xD0, 0xEE, 0x9E, 0x04, 0xB2, 0x04, 0x7D, 0x2F, 0x74, 0x6D, 0xCC, 0x9C, 0x46, 0x7A,
	0xAF, 0xCC, 0xBB, 0xD8, 0xE9, 0x02, 0xCF, 0x70, 0xBC, 0x1D, 0xFD, 0xB1, 0x3A, 0xFE, 0x7C, 0xEE,
	0xEC, 0x5D, 0xB2, 0x5B, 0x75, 0x72, 0x0A, 0x18, 0x04, 0x44, 0xA6, 0x86, 0x0D, 0x77, 0xF6, 0x18,
	0xB6, 0xE2, 0x82, 0xE2, 0xC8, 0xC5, 0xDA, 0x76, 0xE1, 0xF8, 0x4B, 0xD5, 0xDA, 0x93, 0x02, 0xCA,
	0x35, 0x40, 0x4B, 0xAD, 0x45, 0xE7, 0xC2, 0x8E, 0x10, 0xB5, 0xB5, 0xFC, 0xB4, 0xC4, 0x7A, 0xEB,
	0x2E, 0x24, 0x15, 0x72, 0x7D, 0x8F, 0xC8, 0x29, 0xBE, 0x07, 0xA9, 0x7F, 0x9A, 0x63, 0xD3, 0x83,
	0xFD, 0x4B, 0x44, 0x6F, 0x7B, 0x27, 0x0A, 0x82, 0xEA, 0x46, 0x75, 0xF6, 0x6F, 0x7F, 0x2A, 0x4B,
	0x37, 0x0A, 0xC4, 0x68, 0x9B, 0x72, 0xE1, 0x87, 0xB6, 0x13, 0x53, 0xD5, 0x78, 0x2A, 0x36, 0x70,
	0x3C, 0x06, 0x95, 0xF4, 0x54, 0x32, 0xA8, 0xB6, 0xA2, 0xFE, 0x3C, 0xAE, 0x43, 0x52, 0x7D, 0x61,
	0x82, 0x1C, 0x78, 0x24, 0x0C, 0xD6, 0x95, 0x94, 0x3F, 0xE3, 0x1E, 0x91, 0x30, 0x55, 0x45, 0x2E,
	0x7D, 0x7A, 0xCF, 0x5E, 0x63, 0xEF, 0xB5, 0xC0, 0x45, 0xA9, 0xC7, 0xAF, 0x87, 0xA4, 0x35, 0x1B,
	0x07, 0xF6, 0xD4, 0x4F, 0x8C, 0xA3, 0xAA, 0x15, 0x77, 0x15, 0xAD, 0x54, 0x03, 0x5B, 0x42, 0x2C,
	0x72, 0x88, 0x83, 0x28, 0x41, 0xAE, 0x8E, 0x78, 0x0B, 0xA8, 0xB4, 0xDE, 0x67, 0xDF, 0xB0, 0x3A,
	0x3D, 0x0C, 0xD9, 0x60, 0xAC, 0x47, 0xE3, 0x26, 0xFB, 0x5E, 0xBB, 0xD2, 0x07, 0xFE, 0xB2, 0xFE,
	0x4E, 0xA2, 0xC7, 0x8A, 0x46, 0xAB, 0xD4, 0x0A, 0xBE, 0x7F, 0xA9, 0xDC, 0xE3, 0x57, 0xCA, 0x55,
	0xF6, 0xD0, 0x14, 0x79, 0x82, 0x02, 0x9E, 0x37, 0x2F, 0xB2, 0x05, 0xC2, 0x27, 0x3D, 0x5A, 0x0D,
	0x0B, 0x4F, 0x17, 0x99, 0xB1, 0x2B, 0xCA, 0xF8, 0xA9, 0x46, 0xCC, 0xA7, 0x4E, 0xAF, 0xB4, 0x46,
	0x51, 0x8E, 0xEC, 0x3B, 0xE4, 0xFC, 0x39, 0xF9, 0x8A, 0x1B, 0x4C, 0x1F, 0xD1, 0xB0, 0xD9, 0x03,
	0x33, 0xEC, 0x81, 0xB7, 0x97, 0xD5, 0x5C, 0x07, 0xEF, 0x59, 0xD8, 0x8A, 0x50, 0x90, 0xC7, 0xBA,
	0xC7, 0x21, 0x89, 0xCB, 0x43, 0xAE, 0x65, 0xF3, 0x97, 0xC8, 0x35, 0xB7, 0xB4, 0x91, 0xDD, 0x92,
	0x68, 0xD7, 0xD7, 0xDD, 0xCD, 0x26, 0xB7, 0x4F, 0x03, 0x59, 0xDE, 0xE5, 0x17, 0xA7, 0x9A, 0xB4,
	0xA0, 0x2C, 0xA6, 0xF6, 0x9B, 0x95, 0x7D, 0xD0, 0x76, 0xAC, 0xCB, 0x00, 0xE8, 0xB1, 0x6B, 0xAC,
	0x5E, 0x42, 0x41, 0x98, 0x3E, 0x1D, 0x7A, 0x3F, 0xB2, 0x2A, 0x80, 0x31, 0x10, 0xF3, 0x0D, 0xF9,
	0xFC, 0x62, 0x65, 0x89, 0x84, 0x34, 0x19, 0x10, 0x5A, 0x3A, 0x9B, 0x71, 0xD8, 0x20, 0x4B, 0x1A,
	0x0D, 0x76, 0x76, 0x77, 0x68, 0x8C, 0x5A, 0x05, 0x47, 0x42, 0xE7, 0xE5, 0x8F, 0x5B, 0xD1, 0xA2,
	0x7D, 0x1E, 0x6B, 0xD5, 0x56, 0x5F, 0x99, 0xF6, 0x3C, 0x50, 0x37, 0x34, 0xAE, 0xB8, 0x89, 0xC7,
	0xF1, 0xFE, 0x8A, 0x1F, 0x60, 0x5D, 0x73, 0x27, 0x21, 0xBF, 0x3D, 0x8F, 0x3E, 0x48, 0xAC, 0x20,
	0x58, 0xCC, 0xDF, 0xD3, 0xBC, 0x50, 0x7F, 0x97, 0x94, 0xCA, 0x44, 0x89, 0xB0, 0xDE, 0x54, 0xF5,
	0x2A, 0xF7, 0xCB, 0x19, 0x7C, 0xBB, 0xDF, 0xFF, 0xCA, 0x52, 0x12, 0xD0, 0x06, 0x62, 0x3A, 0x23,
	0x68, 0x9E, 0xFF, 0xCC, 0xCA, 0xC6, 0xA5, 0xE0, 0x82, 0xCA, 0x6C, 0x13, 0x2F, 0x27, 0xB3, 0x26,
	0xEE, 0xD8, 0xA1, 0x01, 0x15, 0x65, 0x0F, 0x29, 0x49, 0x6E, 0x0C, 0xCE, 0x6A, 0xFF, 0x25, 0x2F,
	0x0D, 0x89, 0xDA, 0x4F, 0x53, 0xC1, 0x94, 0xFF, 0xBC, 0x97, 0xDB, 0xDA, 0x1A, 0xE2, 0x29, 0x31,
	0xF3, 0x14, 0xD7, 0xF7, 0x5C, 0xEF, 0x1A, 0x15, 0x6B, 0x9A, 0x8E, 0xC2, 0x2B, 0x32, 0x73, 0xF1,
	0xE7, 0x47, 0x96, 0xEE, 0x30, 0x68, 0x2A, 0x76, 0xF6, 0x0B, 0x24, 0x7A, 0x6A, 0xE5, 0x58, 0x45,
	0xC8, 0xF8, 0xBB, 0x60, 0xD2, 0xC0, 0xD9, 0xD9, 0x11, 0x35, 0x57, 0x79, 0xE0, 0x13, 0xE9, 0x66,
	0x2C, 0x22, 0xAB, 0x50, 0x0E, 0xA4, 0xEB, 0x9E, 0x3F, 0x44, 0x3C, 0x42, 0xB5, 0x6D, 0x2A, 0x50,
	0xC9, 0x33, 0xA0, 0xA5, 0x4F, 0xD6, 0x67, 0x5F, 0xB2, 0x9D, 0xE6, 0x46, 0x08, 0x9E, 0x10, 0x4F,
	0x29, 0x8E, 0xA5, 0xFD, 0x6D, 0xE2, 0xEE, 0x90, 0xF1, 0xA4, 0x9D, 0x04, 0xCE, 0x39, 0xA9, 0x95,
	0xAF, 0xCA, 0xEC, 0xC1, 0xFD, 0x6E, 0xB7, 0x52, 0x55, 0x87, 0x4C, 0x8D, 0x61, 0x25, 0xC6, 0x74,
	0xEA, 0x90, 0x16, 0x97, 0x22, 0xF5, 0x1F, 0x3C, 0x45, 0x21, 0xC4, 0xBA, 0x10, 0xC9, 0x59, 0xAE,
	0xB1, 0x41, 0xD9, 0x14, 0x5C, 0x5D, 0x4D, 0x64, 0xCA, 0xBB, 0x84, 0x96, 0x30, 0xFD, 0x7E, 0xDC,
	0x02, 0x70, 0x90, 0xBF, 0xD6, 0x02, 0x2D, 0xE5, 0x6E, 0xD6, 0x44, 0xAD, 0x29, 0x46, 0x16, 0xF6,
	0x98, 0x26, 0xB7, 0x95, 0xBD, 0xCA, 0x02, 0xD8, 0x5F, 0xC5, 0x88, 0x42, 0x8A, 0x4C, 0xFE, 0xE7,
	0xA7, 0x8C, 0xBF, 0x5B, 0x38, 0x32, 0x89, 0x91, 0xEA, 0x71, 0x80, 0x6E, 0x99, 0x99, 0xE2, 0x1C,
	0x58, 0x86, 0xD9, 0x3A, 0x48, 0x30, 0x74, 0xD9, 0x8C, 0xC5, 0x57, 0x70, 0xDE, 0x53, 0x1F, 0x95,
	0x72, 0x15, 0x9C, 0xD5, 0xB4, 0x03, 0xFC, 0x9B, 0x15, 0x63, 0x73, 0x8F, 0xB7, 0xB1, 0x80, 0xA5,
	0x65, 0x14, 0x13, 0xC1, 0x29, 0x22, 0x02, 0xD5, 0xD9, 0x7F, 0xD5, 0x47, 0x69, 0x8E, 0x90, 0x3F,
	0xC5, 0x40, 0x3A, 0xAC, 0xA2, 0x89, 0xDF, 0x33, 0x76, 0xE4, 0xEA, 0x39, 0xAD, 0x62, 0x78, 0x28,
	0x75, 0x29, 0xA0, 0x38, 0xCB, 0xEF, 0xE4, 0x79, 0xD3, 0xCC, 0xFB, 0xEF, 0xC1, 0x15, 0xC3, 0x7C,
	0x7F, 0x96, 0x7B, 0xC2, 0xAB, 0x16, 0xE4, 0x9A, 0x93, 0xBC, 0x47, 0x75, 0xF9, 0xD1, 0xA7, 0x53,
	0x57, 0x9F, 0x52, 0xD7, 0x35, 0x82, 0xE0, 0xDE, 0x5D, 0x47, 0x81, 0xA5, 0x4D, 0x4F, 0x6E, 0xBB,
	0xD8, 0xB4, 0x5B, 0x0E, 0x3B, 0x16, 0xFC, 0x79, 0xE8, 0x0C, 0x70, 0xE5, 0x1C, 0xAA, 0xFC, 0xD3,
	0x69, 0x57, 0xB6, 0xD4, 0xFB, 0x96, 0xE4, 0x5B, 0x2A, 0x52, 0x7A, 0x8B, 0xF9, 0x79, 0xE9, 0x3E,
	0x89, 0x7D, 0xD4, 0x8B, 0x52, 0x45, 0xDE, 0x3A, 0x71, 0xF3, 0xCE, 0xAC, 0x5C, 0xEA, 0xBB, 0xEF,
	0xA0, 0x31, 0x38, 0xEB, 0xC9, 0x6A, 0xB3, 0x8B, 0xC6, 0x90, 0xB8, 0xD8, 0xF3, 0xE5, 0x66, 0x8B,
	0x60, 0xE3, 0xE7, 0x45, 0x86, 0xB6, 0xE5, 0xBC, 0xD4, 0x69, 0xDE, 0x7F, 0x62, 0xF4, 0x6D, 0x7C,
	0x85, 0x66, 0xCE, 0x7D, 0xDD, 0x12, 0x40, 0x72, 0xBC, 0xB9, 0xA3, 0xC3, 0x51, 0xA5, 0x93, 0x7C,
	0xD2, 0x01, 0x79, 0xB0, 0x7F, 0x8F, 0x91, 0x31, 0x18, 0x78, 0x72, 0x2D, 0x2F, 0xB2, 0xDD, 0xA7,
	0x64, 0x11, 0x4A, 0xF1, 0x0A, 0x36, 0x53, 0xA4, 0xAC, 0x28, 0x06, 0x9A, 0x7B, 0xE4, 0xBA, 0x0D,
	0xD2, 0xB5, 0x03, 0xD4, 0xAB, 0x38, 0x25, 0xF1, 0xD8, 0x3C, 0x70, 0x03, 0x00, 0xFA, 0xFA, 0xF1,
	0x8D, 0xA1, 0xBC, 0xAB, 0xE8, 0xC0, 0x5C, 0x3A, 0x5F, 0xD0, 0x31, 0x40, 0x1B, 0x9E, 0xF1, 0x93,
	0x9D, 0x5E, 0xBF, 0xE9, 0xF9, 0x30, 0x26, 0x27, 0x75, 0x7A, 0x91, 0x65, 0xAF, 0x0C, 0x0C, 0x9C,
	0xF3, 0x09, 0x4B, 0x3A, 0x11, 0x32, 0x0B, 0x90, 0x1D, 0xE3, 0x77, 0x18, 0xF2, 0xD3, 0xE9, 0xA2,
	0x4E, 0xC3, 0x41, 0xAE, 0x7E, 0x48, 0xF2, 0x42, 0x4F, 0xB9, 0x22, 0x4B, 0x22, 0x8D, 0xD6, 0x41,
	0xA2, 0x91, 0x34, 0x7D, 0x72, 0x5E, 0x54, 0x57, 0xF2, 0x2A, 0x41, 0x1D, 0x03, 0x57, 0x53, 0xD5,
	0x2A, 0x2D, 0xDC, 0x86, 0x35, 0x57, 0x27, 0x03, 0xA0, 0x30, 0xF6, 0x2F, 0xDA, 0xE0, 0xB9, 0x4C,
	0xA2, 0x13, 0xF2, 0x1B, 0xD1, 0xEC, 0x4F, 0x16, 0x81, 0xC1, 0xC8, 0xDD, 0x26, 0xE5, 0x34, 0x89,
	0x28, 0xA8, 0xF7, 0xA6, 0xD8, 0x03, 0x27, 0x04, 0x71, 0xBE, 0x62, 0xA1, 0x18, 0xB4, 0xE0, 0xED,
	0x56, 0xAF, 0x2A, 0xBA, 0xC2, 0x19, 0x6D, 0x62, 0xFD, 0xC8, 0xDD, 0x67, 0x97, 0xB9, 0xE8, 0xF0,
	0xF0, 0xE5, 0xE1, 0x8B, 0xAA, 0x0F, 0xF9, 0x1D, 0x23, 0xE7, 0x4F, 0xC6, 0xA1, 0x74, 0x93, 0x27,
	0xA2, 0x49, 0x52, 0x97, 0x31, 0x62, 0x1B, 0xBB, 0x31, 0xB3, 0x24, 0x62, 0xD6, 0x51, 0x4B, 0xDF,
	0xD1, 0xAB, 0x6A, 0x80, 0xEF, 0xF9, 0xCA, 0x7F, 0x1A, 0x60, 0x7A, 0x92, 0x8F, 0x73, 0x99, 0x54,
	0xFC, 0x55, 0x95, 0x52, 0x5D, 0xDD, 0x62, 0xE2, 0xAC, 0x8B, 0x54, 0x58, 0x67, 0x56, 0xD2, 0x82,
	0x7D, 0x02, 0x65, 0xAB, 0xAF, 0xD7, 0x87, 0xAC, 0xCA, 0xA1, 0xB5, 0xD4, 0xD0, 0xE9, 0x0C, 0x8D,
	0x83, 0x71, 0x6E, 0xA1, 0x58, 0x71, 0xC7, 0x0B, 0xFB, 0x6A, 0xA9, 0x65, 0x21, 0xAE, 0x3F, 0x46,
	0x3A, 0x37, 0x0B, 0xF0, 0x57, 0x13, 0xE4, 0x6A, 0xD2, 0xCC, 0xA6, 0x19, 0xA6, 0x02, 0xAF, 0xC3,
	0xD7, 0x4B, 0x85, 0xBB, 0x09, 0x8A, 0xA9, 0x3E, 0xD6, 0xC4, 0x61, 0x2B, 0xAF, 0xC5, 0xF0, 0x9D,
	0x15, 0xAB, 0xAA, 0x8A, 0xF8, 0x6B, 0xE7, 0x56, 0xCF, 0x10, 0x07, 0xC6, 0xA6, 0xE9, 0x84, 0xBC,
	0x5B, 0xD7, 0xBD, 0xEC, 0x5C, 0xE6, 0x08, 0x29, 0x06, 0x89, 0x52, 0x91, 0x13, 0x6C, 0xC0, 0x8B,
	0x18, 0x64, 0x82, 0x07, 0xA9, 0x31, 0x2D, 0xAC, 0x25, 0xB5, 0xE4, 0x11, 0xBA, 0xB3, 0x54, 0xCC,
	0x88, 0x4C, 0x41, 0x16, 0x7E, 0x29, 0x2C, 0xCD, 0x58, 0x84, 0x21, 0x7E, 0x1F, 0xCA, 0x62, 0xFD,
	0x2A, 0xFA, 0x66, 0x0A, 0x3E, 0xF9, 0xA3, 0x82, 0xCB, 0xD5, 0x60, 0xF8, 0xA0, 0x46, 0xBB, 0x63,
	0x6A, 0xF3, 0x90, 0x9C, 0x34, 0x7E, 0x1A, 0x6F, 0x6D, 0x10, 0x8B, 0x70, 0xAD, 0x86, 0xAD, 0xA0,
	0xFC, 0xCC, 0x90, 0xCA, 0xA8, 0xEF, 0xCD, 0xAD, 0x4D, 0x8D, 0x20, 0xC6, 0x6A, 0x8D, 0xE8, 0x6D,
	0xA1, 0xBE, 0x8C, 0x77, 0x52, 0xCC, 0xB2, 0x27, 0xBB, 0xCE, 0x9E, 0xC8, 0xD5, 0x4C, 0x3B, 0xE4,
	0x1D, 0x7A, 0x0C, 0x00, 0x66, 0x8F, 0x82, 0x0A, 0x49, 0xD0, 0x4D, 0xF1, 0x2E, 0xC6, 0x60, 0x71,
	0xE2, 0xAF, 0x2D, 0x34, 0x45, 0x26, 0xE3, 0xE3, 0x0B, 0xF0, 0x00, 0x7D, 0x1A, 0x1D, 0xE8, 0xA1,
	0x68, 0xB8, 0xFB, 0x7B, 0x0D, 0x2A, 0xDD, 0x36, 0x73, 0xA5, 0x26, 0xF2, 0xC5, 0x94, 0xEC, 0x85,
	0xF5, 0x8E, 0xDC, 0x62, 0x8A, 0xDE, 0xF3, 0xD3, 0xAA, 0x02, 0x27, 0x07, 0x4F, 0x5E, 0x68, 0xC0,
	0x12, 0x92, 0x82, 0x1E, 0xC5, 0xA9, 0x3D, 0x23, 0x44, 0xD5, 0xBA, 0x41, 0xED, 0x1F, 0x16, 0x96,
	0xB6, 0x65, 0x98, 0xA6, 0xB5, 0x4C, 0x3B, 0xFC, 0x79, 0x0C, 0x50, 0xF4, 0x8B, 0x79, 0x00, 0xAF
};

//ok
int xcode_building_first_stage(struct CxdecXcodeStatus *xcode)
{
	switch (xcode_rand(xcode) % 3)
	{
		//1E00160C 
	case 1:
		/*
		1E001635        8B56 10     mov edx,dword ptr [esi+10]  ;EncryptionControlBlock
		1E001638        8BCE        mov ecx,esi
		1E00163A        52          push edx
		1E00163B        E8 90FEFFFF call 1E0014D0
		*/

		//1E0012C0
		if (!push_bytexcode(xcode, 0xbe)
			//1E0014D0
			//Block 1E001635        8B56 10     mov edx,dword ptr [esi+10]
			|| !push_dwordxcode(xcode, (DWORD)EncryptionControlBlock)
			//1E0012F0
			|| !push_2bytesxcode(xcode, 0x8b, 0x86)

			//rand E001270
			//1E0014D0
			|| !push_dwordxcode(xcode, (xcode_rand(xcode) & 0x3ff) << 2))
			return 0;
		break;

		//1E001623
	case 2:
		// MOV EAX, EDI
		if (!push_2bytesxcode(xcode, 0x8b, 0xc7))
			return 0;
		break;

		//1E001681
	case 0:
		// MOV EAX, xcode_rand(xcode)
		if (!push_bytexcode(xcode, 0xb8)
			|| !push_dwordxcode(xcode, xcode_rand(xcode)))
			return 0;
		break;
	}
	return 1;
}

int xcode_building_stage0(struct CxdecXcodeStatus *xcode, int stage)
{
	if (stage == 1)
		return xcode_building_first_stage(xcode);

	if (xcode_rand(xcode) & 1)
	{
		if (!xcode_building_stage1(xcode, stage - 1))
			return 0;
	}
	else
	{
		if (!xcode_building_stage0(xcode, stage - 1))
			return 0;
	}

	//1E0016EE        83E0 07     and eax,00000007
	switch (xcode_rand(xcode) & 7)
	{
		//1E0016F1
	case 7:
		// NOT EAX
		if (!push_2bytesxcode(xcode, 0xf7, 0xd8))
			return 0;

		//1E00171C        C2 0400     retn 4
		break;

		//jmp dword ptr [eax*4+1E0018D8]

		//1E00173D
		//ok
	case 3:
		// MOV ESI, EncryptionControlBlock
		// AND EAX, 3FFh
		// MOV EAX, DWORD PTR DS:[ESI+EAX*4]

		if (xcode_rand(xcode) & 1)
		{
			// ADD EAX, xcode_rand(xcode)
			if (!push_bytexcode(xcode, 0x05))
				return 0;
		}
		else
		{
			// SUB EAX, xcode_rand(xcode)
			if (!push_bytexcode(xcode, 0x2d))
				return 0;
		}
		if (!push_dwordxcode(xcode, xcode_rand(xcode)))
			return 0;


		break;

		//

		//1E001701 0
		//1E001755 1
		//1E00173D 2
		//1E001816 3
		//1E001858 4
		//1E001759 5
		//1E001804 6
		//1E00171F 7
		//Error Handle 1E0018C2

		//ok
	case 0:
		// DEC EAX
		if (!push_2bytesxcode(xcode, 0xf7, 0xd0))
			return 0;
		break;

		//ok
	case 6:
		// NEG EAX
		if (!push_bytexcode(xcode, 0x35)
			|| !push_dwordxcode(xcode, xcode_rand(xcode)))
			return 0;
		break;

		//ok
	case 4:

		if (!push_bytexcode(xcode, 0xbe)
			|| !push_dwordxcode(xcode, (DWORD)EncryptionControlBlock)
			|| !push_bytexcode(xcode, 0x25)
			|| !push_dwordxcode(xcode, 0x3ff)
			|| !push_3bytesxcode(xcode, 0x8b, 0x04, 0x86))
			return 0;
		break;

		//ok
	case 5:
		// PUSH EBX
		// MOV EBX, EAX
		// AND EBX, AAAAAAAA
		// AND EAX, 55555555
		// SHR EBX, 1
		// SHL EAX, 1
		// OR EAX, EBX
		// POP EBX
		if (!push_bytexcode(xcode, 0x53)
			|| !push_2bytesxcode(xcode, 0x89, 0xc3)
			|| !push_6bytesxcode(xcode, 0x81, 0xe3, 0xaa, 0xaa, 0xaa, 0xaa)
			|| !push_5bytesxcode(xcode, 0x25, 0x55, 0x55, 0x55, 0x55)
			|| !push_2bytesxcode(xcode, 0xd1, 0xeb)
			|| !push_2bytesxcode(xcode, 0xd1, 0xe0)
			|| !push_2bytesxcode(xcode, 0x09, 0xd8)
			|| !push_bytexcode(xcode, 0x5b))
			return 0;
		break;

		//ok
	case 2:
		// INC EAX
		if (!push_bytexcode(xcode, 0x40))
			return 0;
		break;

		//ok
	case 1:
		// XOR EAX, xcode_rand(xcode)
		if (!push_bytexcode(xcode, 0x48))
			return 0;
		break;
	}
	return 1;
}

int xcode_building_stage1(struct CxdecXcodeStatus *xcode, int stage)
{
	if (stage == 1)
		return xcode_building_first_stage(xcode);

	// PUSH EBX
	if (!push_bytexcode(xcode, 0x53))
		return 0;

	if (xcode_rand(xcode) & 1)
	{
		if (!xcode_building_stage1(xcode, stage - 1))
			return 0;
	}
	else
	{
		if (!xcode_building_stage0(xcode, stage - 1))
			return 0;
	}

	// MOV EBX, EAX
	if (!push_2bytesxcode(xcode, 0x89, 0xc3))
		return 0;

	if (xcode_rand(xcode) & 1)
	{
		if (!xcode_building_stage1(xcode, stage - 1))
			return 0;
	}
	else
	{
		if (!xcode_building_stage0(xcode, stage - 1))
			return 0;
	}

	//1E0019A3        B9 06000000 mov ecx,6

	//Jmp Table jmp dword ptr [edx*4+1E001AE4]
	//1E0019BA 0
	//1E001A62 1
	//1E0019D7 2
	//1E0019E0 3
	//1E001A0F 4
	//1E0019FA 5 

	switch (xcode_rand(xcode) % 6)
	{
	case 2:
		// SUB EAX, EBX
		if (!push_2bytesxcode(xcode, 0x29, 0xd8))
			return 0;
		break;

	case 0:
		// ADD EAX, EBX
		if (!push_2bytesxcode(xcode, 0x01, 0xd8))
			return 0;
		break;

	case 1:
		// PUSH ECX
		// MOV ECX, EBX
		// AND ECX, 0F
		// SHR EAX, CL
		// POP ECX
		if (!push_bytexcode(xcode, 0x51)
			|| !push_2bytesxcode(xcode, 0x89, 0xd9)
			|| !push_3bytesxcode(xcode, 0x83, 0xe1, 0x0f)
			|| !push_2bytesxcode(xcode, 0xd3, 0xe8)
			|| !push_bytexcode(xcode, 0x59))
			return 0;
		break;


	case 4:
		// PUSH ECX
		// MOV ECX, EBX
		// AND ECX, 0F
		// SHL EAX, CL
		// POP ECX
		if (!push_bytexcode(xcode, 0x51)
			|| !push_2bytesxcode(xcode, 0x89, 0xd9)
			|| !push_3bytesxcode(xcode, 0x83, 0xe1, 0x0f)
			|| !push_2bytesxcode(xcode, 0xd3, 0xe0)
			|| !push_bytexcode(xcode, 0x59))
			return 0;
		break;

	case 5:
		// IMUL EAX, EBX
		if (!push_3bytesxcode(xcode, 0x0f, 0xaf, 0xc3))
			return 0;
		break;

		//?
	case 3:
		// NEG EAX, ADD EAX, EBX
		if (!push_2bytesxcode(xcode, 0xf7, 0xd8)
			|| !push_2bytesxcode(xcode, 0x01, 0xd8))
			return 0;
		break;
	}
	// POP EBX
	return push_bytexcode(xcode, 0x5b);
}

