#include <windows.h>
#include <stdio.h>
unsigned char pck_xor_table[256] = {
	    0x46, 0xF7, 0x6F, 0xDE, 0x8F, 0x76, 0xA3, 0x40, 0xD3, 0x8A, 0x38, 0x39, 0xC2, 0x4A, 0x25, 0x4A, 
		0x81, 0x40, 0xAB, 0xFB, 0xA5, 0x33, 0x88, 0x8F, 0x81, 0x6A, 0x7F, 0xA8, 0xB1, 0xA2, 0x85, 0x6C, 
		0x94, 0x87, 0x07, 0x0D, 0x2A, 0xEB, 0x59, 0x62, 0xEA, 0x77, 0xF8, 0xB5, 0x84, 0x31, 0x1F, 0x1B, 
		0x78, 0xB9, 0x44, 0x6F, 0x57, 0x5B, 0x08, 0x05, 0x9F, 0x4C, 0x5C, 0x18, 0x44, 0x78, 0xFF, 0x80, 
		0xE3, 0x95, 0x87, 0x17, 0x39, 0xF0, 0x83, 0x99, 0x68, 0xB8, 0x65, 0x3A, 0x86, 0x03, 0x01, 0xCC, 
		0x21, 0xC7, 0x60, 0x28, 0xF4, 0xF1, 0x74, 0xF2, 0xE1, 0xB7, 0x32, 0x38, 0x8A, 0x1B, 0x09, 0xF8, 
		0xA7, 0x68, 0xAD, 0x97, 0xFF, 0xCD, 0x6F, 0x5F, 0x02, 0xCA, 0x82, 0xC8, 0xFD, 0xE3, 0x89, 0xD3, 
		0xC7, 0x0C, 0x05, 0x44, 0x83, 0xAC, 0xBF, 0x2E, 0xC6, 0xC1, 0x56, 0x5B, 0x4F, 0x4E, 0x07, 0x60, 
		0x83, 0x2C, 0xC1, 0x00, 0x53, 0x41, 0x7D, 0xE4, 0xF5, 0x55, 0x0A, 0x4A, 0x7D, 0x5A, 0x96, 0xEE, 
		0x99, 0xE7, 0x60, 0x26, 0xEC, 0x7F, 0x9A, 0x64, 0x4D, 0x96, 0xD7, 0x83, 0x2E, 0x7F, 0x13, 0x33, 
		0x6D, 0xC0, 0x01, 0x5F, 0xFF, 0xA4, 0xD9, 0x82, 0xE4, 0x09, 0x31, 0x7B, 0x50, 0x06, 0x21, 0xB2, 
		0x4A, 0x00, 0xF0, 0xB4, 0x75, 0xE4, 0xC1, 0xD1, 0xC2, 0xEC, 0x7B, 0xBF, 0x34, 0x00, 0x2D, 0x3A, 
		0x41, 0x09, 0xAD, 0x1D, 0xEE, 0x90, 0x28, 0x17, 0x3C, 0xAA, 0xEF, 0xC1, 0x6F, 0xDD, 0xE5, 0x95, 
		0xA9, 0x22, 0x67, 0x1C, 0x7A, 0xC0, 0x74, 0x99, 0xC8, 0xAE, 0x44, 0x9B, 0xEC, 0x40, 0x6E, 0xEC, 
		0x88, 0xEC, 0x3C, 0x0F, 0xCA, 0x54, 0xF7, 0xF3, 0xE6, 0x0A, 0xB4, 0x4E, 0x65, 0x99, 0x33, 0x44, 
		0x00, 0xB3, 0x2C, 0x0E, 0x59, 0xBB, 0x83, 0x40, 0xDD, 0x0E, 0x92, 0xBB, 0x24, 0x4B, 0x1D, 0x2B
};

typedef struct {
	DWORD offset;
	DWORD length;
} FILE_INFO,*PFILE_INFO;

struct HEADERPAIR{
	int offset;
	int count;
};

struct ss_header{
	DWORD szZiped;
	DWORD szOrigianl;
};

struct SCENEHEADER{
	int headerLength;
	HEADERPAIR varInfo;
	HEADERPAIR varNameIndex;
	HEADERPAIR varName;
	HEADERPAIR cmdInfo;
	HEADERPAIR cmdNameIndex;
	HEADERPAIR cmdName;
	HEADERPAIR SceneNameIndex;
	HEADERPAIR SceneName;
	HEADERPAIR SceneInfo;
	HEADERPAIR SceneData;
	int ExtraKeyUse;
	int SourceHeaderLength;
};

void deCompress(char *pdeZip,char *pZiped)
{
	ss_header *hdr=(ss_header *)pZiped;
	char *pZipedEnd=pZiped+hdr->szZiped;
	pZiped+=sizeof(ss_header);
	BYTE Flag;
//	pdeZip = new char [hdr->szOrigianl];
	do 
	{
		Flag = *pZiped++;
		for(BYTE i=0;i<8;i++)
		{
			switch (Flag&1)
			{
			case 0:
				{
					WORD ctlByte=*(PWORD)pZiped;
					WORD delta=ctlByte>>4;
					BYTE iRepeat=(ctlByte&0xF)+2;
					while (iRepeat--)
					{
						*pdeZip++=*(pdeZip-delta);
					}
				//	memcpy(pdeZip,pdeZip-delta,iRepeat);
				//	pdeZip+=iRepeat;
					pZiped+=2;
				}
				break;
			case 1:
				*pdeZip++=*pZiped++;
				break;
			}
			Flag>>=1;
		}
	} while (pZiped<=pZipedEnd);
}

///datablock:size size+data
int main(int argc, char* argv[])
{
	FILE *fp=fopen("scene.pck","rb");
	fseek(fp,0,SEEK_END);
	DWORD dwFileSize=ftell(fp);
	rewind(fp);
	char *pFile=new char [dwFileSize];
	fread(pFile,dwFileSize,1,fp);
	fclose(fp);
	SCENEHEADER scene;
	memcpy(&scene,pFile,sizeof(SCENEHEADER));
	PFILE_INFO pSizeTable,pNameLenTable;
	char *pDataBlock;
	LPWSTR pNameTable;
	DWORD FileCnt,i=0;
	pNameLenTable	=PFILE_INFO	(pFile+scene.SceneNameIndex.offset);
	pSizeTable		=PFILE_INFO	(pFile+scene.SceneInfo.offset);
	pNameTable		=LPWSTR		(pFile+scene.SceneName.offset);
	FileCnt			=scene.SceneInfo.count;
	pDataBlock		=pFile+scene.SceneData.offset;
	while(FileCnt--)
	{
		i=0;
		DWORD zipedSize=pSizeTable->length;
		WCHAR pwFileName[MAX_PATH];
		memset(pwFileName,0,MAX_PATH*2);
		wcsncpy(pwFileName,pNameTable+pNameLenTable->offset,pNameLenTable->length);
		wprintf(L"[%s]\tsize:%.8X\n",pwFileName,zipedSize);
		char *pBuf=(char *)pDataBlock+pSizeTable->offset;DWORD i=0;
		while (i < zipedSize) *pBuf++ ^= pck_xor_table[i++%256];
		ss_header *hdr=(ss_header *)(pDataBlock+pSizeTable->offset);
		fp=_wfopen(pwFileName,L"wb");
		char *pBuffer=new char[hdr->szOrigianl+0x256];
		memset(pBuffer,0,hdr->szOrigianl);
		deCompress(pBuffer,pDataBlock+pSizeTable->offset);
		fwrite(pBuffer,hdr->szOrigianl,1,fp);
		delete pBuffer;
		fclose(fp);
		pSizeTable++;
		pNameLenTable++;
	}
	delete []pFile;
	return 0;
}