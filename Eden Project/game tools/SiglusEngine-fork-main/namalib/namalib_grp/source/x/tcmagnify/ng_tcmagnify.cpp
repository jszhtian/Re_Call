#include	"pch.h"




// 通常表示
void tcmag_normal(void);
// スプライト表示
void tcmag_sprite(void);
// 透明通常表示
void tcmag_normal_clr(void);
// 透明スプライト表示
void tcmag_sprite_clr(void);
// 変色通常表示
void tcmag_normal_change(void);
// 変色スプライト表示
void tcmag_sprite_change(void);
// 変色透明通常表示
void tcmag_normal_change_clr(void);
// 変色透明スプライト表示
void tcmag_sprite_change_clr(void);
// 明暗通常表示
void tcmag_normal_bright(void);
// 明暗スプライト表示
void tcmag_sprite_bright(void);
// 明暗透明通常表示
void tcmag_normal_bright_clr(void);
// 明暗透明スプライト表示
void tcmag_sprite_bright_clr(void);
// 変色明暗通常表示
void tcmag_normal_change_bright(void);
// 変色明暗スプライト表示
void tcmag_sprite_change_bright(void);
// 変色明暗透明通常表示
void tcmag_normal_change_bright_clr(void);
// 変色明暗透明スプライト表示
void tcmag_sprite_change_bright_clr(void);
// モノ通常表示
void tcmag_normal_mono(void);
// モノスプライト表示
void tcmag_sprite_mono(void);
// モノ透明通常表示
void tcmag_normal_mono_clr(void);
// モノ透明スプライト表示
void tcmag_sprite_mono_clr(void);
// モノ変色通常表示
void tcmag_normal_mono_change(void);
// モノ変色スプライト表示
void tcmag_sprite_mono_change(void);
// モノ変色透明通常表示
void tcmag_normal_mono_change_clr(void);
// モノ変色透明スプライト表示
void tcmag_sprite_mono_change_clr(void);
// モノ明暗通常表示
void tcmag_normal_mono_bright(void);
// モノ明暗スプライト表示
void tcmag_sprite_mono_bright(void);
// モノ明暗透明通常表示
void tcmag_normal_mono_bright_clr(void);
// モノ明暗透明スプライト表示
void tcmag_sprite_mono_bright_clr(void);
// モノ変色明暗通常表示
void tcmag_normal_mono_change_bright(void);
// モノ変色明暗スプライト表示
void tcmag_sprite_mono_change_bright(void);
// モノ変色明暗透明通常表示
void tcmag_normal_mono_change_bright_clr(void);
// モノ変色明暗透明スプライト表示
void tcmag_sprite_mono_change_bright_clr(void);
// 反転通常表示
void tcmag_normal_reverse(void);
// 反転スプライト表示
void tcmag_sprite_reverse(void);
// 反転透明通常表示
void tcmag_normal_reverse_clr(void);
// 反転透明スプライト表示
void tcmag_sprite_reverse_clr(void);
// 反転変色通常表示
void tcmag_normal_reverse_change(void);
// 反転変色スプライト表示
void tcmag_sprite_reverse_change(void);
// 反転変色透明通常表示
void tcmag_normal_reverse_change_clr(void);
// 反転変色透明スプライト表示
void tcmag_sprite_reverse_change_clr(void);
// 反転明暗通常表示
void tcmag_normal_reverse_bright(void);
// 反転明暗スプライト表示
void tcmag_sprite_reverse_bright(void);
// 反転明暗透明通常表示
void tcmag_normal_reverse_bright_clr(void);
// 反転明暗透明スプライト表示
void tcmag_sprite_reverse_bright_clr(void);
// 反転変色明暗通常表示
void tcmag_normal_reverse_change_bright(void);
// 反転変色明暗スプライト表示
void tcmag_sprite_reverse_change_bright(void);
// 反転変色明暗透明通常表示
void tcmag_normal_reverse_change_bright_clr(void);
// 反転変色明暗透明スプライト表示
void tcmag_sprite_reverse_change_bright_clr(void);
// 反転モノ通常表示
void tcmag_normal_reverse_mono(void);
// 反転モノスプライト表示
void tcmag_sprite_reverse_mono(void);
// 反転モノ透明通常表示
void tcmag_normal_reverse_mono_clr(void);
// 反転モノ透明スプライト表示
void tcmag_sprite_reverse_mono_clr(void);
// 反転モノ変色通常表示
void tcmag_normal_reverse_mono_change(void);
// 反転モノ変色スプライト表示
void tcmag_sprite_reverse_mono_change(void);
// 反転モノ変色透明通常表示
void tcmag_normal_reverse_mono_change_clr(void);
// 反転モノ変色透明スプライト表示
void tcmag_sprite_reverse_mono_change_clr(void);
// 反転モノ明暗通常表示
void tcmag_normal_reverse_mono_bright(void);
// 反転モノ明暗スプライト表示
void tcmag_sprite_reverse_mono_bright(void);
// 反転モノ明暗透明通常表示
void tcmag_normal_reverse_mono_bright_clr(void);
// 反転モノ明暗透明スプライト表示
void tcmag_sprite_reverse_mono_bright_clr(void);
// 反転モノ変色明暗通常表示
void tcmag_normal_reverse_mono_change_bright(void);
// 反転モノ変色明暗スプライト表示
void tcmag_sprite_reverse_mono_change_bright(void);
// 反転モノ変色明暗透明通常表示
void tcmag_normal_reverse_mono_change_bright_clr(void);
// 反転モノ変色明暗透明スプライト表示
void tcmag_sprite_reverse_mono_change_bright_clr(void);

// 通常表示（加算）
void tcmag_normal_add(void);
// スプライト表示（加算）
void tcmag_sprite_add(void);
// 透明通常表示（加算）
void tcmag_normal_clr_add(void);
// 透明スプライト表示（加算）
void tcmag_sprite_clr_add(void);
// 変色通常表示（加算）
void tcmag_normal_change_add(void);
// 変色スプライト表示（加算）
void tcmag_sprite_change_add(void);
// 変色透明通常表示（加算）
void tcmag_normal_change_clr_add(void);
// 変色透明スプライト表示（加算）
void tcmag_sprite_change_clr_add(void);
// 明暗通常表示（加算）
void tcmag_normal_bright_add(void);
// 明暗スプライト表示（加算）
void tcmag_sprite_bright_add(void);
// 明暗透明通常表示（加算）
void tcmag_normal_bright_clr_add(void);
// 明暗透明スプライト表示（加算）
void tcmag_sprite_bright_clr_add(void);
// 変色明暗通常表示（加算）
void tcmag_normal_change_bright_add(void);
// 変色明暗スプライト表示（加算）
void tcmag_sprite_change_bright_add(void);
// 変色明暗透明通常表示（加算）
void tcmag_normal_change_bright_clr_add(void);
// 変色明暗透明スプライト表示（加算）
void tcmag_sprite_change_bright_clr_add(void);
// モノ通常表示（加算）
void tcmag_normal_mono_add(void);
// モノスプライト表示（加算）
void tcmag_sprite_mono_add(void);
// モノ透明通常表示（加算）
void tcmag_normal_mono_clr_add(void);
// モノ透明スプライト表示（加算）
void tcmag_sprite_mono_clr_add(void);
// モノ変色通常表示（加算）
void tcmag_normal_mono_change_add(void);
// モノ変色スプライト表示（加算）
void tcmag_sprite_mono_change_add(void);
// モノ変色透明通常表示（加算）
void tcmag_normal_mono_change_clr_add(void);
// モノ変色透明スプライト表示（加算）
void tcmag_sprite_mono_change_clr_add(void);
// モノ明暗通常表示（加算）
void tcmag_normal_mono_bright_add(void);
// モノ明暗スプライト表示（加算）
void tcmag_sprite_mono_bright_add(void);
// モノ明暗透明通常表示（加算）
void tcmag_normal_mono_bright_clr_add(void);
// モノ明暗透明スプライト表示（加算）
void tcmag_sprite_mono_bright_clr_add(void);
// モノ変色明暗通常表示（加算）
void tcmag_normal_mono_change_bright_add(void);
// モノ変色明暗スプライト表示（加算）
void tcmag_sprite_mono_change_bright_add(void);
// モノ変色明暗透明通常表示（加算）
void tcmag_normal_mono_change_bright_clr_add(void);
// モノ変色明暗透明スプライト表示（加算）
void tcmag_sprite_mono_change_bright_clr_add(void);
// 反転通常表示（加算）
void tcmag_normal_reverse_add(void);
// 反転スプライト表示（加算）
void tcmag_sprite_reverse_add(void);
// 反転透明通常表示（加算）
void tcmag_normal_reverse_clr_add(void);
// 反転透明スプライト表示（加算）
void tcmag_sprite_reverse_clr_add(void);
// 反転変色通常表示（加算）
void tcmag_normal_reverse_change_add(void);
// 反転変色スプライト表示（加算）
void tcmag_sprite_reverse_change_add(void);
// 反転変色透明通常表示（加算）
void tcmag_normal_reverse_change_clr_add(void);
// 反転変色透明スプライト表示（加算）
void tcmag_sprite_reverse_change_clr_add(void);
// 反転明暗通常表示（加算）
void tcmag_normal_reverse_bright_add(void);
// 反転明暗スプライト表示（加算）
void tcmag_sprite_reverse_bright_add(void);
// 反転明暗透明通常表示（加算）
void tcmag_normal_reverse_bright_clr_add(void);
// 反転明暗透明スプライト表示（加算）
void tcmag_sprite_reverse_bright_clr_add(void);
// 反転変色明暗通常表示（加算）
void tcmag_normal_reverse_change_bright_add(void);
// 反転変色明暗スプライト表示（加算）
void tcmag_sprite_reverse_change_bright_add(void);
// 反転変色明暗透明通常表示（加算）
void tcmag_normal_reverse_change_bright_clr_add(void);
// 反転変色明暗透明スプライト表示（加算）
void tcmag_sprite_reverse_change_bright_clr_add(void);
// 反転モノ通常表示（加算）
void tcmag_normal_reverse_mono_add(void);
// 反転モノスプライト表示（加算）
void tcmag_sprite_reverse_mono_add(void);
// 反転モノ透明通常表示（加算）
void tcmag_normal_reverse_mono_clr_add(void);
// 反転モノ透明スプライト表示（加算）
void tcmag_sprite_reverse_mono_clr_add(void);
// 反転モノ変色通常表示（加算）
void tcmag_normal_reverse_mono_change_add(void);
// 反転モノ変色スプライト表示（加算）
void tcmag_sprite_reverse_mono_change_add(void);
// 反転モノ変色透明通常表示（加算）
void tcmag_normal_reverse_mono_change_clr_add(void);
// 反転モノ変色透明スプライト表示（加算）
void tcmag_sprite_reverse_mono_change_clr_add(void);
// 反転モノ明暗通常表示（加算）
void tcmag_normal_reverse_mono_bright_add(void);
// 反転モノ明暗スプライト表示（加算）
void tcmag_sprite_reverse_mono_bright_add(void);
// 反転モノ明暗透明通常表示（加算）
void tcmag_normal_reverse_mono_bright_clr_add(void);
// 反転モノ明暗透明スプライト表示（加算）
void tcmag_sprite_reverse_mono_bright_clr_add(void);
// 反転モノ変色明暗通常表示（加算）
void tcmag_normal_reverse_mono_change_bright_add(void);
// 反転モノ変色明暗スプライト表示（加算）
void tcmag_sprite_reverse_mono_change_bright_add(void);
// 反転モノ変色明暗透明通常表示（加算）
void tcmag_normal_reverse_mono_change_bright_clr_add(void);
// 反転モノ変色明暗透明スプライト表示（加算）
void tcmag_sprite_reverse_mono_change_bright_clr_add(void);

// 通常表示（減算）
void tcmag_normal_sub(void);
// スプライト表示（減算）
void tcmag_sprite_sub(void);
// 透明通常表示（減算）
void tcmag_normal_clr_sub(void);
// 透明スプライト表示（減算）
void tcmag_sprite_clr_sub(void);
// 変色通常表示（減算）
void tcmag_normal_change_sub(void);
// 変色スプライト表示（減算）
void tcmag_sprite_change_sub(void);
// 変色透明通常表示（減算）
void tcmag_normal_change_clr_sub(void);
// 変色透明スプライト表示（減算）
void tcmag_sprite_change_clr_sub(void);
// 明暗通常表示（減算）
void tcmag_normal_bright_sub(void);
// 明暗スプライト表示（減算）
void tcmag_sprite_bright_sub(void);
// 明暗透明通常表示（減算）
void tcmag_normal_bright_clr_sub(void);
// 明暗透明スプライト表示（減算）
void tcmag_sprite_bright_clr_sub(void);
// 変色明暗通常表示（減算）
void tcmag_normal_change_bright_sub(void);
// 変色明暗スプライト表示（減算）
void tcmag_sprite_change_bright_sub(void);
// 変色明暗透明通常表示（減算）
void tcmag_normal_change_bright_clr_sub(void);
// 変色明暗透明スプライト表示（減算）
void tcmag_sprite_change_bright_clr_sub(void);
// モノ通常表示（減算）
void tcmag_normal_mono_sub(void);
// モノスプライト表示（減算）
void tcmag_sprite_mono_sub(void);
// モノ透明通常表示（減算）
void tcmag_normal_mono_clr_sub(void);
// モノ透明スプライト表示（減算）
void tcmag_sprite_mono_clr_sub(void);
// モノ変色通常表示（減算）
void tcmag_normal_mono_change_sub(void);
// モノ変色スプライト表示（減算）
void tcmag_sprite_mono_change_sub(void);
// モノ変色透明通常表示（減算）
void tcmag_normal_mono_change_clr_sub(void);
// モノ変色透明スプライト表示（減算）
void tcmag_sprite_mono_change_clr_sub(void);
// モノ明暗通常表示（減算）
void tcmag_normal_mono_bright_sub(void);
// モノ明暗スプライト表示（減算）
void tcmag_sprite_mono_bright_sub(void);
// モノ明暗透明通常表示（減算）
void tcmag_normal_mono_bright_clr_sub(void);
// モノ明暗透明スプライト表示（減算）
void tcmag_sprite_mono_bright_clr_sub(void);
// モノ変色明暗通常表示（減算）
void tcmag_normal_mono_change_bright_sub(void);
// モノ変色明暗スプライト表示（減算）
void tcmag_sprite_mono_change_bright_sub(void);
// モノ変色明暗透明通常表示（減算）
void tcmag_normal_mono_change_bright_clr_sub(void);
// モノ変色明暗透明スプライト表示（減算）
void tcmag_sprite_mono_change_bright_clr_sub(void);
// 反転通常表示（減算）
void tcmag_normal_reverse_sub(void);
// 反転スプライト表示（減算）
void tcmag_sprite_reverse_sub(void);
// 反転透明通常表示（減算）
void tcmag_normal_reverse_clr_sub(void);
// 反転透明スプライト表示（減算）
void tcmag_sprite_reverse_clr_sub(void);
// 反転変色通常表示（減算）
void tcmag_normal_reverse_change_sub(void);
// 反転変色スプライト表示（減算）
void tcmag_sprite_reverse_change_sub(void);
// 反転変色透明通常表示（減算）
void tcmag_normal_reverse_change_clr_sub(void);
// 反転変色透明スプライト表示（減算）
void tcmag_sprite_reverse_change_clr_sub(void);
// 反転明暗通常表示（減算）
void tcmag_normal_reverse_bright_sub(void);
// 反転明暗スプライト表示（減算）
void tcmag_sprite_reverse_bright_sub(void);
// 反転明暗透明通常表示（減算）
void tcmag_normal_reverse_bright_clr_sub(void);
// 反転明暗透明スプライト表示（減算）
void tcmag_sprite_reverse_bright_clr_sub(void);
// 反転変色明暗通常表示（減算）
void tcmag_normal_reverse_change_bright_sub(void);
// 反転変色明暗スプライト表示（減算）
void tcmag_sprite_reverse_change_bright_sub(void);
// 反転変色明暗透明通常表示（減算）
void tcmag_normal_reverse_change_bright_clr_sub(void);
// 反転変色明暗透明スプライト表示（減算）
void tcmag_sprite_reverse_change_bright_clr_sub(void);
// 反転モノ通常表示（減算）
void tcmag_normal_reverse_mono_sub(void);
// 反転モノスプライト表示（減算）
void tcmag_sprite_reverse_mono_sub(void);
// 反転モノ透明通常表示（減算）
void tcmag_normal_reverse_mono_clr_sub(void);
// 反転モノ透明スプライト表示（減算）
void tcmag_sprite_reverse_mono_clr_sub(void);
// 反転モノ変色通常表示（減算）
void tcmag_normal_reverse_mono_change_sub(void);
// 反転モノ変色スプライト表示（減算）
void tcmag_sprite_reverse_mono_change_sub(void);
// 反転モノ変色透明通常表示（減算）
void tcmag_normal_reverse_mono_change_clr_sub(void);
// 反転モノ変色透明スプライト表示（減算）
void tcmag_sprite_reverse_mono_change_clr_sub(void);
// 反転モノ明暗通常表示（減算）
void tcmag_normal_reverse_mono_bright_sub(void);
// 反転モノ明暗スプライト表示（減算）
void tcmag_sprite_reverse_mono_bright_sub(void);
// 反転モノ明暗透明通常表示（減算）
void tcmag_normal_reverse_mono_bright_clr_sub(void);
// 反転モノ明暗透明スプライト表示（減算）
void tcmag_sprite_reverse_mono_bright_clr_sub(void);
// 反転モノ変色明暗通常表示（減算）
void tcmag_normal_reverse_mono_change_bright_sub(void);
// 反転モノ変色明暗スプライト表示（減算）
void tcmag_sprite_reverse_mono_change_bright_sub(void);
// 反転モノ変色明暗透明通常表示（減算）
void tcmag_normal_reverse_mono_change_bright_clr_sub(void);
// 反転モノ変色明暗透明スプライト表示（減算）
void tcmag_sprite_reverse_mono_change_bright_clr_sub(void);

// 通常表示表示（ＲＧＢフィルター）
void tcmag_normal_rgbfilter(void);
// スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_rgbfilter(void);
// 透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_clr_rgbfilter(void);
// 透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_clr_rgbfilter(void);
// 変色通常表示表示（ＲＧＢフィルター）
void tcmag_normal_change_rgbfilter(void);
// 変色スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_change_rgbfilter(void);
// 変色透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_change_clr_rgbfilter(void);
// 変色透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_change_clr_rgbfilter(void);
// 明暗通常表示表示（ＲＧＢフィルター）
void tcmag_normal_bright_rgbfilter(void);
// 明暗スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_bright_rgbfilter(void);
// 明暗透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_bright_clr_rgbfilter(void);
// 明暗透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_bright_clr_rgbfilter(void);
// 変色明暗通常表示表示（ＲＧＢフィルター）
void tcmag_normal_change_bright_rgbfilter(void);
// 変色明暗スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_change_bright_rgbfilter(void);
// 変色明暗透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_change_bright_clr_rgbfilter(void);
// 変色明暗透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_change_bright_clr_rgbfilter(void);
// モノ通常表示表示（ＲＧＢフィルター）
void tcmag_normal_mono_rgbfilter(void);
// モノスプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_mono_rgbfilter(void);
// モノ透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_mono_clr_rgbfilter(void);
// モノ透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_mono_clr_rgbfilter(void);
// モノ変色通常表示表示（ＲＧＢフィルター）
void tcmag_normal_mono_change_rgbfilter(void);
// モノ変色スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_mono_change_rgbfilter(void);
// モノ変色透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_mono_change_clr_rgbfilter(void);
// モノ変色透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_mono_change_clr_rgbfilter(void);
// モノ明暗通常表示表示（ＲＧＢフィルター）
void tcmag_normal_mono_bright_rgbfilter(void);
// モノ明暗スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_mono_bright_rgbfilter(void);
// モノ明暗透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_mono_bright_clr_rgbfilter(void);
// モノ明暗透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_mono_bright_clr_rgbfilter(void);
// モノ変色明暗通常表示表示（ＲＧＢフィルター）
void tcmag_normal_mono_change_bright_rgbfilter(void);
// モノ変色明暗スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_mono_change_bright_rgbfilter(void);
// モノ変色明暗透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_mono_change_bright_clr_rgbfilter(void);
// モノ変色明暗透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_mono_change_bright_clr_rgbfilter(void);
// 反転通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_rgbfilter(void);
// 反転スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_rgbfilter(void);
// 反転透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_clr_rgbfilter(void);
// 反転透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_clr_rgbfilter(void);
// 反転変色通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_change_rgbfilter(void);
// 反転変色スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_change_rgbfilter(void);
// 反転変色透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_change_clr_rgbfilter(void);
// 反転変色透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_change_clr_rgbfilter(void);
// 反転明暗通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_bright_rgbfilter(void);
// 反転明暗スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_bright_rgbfilter(void);
// 反転明暗透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_bright_clr_rgbfilter(void);
// 反転明暗透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_bright_clr_rgbfilter(void);
// 反転変色明暗通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_change_bright_rgbfilter(void);
// 反転変色明暗スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_change_bright_rgbfilter(void);
// 反転変色明暗透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_change_bright_clr_rgbfilter(void);
// 反転変色明暗透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_change_bright_clr_rgbfilter(void);
// 反転モノ通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_mono_rgbfilter(void);
// 反転モノスプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_mono_rgbfilter(void);
// 反転モノ透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_mono_clr_rgbfilter(void);
// 反転モノ透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_mono_clr_rgbfilter(void);
// 反転モノ変色通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_mono_change_rgbfilter(void);
// 反転モノ変色スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_mono_change_rgbfilter(void);
// 反転モノ変色透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_mono_change_clr_rgbfilter(void);
// 反転モノ変色透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_mono_change_clr_rgbfilter(void);
// 反転モノ明暗通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_mono_bright_rgbfilter(void);
// 反転モノ明暗スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_mono_bright_rgbfilter(void);
// 反転モノ明暗透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_mono_bright_clr_rgbfilter(void);
// 反転モノ明暗透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_mono_bright_clr_rgbfilter(void);
// 反転モノ変色明暗通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_mono_change_bright_rgbfilter(void);
// 反転モノ変色明暗スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_mono_change_bright_rgbfilter(void);
// 反転モノ変色明暗透明通常表示表示（ＲＧＢフィルター）
void tcmag_normal_reverse_mono_change_bright_clr_rgbfilter(void);
// 反転モノ変色明暗透明スプライト表示表示（ＲＧＢフィルター）
void tcmag_sprite_reverse_mono_change_bright_clr_rgbfilter(void);




/*========================================================================================
	拡大縮小表示
void true_color_magnify(
	UC *dst_p, int dst_xl, int dst_yl,
	int dx1, int dy1, int dx2, int dy2,
	UC *src_p, int src_xl, int src_yl, int type,,
	int sx1, int sy1, int sx2, int sy2,
	int srx, int sry, int sxl, int syl,
	int ex1, int ey1, int ex2, int ey2,
	UC mono,
	UC reverse,
	UC c_r, UC c_g, UC c_b, UC c_rate,
	int p_r, int p_g, int p_b,
	int bright,
	UC clr,
	int disp_mod
);
		IN		なし
		OUT		なし
----------------------------------------------------------------------------------------*/
void true_color_magnify(
	UC *dst_p, int dst_xl, int dst_yl,
	int dx1, int dy1, int dx2, int dy2,
	UC *src_p, int src_xl, int src_yl, int type,
	int sx1, int sy1, int sx2, int sy2,
	int srx, int sry, int sxl, int syl,
	int ex1, int ey1, int ex2, int ey2,
	UC mono,
	UC reverse,
	UC c_r, UC c_g, UC c_b, UC c_rate,
	int p_r, int p_g, int p_b,
	int bright,
	UC clr,
	int disp_mod
){
	int tmp;
	int _dxlen, _dylen;
	int _sxlen, _sylen;
	int x_alpha, y_alpha;
	int dx_free, dy_free;
	int sx_free, sy_free;
	int x_count, y_count;

	if(dst_p==0 || src_p==0 || clr==0){
		return;
	}

	if(dst_p==0 || src_p==0){
		return;
	}

	if(dst_xl==0 || src_xl==0 || sxl==0){
		return;
	}

	if(dst_yl==0 || src_yl==0 || syl==0){
		return;
	}

	if(sx1>sx2){tmp=sx1; sx1=sx2; sx2=tmp;}
	if(sy1>sy2){tmp=sy1; sy1=sy2; sy2=tmp;}
	if(dx1>dx2){tmp=dx1; dx1=dx2; dx2=tmp;}
	if(dy1>dy2){tmp=dy1; dy1=dy2; dy2=tmp;}
	_dxlen = dx2 - dx1 + 1;
	_dylen = dy2 - dy1 + 1;
	_sxlen = sx2 - sx1 + 1;
	_sylen = sy2 - sy1 + 1;

#if 0		// 表示エリア ex1,ey1,ex2,ey2 を sx1,sy1,sx2,sy2 で調整せなあかん
	if(_dxlen==_sxlen && _dylen==_sylen){
		if(srx==0 && sry==0){
			if(src_xl==sxl && src_yl==syl){
				true_color_grp_disp_eazy(
					dst_p, dst_xl, dst_yl,
					src_p, src_xl, src_yl, sx1, sy1, type,
					dx1, dy1,
					ex1, ey1, ex2, ey2,
					clr
				);
				return;
			}
		}
	}
#endif

	ng_set_eria(dst_xl, dst_yl, &ex1, &ey1, &ex2, &ey2);

	if(
		magnify_param(
			_sxlen, _dxlen,
			sx1, sx2,
			dx1, dx2,
			srx, (srx + sxl - 1),
			ex1, ex2,
			&x_alpha, &sx_free,
			&dx_free, &x_count
		) == 0
	){
		return;
	}
	if(
		magnify_param(
			_sylen, _dylen,
			sy1, sy2,
			dy1, dy2,
			sry, (sry + syl - 1),
			ey1, ey2,
			&y_alpha, &sy_free,
			&dy_free, &y_count
		) == 0
	){
		return;
	}

	TCMAG_x_alpha = x_alpha;
	TCMAG_y_alpha = y_alpha;

	TCMAG_x_count = x_count;
	TCMAG_y_count = y_count;

// アドレス算出
	TCMAG_src = src_p + (((sxl    * sy_free) + sx_free) << 2);
	TCMAG_dst = dst_p + (((dst_xl * dy_free) + dx_free) << 2);

// 描画パラメータ
	TCMAG_src_add_adr = sxl    << 2;
	TCMAG_dst_add_adr = dst_xl << 2;

	TCMAG_sxl = _sxlen;
	TCMAG_syl = _sylen;
	TCMAG_dxl = _dxlen;
	TCMAG_dyl = _dylen;

// 反転パラメータ
	CTPREV = *(Gclr_table_adr_p + (255 - reverse));

// モノパラメータ
	GRPF_mono    = (255 - mono) << 2;

// 変色パラメータ
	if(c_rate){
		GRPF_c_r = c_r;
		GRPF_c_g = c_g;
		GRPF_c_b = c_b;
		CTPBETA = *(Gclr_table_adr_p + (255 - c_rate));
	}

// 透明度パラメータ
	GRPF_clr4 = (clr << 2);
	GRPF_clrR = 255 - clr;
	CTPCLR = *(Gclr_table_adr_p + clr);

// 色味パラメータ
	if(bright < -255){
		bright = -255;
	}
	else if(bright > 255){
		bright = 255;
	}
	if(p_r < -255){
		p_r = -255;
	}
	else if(p_r > 255){
		p_r = 255;
	}
	if(p_g < -255){
		p_g = -255;
	}
	else if(p_g > 255){
		p_g = 255;
	}
	if(p_b < -255){
		p_b = -255;
	}
	else if(p_b > 255){
		p_b = 255;
	}
	if(bright < 0){
		p_r += (((255 + p_r) * bright) / 255);
		p_g += (((255 + p_g) * bright) / 255);
		p_b += (((255 + p_b) * bright) / 255);
	}
	else if(bright > 0){
		p_r += (((255 - p_r) * bright) / 255);
		p_g += (((255 - p_g) * bright) / 255);
		p_b += (((255 - p_b) * bright) / 255);
	}

	if(disp_mod == 2){		// 減算モード
		p_r = -(p_r);
		p_g = -(p_g);
		p_b = -(p_b);
	}

	RGBFILTER_p_r = p_r;
	RGBFILTER_p_g = p_g;
	RGBFILTER_p_b = p_b;

	if(p_r >= 0){
		CTPR = *(Gclr_table_adr_p + (255 - p_r));
		GRPF_p_r = 255;
	}
	else{
		CTPR = *(Gclr_table_adr_p + (255 + p_r));
		GRPF_p_r = 0;
	}
	if(p_g >= 0){
		CTPG = *(Gclr_table_adr_p + (255 - p_g));
		GRPF_p_g = 255;
	}
	else{
		CTPG = *(Gclr_table_adr_p + (255 + p_g));
		GRPF_p_g = 0;
	}
	if(p_b >= 0){
		CTPB = *(Gclr_table_adr_p + (255 - p_b));
		GRPF_p_b = 255;
	}
	else{
		CTPB = *(Gclr_table_adr_p + (255 + p_b));
		GRPF_p_b = 0;
	}

//****************************************************************************************

	if(type == 0){
		if(clr == 255){
			if(c_rate == 0){
				if(p_r==0 && p_g==0 && p_b==0){
					if(mono == 0){
						if(reverse == 0){
// 通常表示
							switch(disp_mod){
								case 0: tcmag_normal(); break;
								case 1: tcmag_normal_add(); break;
								case 2: tcmag_normal_sub(); break;
								case 4: tcmag_normal_rgbfilter(); break;
							}
						}
						else{
// 反転通常表示
							switch(disp_mod){
								case 0: tcmag_normal_reverse(); break;
								case 1: tcmag_normal_reverse_add(); break;
								case 2: tcmag_normal_reverse_sub(); break;
								case 4: tcmag_normal_reverse_rgbfilter(); break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_mono();*/ break;
								case 1: /*tcmag_normal_mono_add();*/ break;
								case 2: /*tcmag_normal_mono_sub();*/ break;
								case 4: /*tcmag_normal_mono_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_mono();*/ break;
								case 1: /*tcmag_normal_reverse_mono_add();*/ break;
								case 2: /*tcmag_normal_reverse_mono_sub();*/ break;
								case 4: /*tcmag_normal_reverse_mono_rgbfilter();*/ break;
							}
						}
					}
				}
				else{
					if(mono == 0){
						if(reverse == 0){
// 明暗通常表示
							switch(disp_mod){
								case 0: tcmag_normal_bright(); break;
								case 1: tcmag_normal_bright_add(); break;
								case 2: tcmag_normal_bright_sub(); break;
								case 4: tcmag_normal_bright_rgbfilter(); break;
							}
						}
						else{
// 反転明暗通常表示
							switch(disp_mod){
								case 0: tcmag_normal_reverse_bright(); break;
								case 1: tcmag_normal_reverse_bright_add(); break;
								case 2: tcmag_normal_reverse_bright_sub(); break;
								case 4: tcmag_normal_reverse_bright_rgbfilter(); break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ明暗通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_mono_bright();*/ break;
								case 1: /*tcmag_normal_mono_bright_add();*/ break;
								case 2: /*tcmag_normal_mono_bright_sub();*/ break;
								case 4: /*tcmag_normal_mono_bright_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ明暗通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_mono_bright();*/ break;
								case 1: /*tcmag_normal_reverse_mono_bright_add();*/ break;
								case 2: /*tcmag_normal_reverse_mono_bright_sub();*/ break;
								case 4: /*tcmag_normal_reverse_mono_bright_rgbfilter();*/ break;
							}
						}
					}
				}
			}
			else{
				if(p_r==0 && p_g==0 && p_b==0){
					if(mono == 0){
						if(reverse == 0){
// 変色通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_change();*/ break;
								case 1: /*tcmag_normal_change_add();*/ break;
								case 2: /*tcmag_normal_change_sub();*/ break;
								case 4: /*tcmag_normal_change_rgbfilter();*/ break;
							}
						}
						else{
// 反転変色通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_change();*/ break;
								case 1: /*tcmag_normal_reverse_change_add();*/ break;
								case 2: /*tcmag_normal_reverse_change_sub();*/ break;
								case 4: /*tcmag_normal_reverse_change_rgbfilter();*/ break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ変色通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_mono_change();*/ break;
								case 1: /*tcmag_normal_mono_change_add();*/ break;
								case 2: /*tcmag_normal_mono_change_sub();*/ break;
								case 4: /*tcmag_normal_mono_change_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ変色通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_mono_change();*/ break;
								case 1: /*tcmag_normal_reverse_mono_change_add();*/ break;
								case 2: /*tcmag_normal_reverse_mono_change_sub();*/ break;
								case 4: /*tcmag_normal_reverse_mono_change_rgbfilter();*/ break;
							}
						}
					}
				}
				else{
					if(mono == 0){
						if(reverse == 0){
// 変色明暗通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_change_bright();*/ break;
								case 1: /*tcmag_normal_change_bright_add();*/ break;
								case 2: /*tcmag_normal_change_bright_sub();*/ break;
								case 4: /*tcmag_normal_change_bright_rgbfilter();*/ break;
							}
						}
						else{
// 反転変色明暗通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_change_bright();*/ break;
								case 1: /*tcmag_normal_reverse_change_bright_add();*/ break;
								case 2: /*tcmag_normal_reverse_change_bright_sub();*/ break;
								case 4: /*tcmag_normal_reverse_change_bright_rgbfilter();*/ break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ変色明暗通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_mono_change_bright();*/ break;
								case 1: /*tcmag_normal_mono_change_bright_add();*/ break;
								case 2: /*tcmag_normal_mono_change_bright_sub();*/ break;
								case 4: /*tcmag_normal_mono_change_bright_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ変色明暗通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_mono_change_bright();*/ break;
								case 1: /*tcmag_normal_reverse_mono_change_bright_add();*/ break;
								case 2: /*tcmag_normal_reverse_mono_change_bright_sub();*/ break;
								case 4: /*tcmag_normal_reverse_mono_change_bright_rgbfilter();*/ break;
							}
						}
					}
				}
			}
		}
		else{
			if(c_rate == 0){
				if(p_r==0 && p_g==0 && p_b==0){
					if(mono == 0){
						if(reverse == 0){
// 透明通常表示
							switch(disp_mod){
								case 0: tcmag_normal_clr(); break;
								case 1: tcmag_normal_clr_add(); break;
								case 2: tcmag_normal_clr_sub(); break;
								case 4: tcmag_normal_clr_rgbfilter(); break;
							}
						}
						else{
// 反転透明通常表示
							switch(disp_mod){
								case 0: tcmag_normal_reverse_clr(); break;
								case 1: tcmag_normal_reverse_clr_add(); break;
								case 2: tcmag_normal_reverse_clr_sub(); break;
								case 4: tcmag_normal_reverse_clr_rgbfilter(); break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_mono_clr();*/ break;
								case 1: /*tcmag_normal_mono_clr_add();*/ break;
								case 2: /*tcmag_normal_mono_clr_sub();*/ break;
								case 4: /*tcmag_normal_mono_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_mono_clr();*/ break;
								case 1: /*tcmag_normal_reverse_mono_clr_add();*/ break;
								case 2: /*tcmag_normal_reverse_mono_clr_sub();*/ break;
								case 4: /*tcmag_normal_reverse_mono_clr_rgbfilter();*/ break;
							}
						}
					}
				}
				else{
					if(mono == 0){
						if(reverse == 0){
// 明暗透明通常表示
							switch(disp_mod){
								case 0: tcmag_normal_bright_clr(); break;
								case 1: tcmag_normal_bright_clr_add(); break;
								case 2: tcmag_normal_bright_clr_sub(); break;
								case 4: tcmag_normal_bright_clr_rgbfilter(); break;
							}
						}
						else{
// 反転明暗透明通常表示
							switch(disp_mod){
								case 0: tcmag_normal_reverse_bright_clr(); break;
								case 1: tcmag_normal_reverse_bright_clr_add(); break;
								case 2: tcmag_normal_reverse_bright_clr_sub(); break;
								case 4: tcmag_normal_reverse_bright_clr_rgbfilter(); break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ明暗透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_mono_bright_clr();*/ break;
								case 1: /*tcmag_normal_mono_bright_clr_add();*/ break;
								case 2: /*tcmag_normal_mono_bright_clr_sub();*/ break;
								case 4: /*tcmag_normal_mono_bright_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ明暗透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_mono_bright_clr();*/ break;
								case 1: /*tcmag_normal_reverse_mono_bright_clr_add();*/ break;
								case 2: /*tcmag_normal_reverse_mono_bright_clr_sub();*/ break;
								case 4: /*tcmag_normal_reverse_mono_bright_clr_rgbfilter();*/ break;
							}
						}
					}
				}
			}
			else{
				if(p_r==0 && p_g==0 && p_b==0){
					if(mono == 0){
						if(reverse == 0){
// 変色透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_change_clr();*/ break;
								case 1: /*tcmag_normal_change_clr_add();*/ break;
								case 2: /*tcmag_normal_change_clr_sub();*/ break;
								case 4: /*tcmag_normal_change_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転変色透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_change_clr();*/ break;
								case 1: /*tcmag_normal_reverse_change_clr_add();*/ break;
								case 2: /*tcmag_normal_reverse_change_clr_sub();*/ break;
								case 4: /*tcmag_normal_reverse_change_clr_rgbfilter();*/ break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ変色透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_mono_change_clr();*/ break;
								case 1: /*tcmag_normal_mono_change_clr_add();*/ break;
								case 2: /*tcmag_normal_mono_change_clr_sub();*/ break;
								case 4: /*tcmag_normal_mono_change_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ変色透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_mono_change_clr();*/ break;
								case 1: /*tcmag_normal_reverse_mono_change_clr_add();*/ break;
								case 2: /*tcmag_normal_reverse_mono_change_clr_sub();*/ break;
								case 4: /*tcmag_normal_reverse_mono_change_clr_rgbfilter();*/ break;
							}
						}
					}
				}
				else{
					if(mono == 0){
						if(reverse == 0){
// 変色明暗透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_change_bright_clr();*/ break;
								case 1: /*tcmag_normal_change_bright_clr_add();*/ break;
								case 2: /*tcmag_normal_change_bright_clr_sub();*/ break;
								case 4: /*tcmag_normal_change_bright_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転変色明暗透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_change_bright_clr();*/ break;
								case 1: /*tcmag_normal_reverse_change_bright_clr_add();*/ break;
								case 2: /*tcmag_normal_reverse_change_bright_clr_sub();*/ break;
								case 4: /*tcmag_normal_reverse_change_bright_clr_rgbfilter();*/ break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ変色明暗透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_mono_change_bright_clr();*/ break;
								case 1: /*tcmag_normal_mono_change_bright_clr_add();*/ break;
								case 2: /*tcmag_normal_mono_change_bright_clr_sub();*/ break;
								case 4: /*tcmag_normal_mono_change_bright_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ変色明暗透明通常表示
							switch(disp_mod){
								case 0: /*tcmag_normal_reverse_mono_change_bright_clr();*/ break;
								case 1: /*tcmag_normal_reverse_mono_change_bright_clr_add();*/ break;
								case 2: /*tcmag_normal_reverse_mono_change_bright_clr_sub();*/ break;
								case 4: /*tcmag_normal_reverse_mono_change_bright_clr_rgbfilter();*/ break;
							}
						}
					}
				}
			}
		}
	}
//****************************************************************************************
	else{
		if(clr == 255){
			if(c_rate == 0){
				if(p_r==0 && p_g==0 && p_b==0){
					if(mono == 0){
						if(reverse == 0){
// スプライト表示
							switch(disp_mod){
								case 0: tcmag_sprite(); break;
								case 1: tcmag_sprite_add(); break;
								case 2: tcmag_sprite_sub(); break;
								case 4: tcmag_sprite_rgbfilter(); break;
							}
						}
						else{
// 反転スプライト表示
							switch(disp_mod){
								case 0: tcmag_sprite_reverse(); break;
								case 1: tcmag_sprite_reverse_add(); break;
								case 2: tcmag_sprite_reverse_sub(); break;
								case 4: tcmag_sprite_reverse_rgbfilter(); break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノスプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_mono();*/ break;
								case 1: /*tcmag_sprite_mono_add();*/ break;
								case 2: /*tcmag_sprite_mono_sub();*/ break;
								case 4: /*tcmag_sprite_mono_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノスプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_mono();*/ break;
								case 1: /*tcmag_sprite_reverse_mono_add();*/ break;
								case 2: /*tcmag_sprite_reverse_mono_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_mono_rgbfilter();*/ break;
							}
						}
					}
				}
				else{
					if(mono == 0){
						if(reverse == 0){
// 明暗スプライト表示
							switch(disp_mod){
								case 0: tcmag_sprite_bright(); break;
								case 1: tcmag_sprite_bright_add(); break;
								case 2: tcmag_sprite_bright_sub(); break;
								case 4: tcmag_sprite_bright_rgbfilter(); break;
							}
						}
						else{
// 反転明暗スプライト表示
							switch(disp_mod){
								case 0: tcmag_sprite_reverse_bright(); break;
								case 1: tcmag_sprite_reverse_bright_add(); break;
								case 2: tcmag_sprite_reverse_bright_sub(); break;
								case 4: tcmag_sprite_reverse_bright_rgbfilter(); break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ明暗スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_mono_bright();*/ break;
								case 1: /*tcmag_sprite_mono_bright_add();*/ break;
								case 2: /*tcmag_sprite_mono_bright_sub();*/ break;
								case 4: /*tcmag_sprite_mono_bright_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ明暗スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_mono_bright();*/ break;
								case 1: /*tcmag_sprite_reverse_mono_bright_add();*/ break;
								case 2: /*tcmag_sprite_reverse_mono_bright_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_mono_bright_rgbfilter();*/ break;
							}
						}
					}
				}
			}
			else{
				if(p_r==0 && p_g==0 && p_b==0){
					if(mono == 0){
						if(reverse == 0){
// 変色スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_change();*/ break;
								case 1: /*tcmag_sprite_change_add();*/ break;
								case 2: /*tcmag_sprite_change_sub();*/ break;
								case 4: /*tcmag_sprite_change_rgbfilter();*/ break;
							}
						}
						else{
// 反転変色スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_change();*/ break;
								case 1: /*tcmag_sprite_reverse_change_add();*/ break;
								case 2: /*tcmag_sprite_reverse_change_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_change_rgbfilter();*/ break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ変色スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_mono_change();*/ break;
								case 1: /*tcmag_sprite_mono_change_add();*/ break;
								case 2: /*tcmag_sprite_mono_change_sub();*/ break;
								case 4: /*tcmag_sprite_mono_change_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ変色スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_mono_change();*/ break;
								case 1: /*tcmag_sprite_reverse_mono_change_add();*/ break;
								case 2: /*tcmag_sprite_reverse_mono_change_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_mono_change_rgbfilter();*/ break;
							}
						}
					}
				}
				else{
					if(mono == 0){
						if(reverse == 0){
// 変色明暗スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_change_bright();*/ break;
								case 1: /*tcmag_sprite_change_bright_add();*/ break;
								case 2: /*tcmag_sprite_change_bright_sub();*/ break;
								case 4: /*tcmag_sprite_change_bright_rgbfilter();*/ break;
							}
						}
						else{
// 反転変色明暗スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_change_bright();*/ break;
								case 1: /*tcmag_sprite_reverse_change_bright_add();*/ break;
								case 2: /*tcmag_sprite_reverse_change_bright_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_change_bright_rgbfilter();*/ break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ変色明暗スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_mono_change_bright();*/ break;
								case 1: /*tcmag_sprite_mono_change_bright_add();*/ break;
								case 2: /*tcmag_sprite_mono_change_bright_sub();*/ break;
								case 4: /*tcmag_sprite_mono_change_bright_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ変色明暗スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_mono_change_bright();*/ break;
								case 1: /*tcmag_sprite_reverse_mono_change_bright_add();*/ break;
								case 2: /*tcmag_sprite_reverse_mono_change_bright_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_mono_change_bright_rgbfilter();*/ break;
							}
						}
					}
				}
			}
		}
		else{
			if(c_rate == 0){
				if(p_r==0 && p_g==0 && p_b==0){
					if(mono == 0){
						if(reverse == 0){
// 透明スプライト表示
							switch(disp_mod){
								case 0: tcmag_sprite_clr(); break;
								case 1: tcmag_sprite_clr_add(); break;
								case 2: tcmag_sprite_clr_sub(); break;
								case 4: tcmag_sprite_clr_rgbfilter(); break;
							}
						}
						else{
// 反転透明スプライト表示
							switch(disp_mod){
								case 0: tcmag_sprite_reverse_clr(); break;
								case 1: tcmag_sprite_reverse_clr_add(); break;
								case 2: tcmag_sprite_reverse_clr_sub(); break;
								case 4: tcmag_sprite_reverse_clr_rgbfilter(); break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_mono_clr();*/ break;
								case 1: /*tcmag_sprite_mono_clr_add();*/ break;
								case 2: /*tcmag_sprite_mono_clr_sub();*/ break;
								case 4: /*tcmag_sprite_mono_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_mono_clr();*/ break;
								case 1: /*tcmag_sprite_reverse_mono_clr_add();*/ break;
								case 2: /*tcmag_sprite_reverse_mono_clr_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_mono_clr_rgbfilter();*/ break;
							}
						}
					}
				}
				else{
					if(mono == 0){
						if(reverse == 0){
// 明暗透明スプライト表示
							switch(disp_mod){
								case 0: tcmag_sprite_bright_clr(); break;
								case 1: tcmag_sprite_bright_clr_add(); break;
								case 2: tcmag_sprite_bright_clr_sub(); break;
								case 4: tcmag_sprite_bright_clr_rgbfilter(); break;
							}
						}
						else{
// 反転明暗透明スプライト表示
							switch(disp_mod){
								case 0: tcmag_sprite_reverse_bright_clr(); break;
								case 1: tcmag_sprite_reverse_bright_clr_add(); break;
								case 2: tcmag_sprite_reverse_bright_clr_sub(); break;
								case 4: tcmag_sprite_reverse_bright_clr_rgbfilter(); break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ明暗透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_mono_bright_clr();*/ break;
								case 1: /*tcmag_sprite_mono_bright_clr_add();*/ break;
								case 2: /*tcmag_sprite_mono_bright_clr_sub();*/ break;
								case 4: /*tcmag_sprite_mono_bright_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ明暗透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_mono_bright_clr();*/ break;
								case 1: /*tcmag_sprite_reverse_mono_bright_clr_add();*/ break;
								case 2: /*tcmag_sprite_reverse_mono_bright_clr_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_mono_bright_clr_rgbfilter();*/ break;
							}
						}
					}
				}
			}
			else{
				if(p_r==0 && p_g==0 && p_b==0){
					if(mono == 0){
						if(reverse == 0){
// 変色透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_change_clr();*/ break;
								case 1: /*tcmag_sprite_change_clr_add();*/ break;
								case 2: /*tcmag_sprite_change_clr_sub();*/ break;
								case 4: /*tcmag_sprite_change_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転変色透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_change_clr();*/ break;
								case 1: /*tcmag_sprite_reverse_change_clr_add();*/ break;
								case 2: /*tcmag_sprite_reverse_change_clr_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_change_clr_rgbfilter();*/ break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ変色透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_mono_change_clr();*/ break;
								case 1: /*tcmag_sprite_mono_change_clr_add();*/ break;
								case 2: /*tcmag_sprite_mono_change_clr_sub();*/ break;
								case 4: /*tcmag_sprite_mono_change_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ変色透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_mono_change_clr();*/ break;
								case 1: /*tcmag_sprite_reverse_mono_change_clr_add();*/ break;
								case 2: /*tcmag_sprite_reverse_mono_change_clr_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_mono_change_clr_rgbfilter();*/ break;
							}
						}
					}
				}
				else{
					if(mono == 0){
						if(reverse == 0){
// 変色明暗透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_change_bright_clr();*/ break;
								case 1: /*tcmag_sprite_change_bright_clr_add();*/ break;
								case 2: /*tcmag_sprite_change_bright_clr_sub();*/ break;
								case 4: /*tcmag_sprite_change_bright_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転変色明暗透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_change_bright_clr();*/ break;
								case 1: /*tcmag_sprite_reverse_change_bright_clr_add();*/ break;
								case 2: /*tcmag_sprite_reverse_change_bright_clr_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_change_bright_clr_rgbfilter();*/ break;
							}
						}
					}
					else{
						if(reverse == 0){
// モノ変色明暗透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_mono_change_bright_clr();*/ break;
								case 1: /*tcmag_sprite_mono_change_bright_clr_add();*/ break;
								case 2: /*tcmag_sprite_mono_change_bright_clr_sub();*/ break;
								case 4: /*tcmag_sprite_mono_change_bright_clr_rgbfilter();*/ break;
							}
						}
						else{
// 反転モノ変色明暗透明スプライト表示
							switch(disp_mod){
								case 0: /*tcmag_sprite_reverse_mono_change_bright_clr();*/ break;
								case 1: /*tcmag_sprite_reverse_mono_change_bright_clr_add();*/ break;
								case 2: /*tcmag_sprite_reverse_mono_change_bright_clr_sub();*/ break;
								case 4: /*tcmag_sprite_reverse_mono_change_bright_clr_rgbfilter();*/ break;
							}
						}
					}
				}
			}
		}
	}
}




