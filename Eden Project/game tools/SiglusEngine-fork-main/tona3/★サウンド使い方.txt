
★クラス一覧

	Csound_stream		// サウンドをストリーミング読み込みするための基底クラス。
	Cwave_stream		// Csound_stream を継承。wave ファイルをストリーミング読み込み出来る。
	Cogg_stream			// Csound_stream を継承。ogg ファイルをストリーミング読み込み出来る。
	Csound				// サウンドをオンメモリで格納する。
	Csound_reader		// Csound_stream を継承。Csound からストリーミング読み込み出来る。

	Cdirect_sound		// ダイレクトサウンド。
	Cplayer				// ダイレクトサウンドを使って音声を再生する。
	Cplay_manager		// 別スレッドを立てて Cplayer を監視する。

★ダイレクトサウンドの準備と解放

	ダイレクトサウンドを利用するには、Cdirect_sound クラスを使います。
	グローバルで Cdirect_sound 型のインスタンス Gds が定義されているので、これの初期化と解放を行ってください。
	ダイレクトサウンドを管理するにはウィンドウが必要なので、
	メインのウィンドウの WM_CREATE / WM_CLOSE の中で行うのがベストかも。

	// ---------------------------------------------------------

	// DirectSound の初期化
	Gds.init(Gapp.h_wnd);

	// DirectSound の解放
	Gds.release();

	// ---------------------------------------------------------

★プレイマネージャの初期化と解放

	プレイヤーを監視するために、プレイマネージャーを作成します。
	Cplay_manager 型のインスタンスを作成してください。
	インスタンス１つごとにスレッドが１つ立てられます。
	アプリケーション全体を通してインスタンスは１つで十分だと思います。

	// ---------------------------------------------------------

	// プレイマネージャのインスタンス
	Cplay_manager play_manager;

	// プレイマネージャーの初期化
	play_manager.init();

	// プレイマネージャーの解放
	play_manager.release();			// スレッドの解放を待つため、時間がかかる可能性があります。

	// ---------------------------------------------------------

★プレイヤーの作成と登録

	プレイヤーとして Cplayer 型のインスタンスを作成し、プレイマネージャに登録してください。
	プレイヤー１つにつき、同時に１つ音を鳴らせます。同時に鳴らしたい音の数だけプレイヤーが必要になります。

	// ---------------------------------------------------------

	// プレイヤーのインスタンス
	Cplayer player;

	// プレイヤーの登録
	play_manager.regist_player(&player);

	// プレイヤーを削除
	play_manager.delete_plyaer(&player);

	// ---------------------------------------------------------

★ストリーミング再生

	ストリーミング再生を行うには、Csound_stream から派生した各種クラスを使います。
	wave の場合は Cwave_stream です。ogg の場合は Cogg_stream です。

	// ---------------------------------------------------------
	BSP<Cwave_stream> wave(new Cwave_stream);
	if (wave->open(_T("test.wav")))	{	// wave を開きます。
		player.set_stream(wave);		// プレイヤーにセットします。
	}
	// ---------------------------------------------------------

★オンメモリ再生

	Csound にサウンドをオンメモリ準備します。
	Csound からサウンドを読み込むには、Csound_reader を使います。

	※注意※
	ファイルからオンメモリに読み込むためのストリームと、
	オンメモリからプレイヤーに読み込むためのストリームの２種類が必要なことに注意！

	// ---------------------------------------------------------
	BSP<Cwave_stream> wave(new Cwave_stream);	// wave をファイルから読み込むためのストリーム
	if (wave->open(_T("test.wav")))	{			// wave を開きます。
		BSP<Csound> sound(new Csound);
		if (sound->load_sound(wave))	{	// ストリームからデータを読みこみます。

			BSP<Csound_reader> reader(new Csound_reader);	// オンメモリからプレイヤーに読み込むためのストリーム
			reader->set_sound(sound);			// サウンドをセットします。
			player.set_stream(reader);			// プレイヤーにセットします。
		}
	}

★再生いろいろ

	player.set_loop();		// ループを行う/行わないを設定します。
	player.set_range();		// 開始/終了/再開位置を設定します。
	player.set_play_pos();	// 再生位置を設定します。
	player.set_volume();	// ボリュームを設定します。
	player.play();			// 再生します。
	player.stop();			// 停止します。
	player.play();			// 続きから再生します。
	player.release();		// プレイヤーを解放します。













